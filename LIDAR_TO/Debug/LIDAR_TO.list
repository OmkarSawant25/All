
LIDAR_TO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003580  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003740  08003740  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003740  08003740  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003740  08003740  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac89  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a01  00000000  00000000  0002acc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c0  00000000  00000000  0002ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c366  00000000  00000000  0002d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a390  00000000  00000000  00049846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9583  00000000  00000000  00053bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd159  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c8c  00000000  00000000  000fd1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036f0 	.word	0x080036f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036f0 	.word	0x080036f0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa09 	bl	80005e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f84b 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8d3 	bl	8000380 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f8a1 	bl	8000320 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UARTEx_ReceiveToIdle(&huart1, RxData, sizeof(RxData), 9, 100);
 80001de:	2364      	movs	r3, #100	; 0x64
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2309      	movs	r3, #9
 80001e4:	2209      	movs	r2, #9
 80001e6:	491d      	ldr	r1, [pc, #116]	; (800025c <main+0x94>)
 80001e8:	481d      	ldr	r0, [pc, #116]	; (8000260 <main+0x98>)
 80001ea:	f003 f964 	bl	80034b6 <HAL_UARTEx_ReceiveToIdle>
		  if(RxData[0]==0x59 && RxData[1]==0x59)
 80001ee:	4b1b      	ldr	r3, [pc, #108]	; (800025c <main+0x94>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b59      	cmp	r3, #89	; 0x59
 80001f4:	d10c      	bne.n	8000210 <main+0x48>
 80001f6:	4b19      	ldr	r3, [pc, #100]	; (800025c <main+0x94>)
 80001f8:	785b      	ldrb	r3, [r3, #1]
 80001fa:	2b59      	cmp	r3, #89	; 0x59
 80001fc:	d108      	bne.n	8000210 <main+0x48>
		  {
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80001fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000202:	4818      	ldr	r0, [pc, #96]	; (8000264 <main+0x9c>)
 8000204:	f000 fd92 	bl	8000d2c <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8000208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020c:	f000 fa50 	bl	80006b0 <HAL_Delay>
		  }
			Data[0] = RxData[2] + RxData[3]*256;
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <main+0x94>)
 8000212:	789b      	ldrb	r3, [r3, #2]
 8000214:	b29a      	uxth	r2, r3
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <main+0x94>)
 8000218:	78db      	ldrb	r3, [r3, #3]
 800021a:	b29b      	uxth	r3, r3
 800021c:	021b      	lsls	r3, r3, #8
 800021e:	b29b      	uxth	r3, r3
 8000220:	4413      	add	r3, r2
 8000222:	b29a      	uxth	r2, r3
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <main+0xa0>)
 8000226:	801a      	strh	r2, [r3, #0]
			Data[1] = RxData[4] + RxData[5]*256;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <main+0x94>)
 800022a:	791b      	ldrb	r3, [r3, #4]
 800022c:	b29a      	uxth	r2, r3
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x94>)
 8000230:	795b      	ldrb	r3, [r3, #5]
 8000232:	b29b      	uxth	r3, r3
 8000234:	021b      	lsls	r3, r3, #8
 8000236:	b29b      	uxth	r3, r3
 8000238:	4413      	add	r3, r2
 800023a:	b29a      	uxth	r2, r3
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <main+0xa0>)
 800023e:	805a      	strh	r2, [r3, #2]
			Data[2] = ((RxData[6]<<8 | RxData[7])*256)/8-256;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <main+0x94>)
 8000242:	799b      	ldrb	r3, [r3, #6]
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <main+0x94>)
 8000248:	79d2      	ldrb	r2, [r2, #7]
 800024a:	4313      	orrs	r3, r2
 800024c:	3b08      	subs	r3, #8
 800024e:	b29b      	uxth	r3, r3
 8000250:	015b      	lsls	r3, r3, #5
 8000252:	b29a      	uxth	r2, r3
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <main+0xa0>)
 8000256:	809a      	strh	r2, [r3, #4]
	  HAL_UARTEx_ReceiveToIdle(&huart1, RxData, sizeof(RxData), 9, 100);
 8000258:	e7c1      	b.n	80001de <main+0x16>
 800025a:	bf00      	nop
 800025c:	200000b0 	.word	0x200000b0
 8000260:	20000028 	.word	0x20000028
 8000264:	48001000 	.word	0x48001000
 8000268:	200000bc 	.word	0x200000bc

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b09e      	sub	sp, #120	; 0x78
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fa30 	bl	80036e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	463b      	mov	r3, r7
 8000292:	223c      	movs	r2, #60	; 0x3c
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f003 fa22 	bl	80036e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029c:	2301      	movs	r3, #1
 800029e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fd4c 	bl	8000d60 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ce:	f000 f8a3 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fd74 	bl	8001ddc <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fa:	f000 f88d 	bl	8000418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002fe:	2301      	movs	r3, #1
 8000300:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	463b      	mov	r3, r7
 8000308:	4618      	mov	r0, r3
 800030a:	f001 ff9d 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000314:	f000 f880 	bl	8000418 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3778      	adds	r7, #120	; 0x78
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_USART1_UART_Init+0x58>)
 8000326:	4a15      	ldr	r2, [pc, #84]	; (800037c <MX_USART1_UART_Init+0x5c>)
 8000328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_USART1_UART_Init+0x58>)
 800032c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_USART1_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_USART1_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART1_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART1_UART_Init+0x58>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_USART1_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART1_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_USART1_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART1_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_USART1_UART_Init+0x58>)
 8000364:	f002 f920 	bl	80025a8 <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800036e:	f000 f853 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028
 800037c:	40013800 	.word	0x40013800

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000396:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_GPIO_Init+0x90>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a1d      	ldr	r2, [pc, #116]	; (8000410 <MX_GPIO_Init+0x90>)
 800039c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_GPIO_Init+0x90>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_GPIO_Init+0x90>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a17      	ldr	r2, [pc, #92]	; (8000410 <MX_GPIO_Init+0x90>)
 80003b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MX_GPIO_Init+0x90>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_GPIO_Init+0x90>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a11      	ldr	r2, [pc, #68]	; (8000410 <MX_GPIO_Init+0x90>)
 80003cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_GPIO_Init+0x90>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <MX_GPIO_Init+0x94>)
 80003e6:	f000 fc89 	bl	8000cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	4619      	mov	r1, r3
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_GPIO_Init+0x94>)
 8000404:	f000 fb00 	bl	8000a08 <HAL_GPIO_Init>

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	48001000 	.word	0x48001000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800045a:	2007      	movs	r0, #7
 800045c:	f000 fa1c 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <HAL_UART_MspInit+0x90>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d131      	bne.n	80004f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <HAL_UART_MspInit+0x94>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <HAL_UART_MspInit+0x94>)
 8000494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <HAL_UART_MspInit+0x94>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a15      	ldr	r2, [pc, #84]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004d0:	2307      	movs	r3, #7
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f000 fa93 	bl	8000a08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2025      	movs	r0, #37	; 0x25
 80004e8:	f000 f9e1 	bl	80008ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004ec:	2025      	movs	r0, #37	; 0x25
 80004ee:	f000 f9fa 	bl	80008e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40013800 	.word	0x40013800
 8000500:	40021000 	.word	0x40021000

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <NMI_Handler+0x4>

0800050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <HardFault_Handler+0x4>

08000510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <MemManage_Handler+0x4>

08000516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <BusFault_Handler+0x4>

0800051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <UsageFault_Handler+0x4>

08000522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000550:	f000 f88e 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <USART1_IRQHandler+0x10>)
 800055e:	f002 f871 	bl	8002644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028

0800056c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <SystemInit+0x20>)
 8000572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <SystemInit+0x20>)
 8000578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800057c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000594:	f7ff ffea 	bl	800056c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005be:	f003 f86b 	bl	8003698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c2:	f7ff fe01 	bl	80001c8 <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d4:	08003748 	.word	0x08003748
  ldr r2, =_sbss
 80005d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005dc:	200000d4 	.word	0x200000d4

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>
	...

080005e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_Init+0x28>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_Init+0x28>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f94f 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f808 	bl	8000610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f7ff ff10 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40022000 	.word	0x40022000

08000610 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x54>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x58>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	fbb3 f3f1 	udiv	r3, r3, r1
 800062a:	fbb2 f3f3 	udiv	r3, r2, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f967 	bl	8000902 <HAL_SYSTICK_Config>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e00e      	b.n	800065c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	d80a      	bhi.n	800065a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000644:	2200      	movs	r2, #0
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	f04f 30ff 	mov.w	r0, #4294967295
 800064c:	f000 f92f 	bl	80008ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <HAL_InitTick+0x5c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000656:	2300      	movs	r3, #0
 8000658:	e000      	b.n	800065c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000
 8000668:	20000008 	.word	0x20000008
 800066c:	20000004 	.word	0x20000004

08000670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x20>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x24>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_IncTick+0x24>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000008 	.word	0x20000008
 8000694:	200000d0 	.word	0x200000d0

08000698 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;  
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_GetTick+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	200000d0 	.word	0x200000d0

080006b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b8:	f7ff ffee 	bl	8000698 <HAL_GetTick>
 80006bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c8:	d005      	beq.n	80006d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_Delay+0x44>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006d6:	bf00      	nop
 80006d8:	f7ff ffde 	bl	8000698 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d8f7      	bhi.n	80006d8 <HAL_Delay+0x28>
  {
  }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000008 	.word	0x20000008

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <__NVIC_EnableIRQ+0x38>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff8e 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff29 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff3e 	bl	8000740 <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff8e 	bl	80007ec <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5d 	bl	8000798 <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff31 	bl	800075c <__NVIC_EnableIRQ>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffa2 	bl	8000854 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000928:	2b02      	cmp	r3, #2
 800092a:	d008      	beq.n	800093e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2204      	movs	r2, #4
 8000930:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e020      	b.n	8000980 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 020e 	bic.w	r2, r2, #14
 800094c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0201 	bic.w	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d005      	beq.n	80009ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2204      	movs	r2, #4
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e027      	b.n	80009fe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 020e 	bic.w	r2, r2, #14
 80009bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0201 	bic.w	r2, r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009d6:	2101      	movs	r1, #1
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2201      	movs	r2, #1
 80009e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	4798      	blx	r3
    } 
  }
  return status;
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	e154      	b.n	8000cc2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 8146 	beq.w	8000cbc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d005      	beq.n	8000a48 <HAL_GPIO_Init+0x40>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d130      	bne.n	8000aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	091b      	lsrs	r3, r3, #4
 8000a94:	f003 0201 	and.w	r2, r3, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d017      	beq.n	8000ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d123      	bne.n	8000b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	08da      	lsrs	r2, r3, #3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3208      	adds	r2, #8
 8000afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	220f      	movs	r2, #15
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	691a      	ldr	r2, [r3, #16]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	08da      	lsrs	r2, r3, #3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3208      	adds	r2, #8
 8000b34:	6939      	ldr	r1, [r7, #16]
 8000b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0203 	and.w	r2, r3, #3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 80a0 	beq.w	8000cbc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7c:	4b58      	ldr	r3, [pc, #352]	; (8000ce0 <HAL_GPIO_Init+0x2d8>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a57      	ldr	r2, [pc, #348]	; (8000ce0 <HAL_GPIO_Init+0x2d8>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <HAL_GPIO_Init+0x2d8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b94:	4a53      	ldr	r2, [pc, #332]	; (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bbe:	d019      	beq.n	8000bf4 <HAL_GPIO_Init+0x1ec>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a49      	ldr	r2, [pc, #292]	; (8000ce8 <HAL_GPIO_Init+0x2e0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d013      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e8>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a48      	ldr	r2, [pc, #288]	; (8000cec <HAL_GPIO_Init+0x2e4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00d      	beq.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a47      	ldr	r2, [pc, #284]	; (8000cf0 <HAL_GPIO_Init+0x2e8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <HAL_GPIO_Init+0x1e0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a46      	ldr	r2, [pc, #280]	; (8000cf4 <HAL_GPIO_Init+0x2ec>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d101      	bne.n	8000be4 <HAL_GPIO_Init+0x1dc>
 8000be0:	2304      	movs	r3, #4
 8000be2:	e008      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be4:	2305      	movs	r3, #5
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c06:	4937      	ldr	r1, [pc, #220]	; (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c38:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c62:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f47f aea3 	bne.w	8000a18 <HAL_GPIO_Init+0x10>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	371c      	adds	r7, #28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	48001000 	.word	0x48001000
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d0c:	787b      	ldrb	r3, [r7, #1]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4013      	ands	r3, r2
 8000d44:	041a      	lsls	r2, r3, #16
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	43d9      	mvns	r1, r3
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f001 b823 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 817d 	beq.w	8001096 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9c:	4bbc      	ldr	r3, [pc, #752]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d00c      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	4bb9      	ldr	r3, [pc, #740]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d15c      	bne.n	8000e6e <HAL_RCC_OscConfig+0x10e>
 8000db4:	4bb6      	ldr	r3, [pc, #728]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d155      	bne.n	8000e6e <HAL_RCC_OscConfig+0x10e>
 8000dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	fab3 f383 	clz	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	095b      	lsrs	r3, r3, #5
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <HAL_RCC_OscConfig+0x94>
 8000dee:	4ba8      	ldr	r3, [pc, #672]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	e015      	b.n	8000e20 <HAL_RCC_OscConfig+0xc0>
 8000df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e1c:	4b9c      	ldr	r3, [pc, #624]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e24:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e2c:	fa92 f2a2 	rbit	r2, r2
 8000e30:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	f042 0220 	orr.w	r2, r2, #32
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f002 021f 	and.w	r2, r2, #31
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 811f 	beq.w	8001094 <HAL_RCC_OscConfig+0x334>
 8000e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8116 	bne.w	8001094 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f000 bfaf 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7e:	d106      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12e>
 8000e80:	4b83      	ldr	r3, [pc, #524]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a82      	ldr	r2, [pc, #520]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e036      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x158>
 8000e9e:	4b7c      	ldr	r3, [pc, #496]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7b      	ldr	r2, [pc, #492]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b79      	ldr	r3, [pc, #484]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a78      	ldr	r2, [pc, #480]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e021      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x184>
 8000eca:	4b71      	ldr	r3, [pc, #452]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a70      	ldr	r2, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b6e      	ldr	r3, [pc, #440]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6d      	ldr	r2, [pc, #436]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e00b      	b.n	8000efc <HAL_RCC_OscConfig+0x19c>
 8000ee4:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a69      	ldr	r2, [pc, #420]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b67      	ldr	r3, [pc, #412]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a66      	ldr	r2, [pc, #408]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000efc:	4b64      	ldr	r3, [pc, #400]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	f023 020f 	bic.w	r2, r3, #15
 8000f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	495f      	ldr	r1, [pc, #380]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d059      	beq.n	8000fda <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fbb7 	bl	8000698 <HAL_GetTick>
 8000f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	e00a      	b.n	8000f46 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fbb2 	bl	8000698 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d902      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f000 bf43 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8000f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <HAL_RCC_OscConfig+0x218>
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	e015      	b.n	8000fa4 <HAL_RCC_OscConfig+0x244>
 8000f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f90:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fb0:	fa92 f2a2 	rbit	r2, r2
 8000fb4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fbc:	fab2 f282 	clz	r2, r2
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	f042 0220 	orr.w	r2, r2, #32
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f002 021f 	and.w	r2, r2, #31
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ab      	beq.n	8000f30 <HAL_RCC_OscConfig+0x1d0>
 8000fd8:	e05d      	b.n	8001096 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb5d 	bl	8000698 <HAL_GetTick>
 8000fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fb58 	bl	8000698 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d902      	bls.n	8000ffa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f000 bee9 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8000ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800100e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_RCC_OscConfig+0x2cc>
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e015      	b.n	8001058 <HAL_RCC_OscConfig+0x2f8>
 800102c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001030:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001048:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_RCC_OscConfig+0x330>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001060:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001064:	fa92 f2a2 	rbit	r2, r2
 8001068:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800106c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f002 021f 	and.w	r2, r2, #31
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ab      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x284>
 800108c:	e003      	b.n	8001096 <HAL_RCC_OscConfig+0x336>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 817d 	beq.w	80013a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010ac:	4ba6      	ldr	r3, [pc, #664]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b8:	4ba3      	ldr	r3, [pc, #652]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d172      	bne.n	80011aa <HAL_RCC_OscConfig+0x44a>
 80010c4:	4ba0      	ldr	r3, [pc, #640]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d16c      	bne.n	80011aa <HAL_RCC_OscConfig+0x44a>
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x3a0>
 80010fa:	4b93      	ldr	r3, [pc, #588]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e013      	b.n	8001128 <HAL_RCC_OscConfig+0x3c8>
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001118:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001124:	4b88      	ldr	r3, [pc, #544]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2202      	movs	r2, #2
 800112a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800112e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001132:	fa92 f2a2 	rbit	r2, r2
 8001136:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800113a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	f042 0220 	orr.w	r2, r2, #32
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f002 021f 	and.w	r2, r2, #31
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00a      	beq.n	8001170 <HAL_RCC_OscConfig+0x410>
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 be2e 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	21f8      	movs	r1, #248	; 0xf8
 8001186:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800118e:	fa91 f1a1 	rbit	r1, r1
 8001192:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001196:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800119a:	fab1 f181 	clz	r1, r1
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	408b      	lsls	r3, r1
 80011a2:	4969      	ldr	r1, [pc, #420]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a8:	e0fd      	b.n	80013a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8088 	beq.w	80012cc <HAL_RCC_OscConfig+0x56c>
 80011bc:	2301      	movs	r3, #1
 80011be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	461a      	mov	r2, r3
 80011e4:	2301      	movs	r3, #1
 80011e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fa56 	bl	8000698 <HAL_GetTick>
 80011ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fa51 	bl	8000698 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d902      	bls.n	8001208 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	f000 bde2 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800121a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	095b      	lsrs	r3, r3, #5
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <HAL_RCC_OscConfig+0x4d8>
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	e013      	b.n	8001260 <HAL_RCC_OscConfig+0x500>
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001250:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	2202      	movs	r2, #2
 8001262:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001266:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800126a:	fa92 f2a2 	rbit	r2, r2
 800126e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001272:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f002 021f 	and.w	r2, r2, #31
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0af      	beq.n	80011f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	21f8      	movs	r1, #248	; 0xf8
 80012a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012b0:	fa91 f1a1 	rbit	r1, r1
 80012b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012bc:	fab1 f181 	clz	r1, r1
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	408b      	lsls	r3, r1
 80012c4:	4920      	ldr	r1, [pc, #128]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
 80012ca:	e06c      	b.n	80013a6 <HAL_RCC_OscConfig+0x646>
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff f9ce 	bl	8000698 <HAL_GetTick>
 80012fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff f9c9 	bl	8000698 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d902      	bls.n	8001318 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	f000 bd5a 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800132a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	095b      	lsrs	r3, r3, #5
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b01      	cmp	r3, #1
 8001340:	d104      	bne.n	800134c <HAL_RCC_OscConfig+0x5ec>
 8001342:	4b01      	ldr	r3, [pc, #4]	; (8001348 <HAL_RCC_OscConfig+0x5e8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x614>
 8001348:	40021000 	.word	0x40021000
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001364:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001370:	4bc8      	ldr	r3, [pc, #800]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	2202      	movs	r2, #2
 8001376:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800137a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800137e:	fa92 f2a2 	rbit	r2, r2
 8001382:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001386:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 021f 	and.w	r2, r2, #31
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ad      	bne.n	8001302 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8110 	beq.w	80015dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d079      	beq.n	80014c0 <HAL_RCC_OscConfig+0x760>
 80013cc:	2301      	movs	r3, #1
 80013ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4bab      	ldr	r3, [pc, #684]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	2301      	movs	r3, #1
 80013f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff f94f 	bl	8000698 <HAL_GetTick>
 80013fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff f94a 	bl	8000698 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d902      	bls.n	8001416 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	f000 bcdb 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001430:	2202      	movs	r2, #2
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fa93 f2a3 	rbit	r2, r3
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f2a3 	rbit	r2, r3
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800146e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001470:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800147c:	2102      	movs	r1, #2
 800147e:	6019      	str	r1, [r3, #0]
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f1a3 	rbit	r1, r3
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001496:	6019      	str	r1, [r3, #0]
  return result;
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0a0      	beq.n	8001400 <HAL_RCC_OscConfig+0x6a0>
 80014be:	e08d      	b.n	80015dc <HAL_RCC_OscConfig+0x87c>
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014e2:	601a      	str	r2, [r3, #0]
  return result;
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x938>)
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	461a      	mov	r2, r3
 80014fe:	2300      	movs	r3, #0
 8001500:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff f8c9 	bl	8000698 <HAL_GetTick>
 8001506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff f8c4 	bl	8000698 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d902      	bls.n	8001522 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	f000 bc55 	b.w	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800154e:	2202      	movs	r2, #2
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800158c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800159a:	2102      	movs	r1, #2
 800159c:	6019      	str	r1, [r3, #0]
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fa93 f1a3 	rbit	r1, r3
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015b4:	6019      	str	r1, [r3, #0]
  return result;
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d197      	bne.n	800150c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 81a1 	beq.w	8001934 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	61d3      	str	r3, [r2, #28]
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800162a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11a      	bne.n	8001674 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff f825 	bl	8000698 <HAL_GetTick>
 800164e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001652:	e009      	b.n	8001668 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff f820 	bl	8000698 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e3b1      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x93c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ef      	beq.n	8001654 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10d      	bne.n	80016a0 <HAL_RCC_OscConfig+0x940>
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a02      	ldr	r2, [pc, #8]	; (8001694 <HAL_RCC_OscConfig+0x934>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e03c      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	10908120 	.word	0x10908120
 800169c:	40007000 	.word	0x40007000
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x96a>
 80016b0:	4bc1      	ldr	r3, [pc, #772]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4ac0      	ldr	r2, [pc, #768]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	4bbe      	ldr	r3, [pc, #760]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4abd      	ldr	r2, [pc, #756]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	e020      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x994>
 80016da:	4bb7      	ldr	r3, [pc, #732]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4ab6      	ldr	r2, [pc, #728]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4bb4      	ldr	r3, [pc, #720]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4ab3      	ldr	r2, [pc, #716]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x9ac>
 80016f4:	4bb0      	ldr	r3, [pc, #704]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4aaf      	ldr	r2, [pc, #700]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	4bad      	ldr	r3, [pc, #692]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4aac      	ldr	r2, [pc, #688]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001706:	f023 0304 	bic.w	r3, r3, #4
 800170a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8081 	beq.w	8001820 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7fe ffbb 	bl	8000698 <HAL_GetTick>
 8001722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7fe ffb6 	bl	8000698 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e345      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001748:	2202      	movs	r2, #2
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800176c:	2202      	movs	r2, #2
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001786:	601a      	str	r2, [r3, #0]
  return result;
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001790:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0xa4c>
 80017a6:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0xa74>
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017dc:	2102      	movs	r1, #2
 80017de:	6011      	str	r1, [r2, #0]
 80017e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	fa92 f1a2 	rbit	r1, r2
 80017ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017f6:	6011      	str	r1, [r2, #0]
  return result;
 80017f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d084      	beq.n	8001728 <HAL_RCC_OscConfig+0x9c8>
 800181e:	e07f      	b.n	8001920 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7fe ff3a 	bl	8000698 <HAL_GetTick>
 8001824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7fe ff35 	bl	8000698 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e2c4      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001888:	601a      	str	r2, [r3, #0]
  return result;
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001892:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0xb4e>
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	e013      	b.n	80018d6 <HAL_RCC_OscConfig+0xb76>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018de:	2102      	movs	r1, #2
 80018e0:	6011      	str	r1, [r2, #0]
 80018e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fa92 f1a2 	rbit	r1, r2
 80018f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018f8:	6011      	str	r1, [r2, #0]
  return result;
 80018fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f002 021f 	and.w	r2, r2, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d184      	bne.n	800182a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001920:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 800192e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001932:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8242 	beq.w	8001dca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_RCC_OscConfig+0xc58>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	f000 8213 	beq.w	8001d7a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b02      	cmp	r3, #2
 8001962:	f040 8162 	bne.w	8001c2a <HAL_RCC_OscConfig+0xeca>
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800196e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800198a:	601a      	str	r2, [r3, #0]
  return result;
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001994:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	461a      	mov	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7fe fe74 	bl	8000698 <HAL_GetTick>
 80019b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	e00c      	b.n	80019d0 <HAL_RCC_OscConfig+0xc70>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7fe fe6c 	bl	8000698 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1fd      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0xcba>
 8001a14:	4bb0      	ldr	r3, [pc, #704]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e027      	b.n	8001a6a <HAL_RCC_OscConfig+0xd0a>
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a76:	6011      	str	r1, [r2, #0]
 8001a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fa92 f1a2 	rbit	r1, r2
 8001a86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a8e:	6011      	str	r1, [r2, #0]
  return result;
 8001a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fab2 f282 	clz	r2, r2
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f042 0220 	orr.w	r2, r2, #32
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f002 021f 	and.w	r2, r2, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d182      	bne.n	80019bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab6:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	497f      	ldr	r1, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ae6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b02:	601a      	str	r2, [r3, #0]
  return result;
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2301      	movs	r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7fe fdb8 	bl	8000698 <HAL_GetTick>
 8001b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	e009      	b.n	8001b42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7fe fdb3 	bl	8000698 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e144      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0xe2c>
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e027      	b.n	8001bdc <HAL_RCC_OscConfig+0xe7c>
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001be4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be8:	6011      	str	r1, [r2, #0]
 8001bea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	fa92 f1a2 	rbit	r1, r2
 8001bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c00:	6011      	str	r1, [r2, #0]
  return result;
 8001c02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fab2 f282 	clz	r2, r2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d082      	beq.n	8001b2e <HAL_RCC_OscConfig+0xdce>
 8001c28:	e0cf      	b.n	8001dca <HAL_RCC_OscConfig+0x106a>
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fd12 	bl	8000698 <HAL_GetTick>
 8001c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fd0d 	bl	8000698 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e09e      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d104      	bne.n	8001cdc <HAL_RCC_OscConfig+0xf7c>
 8001cd2:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <HAL_RCC_OscConfig+0xf78>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e029      	b.n	8001d2c <HAL_RCC_OscConfig+0xfcc>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x1078>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d30:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fa92 f1a2 	rbit	r1, r2
 8001d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d4c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d50:	6011      	str	r1, [r2, #0]
  return result;
 8001d52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d56:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d180      	bne.n	8001c7a <HAL_RCC_OscConfig+0xf1a>
 8001d78:	e027      	b.n	8001dca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01e      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x1078>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b09e      	sub	sp, #120	; 0x78
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e162      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	498b      	ldr	r1, [pc, #556]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e14a      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	497f      	ldr	r1, [pc, #508]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80dc 	beq.w	8002008 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d13c      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xf6>
 8001e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xa6>
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	e00f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0xc6>
 8001e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e94:	663b      	str	r3, [r7, #96]	; 0x60
 8001e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eaa:	fa92 f2a2 	rbit	r2, r2
 8001eae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001eb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d17b      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0f3      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d13c      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x178>
 8001eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x128>
 8001efe:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	e00f      	b.n	8001f24 <HAL_RCC_ClockConfig+0x148>
 8001f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
 8001f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
 8001f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f20:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f042 0220 	orr.w	r2, r2, #32
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d13a      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b2      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
 8001f54:	2302      	movs	r3, #2
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x1a0>
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e00d      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1bc>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2202      	movs	r2, #2
 8001f9a:	61ba      	str	r2, [r7, #24]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	fa92 f2a2 	rbit	r2, r2
 8001fa2:	617a      	str	r2, [r7, #20]
  return result;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e079      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	491a      	ldr	r1, [pc, #104]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fb5e 	bl	8000698 <HAL_GetTick>
 8001fdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fb5a 	bl	8000698 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e061      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d214      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4906      	ldr	r1, [pc, #24]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_RCC_ClockConfig+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e040      	b.n	80020ba <HAL_RCC_ClockConfig+0x2de>
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4912      	ldr	r1, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800207e:	f000 f829 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	22f0      	movs	r2, #240	; 0xf0
 800208e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	fa92 f2a2 	rbit	r2, r2
 8002096:	60fa      	str	r2, [r7, #12]
  return result;
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	fab2 f282 	clz	r2, r2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	40d3      	lsrs	r3, r2
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x2ec>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	fa21 f303 	lsr.w	r3, r1, r3
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_RCC_ClockConfig+0x2f0>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_RCC_ClockConfig+0x2f4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe faac 	bl	8000610 <HAL_InitTick>
  
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3778      	adds	r7, #120	; 0x78
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08003708 	.word	0x08003708
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b08b      	sub	sp, #44	; 0x2c
 80020d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x30>
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x36>
 8002102:	e03c      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002106:	623b      	str	r3, [r7, #32]
      break;
 8002108:	e03c      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002110:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002114:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	fa92 f2a2 	rbit	r2, r2
 800211c:	607a      	str	r2, [r7, #4]
  return result;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_RCC_GetSysClockFreq+0xc8>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	220f      	movs	r2, #15
 8002138:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	60fa      	str	r2, [r7, #12]
  return result;
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	fab2 f282 	clz	r2, r2
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	40d3      	lsrs	r3, r2
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	fbb2 f2f3 	udiv	r2, r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	e004      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002180:	623b      	str	r3, [r7, #32]
      break;
 8002182:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002184:	6a3b      	ldr	r3, [r7, #32]
}
 8002186:	4618      	mov	r0, r3
 8002188:	372c      	adds	r7, #44	; 0x2c
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	007a1200 	.word	0x007a1200
 800219c:	08003720 	.word	0x08003720
 80021a0:	08003730 	.word	0x08003730
 80021a4:	003d0900 	.word	0x003d0900

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000000 	.word	0x20000000

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021c6:	f7ff ffef 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	603a      	str	r2, [r7, #0]
  return result;
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08003718 	.word	0x08003718

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800220a:	f7ff ffcd 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 800220e:	4601      	mov	r1, r0
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002218:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800221c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	603a      	str	r2, [r7, #0]
  return result;
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	40d3      	lsrs	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08003718 	.word	0x08003718

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b092      	sub	sp, #72	; 0x48
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80d4 	beq.w	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226c:	4b4e      	ldr	r3, [pc, #312]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10e      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	61d3      	str	r3, [r2, #28]
 8002284:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b45      	ldr	r3, [pc, #276]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a41      	ldr	r2, [pc, #260]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe f9f3 	bl	8000698 <HAL_GetTick>
 80022b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe f9ef 	bl	8000698 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e169      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d4:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8084 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d07c      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	461a      	mov	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	461a      	mov	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04b      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe f99f 	bl	8000698 <HAL_GetTick>
 800235a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe f99b 	bl	8000698 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e113      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002374:	2302      	movs	r3, #2
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	61fb      	str	r3, [r7, #28]
  return result;
 800238c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d108      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023a2:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	e00d      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	10908100 	.word	0x10908100
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	4b78      	ldr	r3, [pc, #480]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2202      	movs	r2, #2
 80023c6:	613a      	str	r2, [r7, #16]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	60fa      	str	r2, [r7, #12]
  return result;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f002 021f 	and.w	r2, r2, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0b7      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023ee:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	496a      	ldr	r1, [pc, #424]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002412:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f023 0203 	bic.w	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	495d      	ldr	r1, [pc, #372]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243e:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4956      	ldr	r1, [pc, #344]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	494e      	ldr	r1, [pc, #312]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f023 0210 	bic.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4947      	ldr	r1, [pc, #284]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002498:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	493f      	ldr	r1, [pc, #252]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f023 0220 	bic.w	r2, r3, #32
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4938      	ldr	r1, [pc, #224]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	4930      	ldr	r1, [pc, #192]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	4921      	ldr	r1, [pc, #132]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	491a      	ldr	r1, [pc, #104]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	4912      	ldr	r1, [pc, #72]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	490b      	ldr	r1, [pc, #44]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	4903      	ldr	r1, [pc, #12]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3748      	adds	r7, #72	; 0x48
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e040      	b.n	800263c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fd ff4e 	bl	800046c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	; 0x24
 80025d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fb32 	bl	8002c50 <UART_SetConfig>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e022      	b.n	800263c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fcfa 	bl	8002ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fd81 	bl	800313c <UART_CheckIdleState>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0ba      	sub	sp, #232	; 0xe8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800266a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800266e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002672:	4013      	ands	r3, r2
 8002674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d115      	bne.n	80026ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00f      	beq.n	80026ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800268c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 82ab 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
      }
      return;
 80026aa:	e2a5      	b.n	8002bf8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8117 	beq.w	80028e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026c6:	4b85      	ldr	r3, [pc, #532]	; (80028dc <HAL_UART_IRQHandler+0x298>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 810a 	beq.w	80028e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d011      	beq.n	8002700 <HAL_UART_IRQHandler+0xbc>
 80026dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d011      	beq.n	8002730 <HAL_UART_IRQHandler+0xec>
 800270c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d011      	beq.n	8002760 <HAL_UART_IRQHandler+0x11c>
 800273c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2204      	movs	r2, #4
 800274e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002756:	f043 0202 	orr.w	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800276c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00b      	beq.n	800279c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2208      	movs	r2, #8
 800278a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002792:	f043 0208 	orr.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800279c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <HAL_UART_IRQHandler+0x18a>
 80027a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00c      	beq.n	80027ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8211 	beq.w	8002bfc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d005      	beq.n	8002826 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800281a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800281e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	d04f      	beq.n	80028c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fd97 	bl	800335a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d141      	bne.n	80028be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3308      	adds	r3, #8
 8002840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3308      	adds	r3, #8
 8002862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800286a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800287e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1d9      	bne.n	800283a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288a:	2b00      	cmp	r3, #0
 800288c:	d013      	beq.n	80028b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_UART_IRQHandler+0x29c>)
 8002894:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f876 	bl	800098c <HAL_DMA_Abort_IT>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d017      	beq.n	80028d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028b0:	4610      	mov	r0, r2
 80028b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b4:	e00f      	b.n	80028d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9b4 	bl	8002c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	e00b      	b.n	80028d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f9b0 	bl	8002c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	e007      	b.n	80028d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f9ac 	bl	8002c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80028d4:	e192      	b.n	8002bfc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d6:	bf00      	nop
    return;
 80028d8:	e190      	b.n	8002bfc <HAL_UART_IRQHandler+0x5b8>
 80028da:	bf00      	nop
 80028dc:	04000120 	.word	0x04000120
 80028e0:	08003423 	.word	0x08003423

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 814b 	bne.w	8002b84 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8144 	beq.w	8002b84 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 813d 	beq.w	8002b84 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	f040 80b5 	bne.w	8002a8c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800292e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8164 	beq.w	8002c00 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800293e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002942:	429a      	cmp	r2, r3
 8002944:	f080 815c 	bcs.w	8002c00 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800294e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b20      	cmp	r3, #32
 800295a:	f000 8086 	beq.w	8002a6a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800297a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800298c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002994:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1da      	bne.n	800295e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3308      	adds	r3, #8
 80029ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3308      	adds	r3, #8
 80029c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e1      	bne.n	80029a8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3308      	adds	r3, #8
 80029ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3308      	adds	r3, #8
 8002a04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e3      	bne.n	80029e4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3a:	f023 0310 	bic.w	r3, r3, #16
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e4      	bne.n	8002a2a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd ff58 	bl	800091a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8d7 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a8a:	e0b9      	b.n	8002c00 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80ab 	beq.w	8002c04 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80a6 	beq.w	8002c04 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ada:	647b      	str	r3, [r7, #68]	; 0x44
 8002adc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e4      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3308      	adds	r3, #8
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	623b      	str	r3, [r7, #32]
   return(result);
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b12:	633a      	str	r2, [r7, #48]	; 0x30
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e3      	bne.n	8002aee <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	e853 3f00 	ldrex	r3, [r3]
 8002b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0310 	bic.w	r3, r3, #16
 8002b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	69b9      	ldr	r1, [r7, #24]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	617b      	str	r3, [r7, #20]
   return(result);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e4      	bne.n	8002b3a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f85b 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b82:	e03f      	b.n	8002c04 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <HAL_UART_IRQHandler+0x56a>
 8002b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fc7b 	bl	80034a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bac:	e02d      	b.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01c      	beq.n	8002c08 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
    }
    return;
 8002bd6:	e017      	b.n	8002c08 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
 8002be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00c      	beq.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fc2c 	bl	800344e <UART_EndTransmit_IT>
    return;
 8002bf6:	e008      	b.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002bf8:	bf00      	nop
 8002bfa:	e006      	b.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002bfc:	bf00      	nop
 8002bfe:	e004      	b.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c00:	bf00      	nop
 8002c02:	e002      	b.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c04:	bf00      	nop
 8002c06:	e000      	b.n	8002c0a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c08:	bf00      	nop
  }

}
 8002c0a:	37e8      	adds	r7, #232	; 0xe8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c7e:	f023 030c 	bic.w	r3, r3, #12
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	6979      	ldr	r1, [r7, #20]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4aa7      	ldr	r2, [pc, #668]	; (8002f68 <UART_SetConfig+0x318>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d120      	bne.n	8002d12 <UART_SetConfig+0xc2>
 8002cd0:	4ba6      	ldr	r3, [pc, #664]	; (8002f6c <UART_SetConfig+0x31c>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d817      	bhi.n	8002d0c <UART_SetConfig+0xbc>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <UART_SetConfig+0x94>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d01 	.word	0x08002d01
 8002cec:	08002d07 	.word	0x08002d07
 8002cf0:	08002cfb 	.word	0x08002cfb
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e0b5      	b.n	8002e66 <UART_SetConfig+0x216>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e0b2      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d00:	2304      	movs	r3, #4
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	e0af      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d06:	2308      	movs	r3, #8
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e0ac      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e0a9      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a96      	ldr	r2, [pc, #600]	; (8002f70 <UART_SetConfig+0x320>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d124      	bne.n	8002d66 <UART_SetConfig+0x116>
 8002d1c:	4b93      	ldr	r3, [pc, #588]	; (8002f6c <UART_SetConfig+0x31c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d28:	d011      	beq.n	8002d4e <UART_SetConfig+0xfe>
 8002d2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d2e:	d817      	bhi.n	8002d60 <UART_SetConfig+0x110>
 8002d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d34:	d011      	beq.n	8002d5a <UART_SetConfig+0x10a>
 8002d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3a:	d811      	bhi.n	8002d60 <UART_SetConfig+0x110>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <UART_SetConfig+0xf8>
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d006      	beq.n	8002d54 <UART_SetConfig+0x104>
 8002d46:	e00b      	b.n	8002d60 <UART_SetConfig+0x110>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e08b      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e088      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d54:	2304      	movs	r3, #4
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e085      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e082      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d60:	2310      	movs	r3, #16
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e07f      	b.n	8002e66 <UART_SetConfig+0x216>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a82      	ldr	r2, [pc, #520]	; (8002f74 <UART_SetConfig+0x324>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d124      	bne.n	8002dba <UART_SetConfig+0x16a>
 8002d70:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <UART_SetConfig+0x31c>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002d78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d7c:	d011      	beq.n	8002da2 <UART_SetConfig+0x152>
 8002d7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d82:	d817      	bhi.n	8002db4 <UART_SetConfig+0x164>
 8002d84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d88:	d011      	beq.n	8002dae <UART_SetConfig+0x15e>
 8002d8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d8e:	d811      	bhi.n	8002db4 <UART_SetConfig+0x164>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <UART_SetConfig+0x14c>
 8002d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d98:	d006      	beq.n	8002da8 <UART_SetConfig+0x158>
 8002d9a:	e00b      	b.n	8002db4 <UART_SetConfig+0x164>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e061      	b.n	8002e66 <UART_SetConfig+0x216>
 8002da2:	2302      	movs	r3, #2
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e05e      	b.n	8002e66 <UART_SetConfig+0x216>
 8002da8:	2304      	movs	r3, #4
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e05b      	b.n	8002e66 <UART_SetConfig+0x216>
 8002dae:	2308      	movs	r3, #8
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e058      	b.n	8002e66 <UART_SetConfig+0x216>
 8002db4:	2310      	movs	r3, #16
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e055      	b.n	8002e66 <UART_SetConfig+0x216>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6e      	ldr	r2, [pc, #440]	; (8002f78 <UART_SetConfig+0x328>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d124      	bne.n	8002e0e <UART_SetConfig+0x1be>
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <UART_SetConfig+0x31c>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002dcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dd0:	d011      	beq.n	8002df6 <UART_SetConfig+0x1a6>
 8002dd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dd6:	d817      	bhi.n	8002e08 <UART_SetConfig+0x1b8>
 8002dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ddc:	d011      	beq.n	8002e02 <UART_SetConfig+0x1b2>
 8002dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002de2:	d811      	bhi.n	8002e08 <UART_SetConfig+0x1b8>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <UART_SetConfig+0x1a0>
 8002de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dec:	d006      	beq.n	8002dfc <UART_SetConfig+0x1ac>
 8002dee:	e00b      	b.n	8002e08 <UART_SetConfig+0x1b8>
 8002df0:	2300      	movs	r3, #0
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e037      	b.n	8002e66 <UART_SetConfig+0x216>
 8002df6:	2302      	movs	r3, #2
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	e034      	b.n	8002e66 <UART_SetConfig+0x216>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e031      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e02:	2308      	movs	r3, #8
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e02e      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e08:	2310      	movs	r3, #16
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e02b      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5a      	ldr	r2, [pc, #360]	; (8002f7c <UART_SetConfig+0x32c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d124      	bne.n	8002e62 <UART_SetConfig+0x212>
 8002e18:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <UART_SetConfig+0x31c>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e24:	d011      	beq.n	8002e4a <UART_SetConfig+0x1fa>
 8002e26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e2a:	d817      	bhi.n	8002e5c <UART_SetConfig+0x20c>
 8002e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e30:	d011      	beq.n	8002e56 <UART_SetConfig+0x206>
 8002e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e36:	d811      	bhi.n	8002e5c <UART_SetConfig+0x20c>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <UART_SetConfig+0x1f4>
 8002e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e40:	d006      	beq.n	8002e50 <UART_SetConfig+0x200>
 8002e42:	e00b      	b.n	8002e5c <UART_SetConfig+0x20c>
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e00d      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e00a      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e50:	2304      	movs	r3, #4
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e007      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e56:	2308      	movs	r3, #8
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e004      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e001      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e62:	2310      	movs	r3, #16
 8002e64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6e:	d15b      	bne.n	8002f28 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002e70:	7ffb      	ldrb	r3, [r7, #31]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d827      	bhi.n	8002ec6 <UART_SetConfig+0x276>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0x22c>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	08002eb1 	.word	0x08002eb1
 8002e88:	08002ec7 	.word	0x08002ec7
 8002e8c:	08002eb7 	.word	0x08002eb7
 8002e90:	08002ec7 	.word	0x08002ec7
 8002e94:	08002ec7 	.word	0x08002ec7
 8002e98:	08002ec7 	.word	0x08002ec7
 8002e9c:	08002ebf 	.word	0x08002ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff f98e 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	61b8      	str	r0, [r7, #24]
        break;
 8002ea6:	e013      	b.n	8002ed0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7ff f9ac 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002eac:	61b8      	str	r0, [r7, #24]
        break;
 8002eae:	e00f      	b.n	8002ed0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb0:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <UART_SetConfig+0x330>)
 8002eb2:	61bb      	str	r3, [r7, #24]
        break;
 8002eb4:	e00c      	b.n	8002ed0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb6:	f7ff f90d 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002eba:	61b8      	str	r0, [r7, #24]
        break;
 8002ebc:	e008      	b.n	8002ed0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec2:	61bb      	str	r3, [r7, #24]
        break;
 8002ec4:	e004      	b.n	8002ed0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8002ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8082 	beq.w	8002fdc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	005a      	lsls	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	441a      	add	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d916      	bls.n	8002f22 <UART_SetConfig+0x2d2>
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d212      	bcs.n	8002f22 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f023 030f 	bic.w	r3, r3, #15
 8002f04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	89fa      	ldrh	r2, [r7, #14]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	e05c      	b.n	8002fdc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77bb      	strb	r3, [r7, #30]
 8002f26:	e059      	b.n	8002fdc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d835      	bhi.n	8002f9a <UART_SetConfig+0x34a>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <UART_SetConfig+0x2e4>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f61 	.word	0x08002f61
 8002f3c:	08002f85 	.word	0x08002f85
 8002f40:	08002f9b 	.word	0x08002f9b
 8002f44:	08002f8b 	.word	0x08002f8b
 8002f48:	08002f9b 	.word	0x08002f9b
 8002f4c:	08002f9b 	.word	0x08002f9b
 8002f50:	08002f9b 	.word	0x08002f9b
 8002f54:	08002f93 	.word	0x08002f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7ff f932 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	61b8      	str	r0, [r7, #24]
        break;
 8002f5e:	e021      	b.n	8002fa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7ff f950 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002f64:	61b8      	str	r0, [r7, #24]
        break;
 8002f66:	e01d      	b.n	8002fa4 <UART_SetConfig+0x354>
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40004400 	.word	0x40004400
 8002f74:	40004800 	.word	0x40004800
 8002f78:	40004c00 	.word	0x40004c00
 8002f7c:	40005000 	.word	0x40005000
 8002f80:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <UART_SetConfig+0x3a4>)
 8002f86:	61bb      	str	r3, [r7, #24]
        break;
 8002f88:	e00c      	b.n	8002fa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8a:	f7ff f8a3 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002f8e:	61b8      	str	r0, [r7, #24]
        break;
 8002f90:	e008      	b.n	8002fa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f96:	61bb      	str	r3, [r7, #24]
        break;
 8002f98:	e004      	b.n	8002fa4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8002fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	085a      	lsrs	r2, r3, #1
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b0f      	cmp	r3, #15
 8002fc2:	d909      	bls.n	8002fd8 <UART_SetConfig+0x388>
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d205      	bcs.n	8002fd8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	e001      	b.n	8002fdc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fe8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01a      	beq.n	800310e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f6:	d10a      	bne.n	800310e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
  }
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b098      	sub	sp, #96	; 0x60
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800314c:	f7fd faa4 	bl	8000698 <HAL_GetTick>
 8003150:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d12e      	bne.n	80031be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003168:	2200      	movs	r2, #0
 800316a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f88c 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d021      	beq.n	80031be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318e:	653b      	str	r3, [r7, #80]	; 0x50
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800319e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e6      	bne.n	800317a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e062      	b.n	8003284 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d149      	bne.n	8003260 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f856 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03c      	beq.n	8003260 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	623b      	str	r3, [r7, #32]
   return(result);
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
 8003206:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800320a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e6      	bne.n	80031e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	60fb      	str	r3, [r7, #12]
   return(result);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	617b      	str	r3, [r7, #20]
   return(result);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e5      	bne.n	8003218 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e011      	b.n	8003284 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3758      	adds	r7, #88	; 0x58
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329c:	e049      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d045      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fd f9f7 	bl	8000698 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <UART_WaitOnFlagUntilTimeout+0x30>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e048      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d031      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d110      	bne.n	80032fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2208      	movs	r2, #8
 80032e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f838 	bl	800335a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2208      	movs	r2, #8
 80032ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e029      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330c:	d111      	bne.n	8003332 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f81e 	bl	800335a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e00f      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0a6      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800335a:	b480      	push	{r7}
 800335c:	b095      	sub	sp, #84	; 0x54
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
 8003382:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e6      	bne.n	8003362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d118      	bne.n	8003402 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 0310 	bic.w	r3, r3, #16
 80033e4:	647b      	str	r3, [r7, #68]	; 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	613b      	str	r3, [r7, #16]
   return(result);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e6      	bne.n	80033d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003416:	bf00      	nop
 8003418:	3754      	adds	r7, #84	; 0x54
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fbef 	bl	8002c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b088      	sub	sp, #32
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	60bb      	str	r3, [r7, #8]
   return(result);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	613b      	str	r3, [r7, #16]
   return(result);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e6      	bne.n	8003456 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fbbb 	bl	8002c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800349a:	bf00      	nop
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	f040 80dd 	bne.w	800368c <HAL_UARTEx_ReceiveToIdle+0x1d6>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_UARTEx_ReceiveToIdle+0x28>
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0d5      	b.n	800368e <HAL_UARTEx_ReceiveToIdle+0x1d8>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2222      	movs	r2, #34	; 0x22
 80034ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fe:	f7fd f8cb 	bl	8000698 <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d10e      	bne.n	800353c <HAL_UARTEx_ReceiveToIdle+0x86>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d105      	bne.n	8003532 <HAL_UARTEx_ReceiveToIdle+0x7c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f240 12ff 	movw	r2, #511	; 0x1ff
 800352c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003530:	e01a      	b.n	8003568 <HAL_UARTEx_ReceiveToIdle+0xb2>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800353a:	e015      	b.n	8003568 <HAL_UARTEx_ReceiveToIdle+0xb2>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10d      	bne.n	8003560 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <HAL_UARTEx_ReceiveToIdle+0xa0>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	22ff      	movs	r2, #255	; 0xff
 8003550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003554:	e008      	b.n	8003568 <HAL_UARTEx_ReceiveToIdle+0xb2>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	227f      	movs	r2, #127	; 0x7f
 800355a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800355e:	e003      	b.n	8003568 <HAL_UARTEx_ReceiveToIdle+0xb2>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800356e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d108      	bne.n	800358c <HAL_UARTEx_ReceiveToIdle+0xd6>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <HAL_UARTEx_ReceiveToIdle+0xd6>
    {
      pdata8bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e003      	b.n	8003594 <HAL_UARTEx_ReceiveToIdle+0xde>
    }
    else
    {
      pdata8bits  = pData;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800359a:	e060      	b.n	800365e <HAL_UARTEx_ReceiveToIdle+0x1a8>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d110      	bne.n	80035cc <HAL_UARTEx_ReceiveToIdle+0x116>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2210      	movs	r2, #16
 80035b0:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_UARTEx_ReceiveToIdle+0x116>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2202      	movs	r2, #2
 80035be:	665a      	str	r2, [r3, #100]	; 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e060      	b.n	800368e <HAL_UARTEx_ReceiveToIdle+0x1d8>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d12c      	bne.n	8003634 <HAL_UARTEx_ReceiveToIdle+0x17e>
      {
        if (pdata8bits == NULL)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <HAL_UARTEx_ReceiveToIdle+0x144>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	8a7b      	ldrh	r3, [r7, #18]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	3302      	adds	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	e00d      	b.n	8003616 <HAL_UARTEx_ReceiveToIdle+0x160>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	8a7b      	ldrh	r3, [r7, #18]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4013      	ands	r3, r2
 800360a:	b2da      	uxtb	r2, r3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d010      	beq.n	800365e <HAL_UARTEx_ReceiveToIdle+0x1a8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800363c:	f7fd f82c 	bl	8000698 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <HAL_UARTEx_ReceiveToIdle+0x19c>
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <HAL_UARTEx_ReceiveToIdle+0x1a8>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e017      	b.n	800368e <HAL_UARTEx_ReceiveToIdle+0x1d8>
    while (huart->RxXferCount > 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d198      	bne.n	800359c <HAL_UARTEx_ReceiveToIdle+0xe6>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003676:	b29b      	uxth	r3, r3
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	b29a      	uxth	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_UARTEx_ReceiveToIdle+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <__libc_init_array>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	4d0d      	ldr	r5, [pc, #52]	; (80036d0 <__libc_init_array+0x38>)
 800369c:	4c0d      	ldr	r4, [pc, #52]	; (80036d4 <__libc_init_array+0x3c>)
 800369e:	1b64      	subs	r4, r4, r5
 80036a0:	10a4      	asrs	r4, r4, #2
 80036a2:	2600      	movs	r6, #0
 80036a4:	42a6      	cmp	r6, r4
 80036a6:	d109      	bne.n	80036bc <__libc_init_array+0x24>
 80036a8:	4d0b      	ldr	r5, [pc, #44]	; (80036d8 <__libc_init_array+0x40>)
 80036aa:	4c0c      	ldr	r4, [pc, #48]	; (80036dc <__libc_init_array+0x44>)
 80036ac:	f000 f820 	bl	80036f0 <_init>
 80036b0:	1b64      	subs	r4, r4, r5
 80036b2:	10a4      	asrs	r4, r4, #2
 80036b4:	2600      	movs	r6, #0
 80036b6:	42a6      	cmp	r6, r4
 80036b8:	d105      	bne.n	80036c6 <__libc_init_array+0x2e>
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c0:	4798      	blx	r3
 80036c2:	3601      	adds	r6, #1
 80036c4:	e7ee      	b.n	80036a4 <__libc_init_array+0xc>
 80036c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ca:	4798      	blx	r3
 80036cc:	3601      	adds	r6, #1
 80036ce:	e7f2      	b.n	80036b6 <__libc_init_array+0x1e>
 80036d0:	08003740 	.word	0x08003740
 80036d4:	08003740 	.word	0x08003740
 80036d8:	08003740 	.word	0x08003740
 80036dc:	08003744 	.word	0x08003744

080036e0 <memset>:
 80036e0:	4402      	add	r2, r0
 80036e2:	4603      	mov	r3, r0
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d100      	bne.n	80036ea <memset+0xa>
 80036e8:	4770      	bx	lr
 80036ea:	f803 1b01 	strb.w	r1, [r3], #1
 80036ee:	e7f9      	b.n	80036e4 <memset+0x4>

080036f0 <_init>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr

080036fc <_fini>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	bf00      	nop
 8003700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003702:	bc08      	pop	{r3}
 8003704:	469e      	mov	lr, r3
 8003706:	4770      	bx	lr
