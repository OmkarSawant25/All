
LIDAR_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d6c  08003d6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d6c  08003d6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d6c  08003d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af6e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a41  00000000  00000000  0002afaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c366  00000000  00000000  0002d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a3c5  00000000  00000000  00049b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a95b2  00000000  00000000  00053f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd515  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cec  00000000  00000000  000fd568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d1c 	.word	0x08003d1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d1c 	.word	0x08003d1c

080001c8 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t RxData[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	 HAL_UART_Receive_IT(&huart1, RxData, sizeof(RxData));
 80001d0:	220a      	movs	r2, #10
 80001d2:	4904      	ldr	r1, [pc, #16]	; (80001e4 <HAL_UART_RxCpltCallback+0x1c>)
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <HAL_UART_RxCpltCallback+0x20>)
 80001d6:	f002 fb9b 	bl	8002910 <HAL_UART_Receive_IT>
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200000f4 	.word	0x200000f4
 80001e8:	20000028 	.word	0x20000028

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fa38 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f81c 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f8c2 	bl	8000380 <MX_GPIO_Init>
  MX_DMA_Init();
 80001fc:	f000 f8a2 	bl	8000344 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000200:	f000 f870 	bl	80002e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, RxData, sizeof(RxData));
 8000204:	220a      	movs	r2, #10
 8000206:	4907      	ldr	r1, [pc, #28]	; (8000224 <main+0x38>)
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <main+0x3c>)
 800020a:	f002 fb81 	bl	8002910 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 800020e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x40>)
 8000214:	f000 fef0 	bl	8000ff8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021c:	f000 fa88 	bl	8000730 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000220:	e7f5      	b.n	800020e <main+0x22>
 8000222:	bf00      	nop
 8000224:	200000f4 	.word	0x200000f4
 8000228:	20000028 	.word	0x20000028
 800022c:	48001000 	.word	0x48001000

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b09e      	sub	sp, #120	; 0x78
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fd64 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	223c      	movs	r2, #60	; 0x3c
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fd56 	bl	8003d0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000260:	2301      	movs	r3, #1
 8000262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000280:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fed0 	bl	800102c <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000292:	f000 f8cd 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fef8 	bl	80020a8 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002be:	f000 f8b7 	bl	8000430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ca:	463b      	mov	r3, r7
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 f921 	bl	8002514 <HAL_RCCEx_PeriphCLKConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d8:	f000 f8aa 	bl	8000430 <Error_Handler>
  }
}
 80002dc:	bf00      	nop
 80002de:	3778      	adds	r7, #120	; 0x78
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002ea:	4a15      	ldr	r2, [pc, #84]	; (8000340 <MX_USART1_UART_Init+0x5c>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_USART1_UART_Init+0x58>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART1_UART_Init+0x58>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x58>)
 8000328:	f002 faa4 	bl	8002874 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000332:	f000 f87d 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028
 8000340:	40013800 	.word	0x40013800

08000344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_DMA_Init+0x38>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a0b      	ldr	r2, [pc, #44]	; (800037c <MX_DMA_Init+0x38>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_DMA_Init+0x38>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	200f      	movs	r0, #15
 8000368:	f000 fae1 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800036c:	200f      	movs	r0, #15
 800036e:	f000 fafa 	bl	8000966 <HAL_NVIC_EnableIRQ>

}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000396:	4b24      	ldr	r3, [pc, #144]	; (8000428 <MX_GPIO_Init+0xa8>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a23      	ldr	r2, [pc, #140]	; (8000428 <MX_GPIO_Init+0xa8>)
 800039c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b21      	ldr	r3, [pc, #132]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ae:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a1d      	ldr	r2, [pc, #116]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a17      	ldr	r2, [pc, #92]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a11      	ldr	r2, [pc, #68]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_GPIO_Init+0xa8>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <MX_GPIO_Init+0xac>)
 80003fe:	f000 fde3 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	4619      	mov	r1, r3
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0xac>)
 800041c:	f000 fc5a 	bl	8000cd4 <HAL_GPIO_Init>

}
 8000420:	bf00      	nop
 8000422:	3728      	adds	r7, #40	; 0x28
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000
 800042c:	48001000 	.word	0x48001000

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	e7fe      	b.n	8000438 <Error_Handler+0x8>
	...

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x44>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x44>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <HAL_MspInit+0x44>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a08      	ldr	r2, [pc, #32]	; (8000480 <HAL_MspInit+0x44>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_MspInit+0x44>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000472:	2007      	movs	r0, #7
 8000474:	f000 fa50 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a2e      	ldr	r2, [pc, #184]	; (800055c <HAL_UART_MspInit+0xd8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d155      	bne.n	8000552 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a6:	4b2e      	ldr	r3, [pc, #184]	; (8000560 <HAL_UART_MspInit+0xdc>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a2d      	ldr	r2, [pc, #180]	; (8000560 <HAL_UART_MspInit+0xdc>)
 80004ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <HAL_UART_MspInit+0xdc>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b28      	ldr	r3, [pc, #160]	; (8000560 <HAL_UART_MspInit+0xdc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a27      	ldr	r2, [pc, #156]	; (8000560 <HAL_UART_MspInit+0xdc>)
 80004c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b25      	ldr	r3, [pc, #148]	; (8000560 <HAL_UART_MspInit+0xdc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004d6:	2330      	movs	r3, #48	; 0x30
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004e6:	2307      	movs	r3, #7
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	481c      	ldr	r0, [pc, #112]	; (8000564 <HAL_UART_MspInit+0xe0>)
 80004f2:	f000 fbef 	bl	8000cd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <HAL_UART_MspInit+0xe4>)
 80004f8:	4a1c      	ldr	r2, [pc, #112]	; (800056c <HAL_UART_MspInit+0xe8>)
 80004fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <HAL_UART_MspInit+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <HAL_UART_MspInit+0xe4>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <HAL_UART_MspInit+0xe4>)
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_UART_MspInit+0xe4>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <HAL_UART_MspInit+0xe4>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <HAL_UART_MspInit+0xe4>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <HAL_UART_MspInit+0xe4>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000526:	4810      	ldr	r0, [pc, #64]	; (8000568 <HAL_UART_MspInit+0xe4>)
 8000528:	f000 fa37 	bl	800099a <HAL_DMA_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8000532:	f7ff ff7d 	bl	8000430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <HAL_UART_MspInit+0xe4>)
 800053a:	675a      	str	r2, [r3, #116]	; 0x74
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_UART_MspInit+0xe4>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	2025      	movs	r0, #37	; 0x25
 8000548:	f000 f9f1 	bl	800092e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800054c:	2025      	movs	r0, #37	; 0x25
 800054e:	f000 fa0a 	bl	8000966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	; 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40013800 	.word	0x40013800
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800
 8000568:	200000b0 	.word	0x200000b0
 800056c:	40020058 	.word	0x40020058

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f898 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <DMA1_Channel5_IRQHandler+0x10>)
 80005ca:	f000 faa4 	bl	8000b16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000b0 	.word	0x200000b0

080005d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <USART1_IRQHandler+0x10>)
 80005de:	f002 f9db 	bl	8002998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028

080005ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SystemInit+0x20>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <SystemInit+0x20>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000648 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000614:	f7ff ffea 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <LoopForever+0x6>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LoopForever+0xe>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	; (800065c <LoopForever+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063e:	f003 fb41 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000642:	f7ff fdd3 	bl	80001ec <main>

08000646 <LoopForever>:

LoopForever:
    b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000648:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000654:	08003d74 	.word	0x08003d74
  ldr r2, =_sbss
 8000658:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800065c:	20000104 	.word	0x20000104

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f94f 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fedc 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f967 	bl	8000982 <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 f92f 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x20>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_IncTick+0x24>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_IncTick+0x24>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000008 	.word	0x20000008
 8000714:	20000100 	.word	0x20000100

08000718 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;  
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <HAL_GetTick+0x14>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000100 	.word	0x20000100

08000730 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000738:	f7ff ffee 	bl	8000718 <HAL_GetTick>
 800073c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000748:	d005      	beq.n	8000756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_Delay+0x44>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000756:	bf00      	nop
 8000758:	f7ff ffde 	bl	8000718 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d8f7      	bhi.n	8000758 <HAL_Delay+0x28>
  {
  }
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	60d3      	str	r3, [r2, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4907      	ldr	r1, [pc, #28]	; (8000814 <__NVIC_EnableIRQ+0x38>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff8e 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff29 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff3e 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ff8e 	bl	800086c <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff5d 	bl	8000818 <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff31 	bl	80007dc <__NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffa2 	bl	80008d4 <SysTick_Config>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e037      	b.n	8000a20 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2202      	movs	r2, #2
 80009b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f92a 	bl	8000c5c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2201      	movs	r2, #1
 8000a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
}  
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d008      	beq.n	8000a4c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e020      	b.n	8000a8e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f022 020e 	bic.w	r2, r2, #14
 8000a5a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 0201 	bic.w	r2, r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a74:	2101      	movs	r1, #1
 8000a76:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d005      	beq.n	8000abc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e027      	b.n	8000b0c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 020e 	bic.w	r2, r2, #14
 8000aca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0201 	bic.w	r2, r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aea:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2201      	movs	r2, #1
 8000af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	4798      	blx	r3
    } 
  }
  return status;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	2204      	movs	r2, #4
 8000b34:	409a      	lsls	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d024      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x72>
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d01f      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0320 	and.w	r3, r3, #32
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d107      	bne.n	8000b66 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0204 	bic.w	r2, r2, #4
 8000b64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6e:	2104      	movs	r1, #4
 8000b70:	fa01 f202 	lsl.w	r2, r1, r2
 8000b74:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d06a      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b86:	e065      	b.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d02c      	beq.n	8000bf2 <HAL_DMA_IRQHandler+0xdc>
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d027      	beq.n	8000bf2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0320 	and.w	r3, r3, #32
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10b      	bne.n	8000bc8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 020a 	bic.w	r2, r2, #10
 8000bbe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d035      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000bf0:	e030      	b.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d028      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d023      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 020e 	bic.w	r2, r2, #14
 8000c1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c24:	2101      	movs	r1, #1
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d004      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	4798      	blx	r3
    }
  }
}  
 8000c52:	e7ff      	b.n	8000c54 <HAL_DMA_IRQHandler+0x13e>
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <DMA_CalcBaseAndBitshift+0x60>)
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d80f      	bhi.n	8000c90 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	009a      	lsls	r2, r3, #2
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <DMA_CalcBaseAndBitshift+0x6c>)
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000c8e:	e00e      	b.n	8000cae <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <DMA_CalcBaseAndBitshift+0x70>)
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	009a      	lsls	r2, r3, #2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <DMA_CalcBaseAndBitshift+0x74>)
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40020407 	.word	0x40020407
 8000cc0:	bffdfff8 	.word	0xbffdfff8
 8000cc4:	cccccccd 	.word	0xcccccccd
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	bffdfbf8 	.word	0xbffdfbf8
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e154      	b.n	8000f8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8146 	beq.w	8000f88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80a0 	beq.w	8000f88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e48:	4b58      	ldr	r3, [pc, #352]	; (8000fac <HAL_GPIO_Init+0x2d8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a57      	ldr	r2, [pc, #348]	; (8000fac <HAL_GPIO_Init+0x2d8>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b55      	ldr	r3, [pc, #340]	; (8000fac <HAL_GPIO_Init+0x2d8>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e60:	4a53      	ldr	r2, [pc, #332]	; (8000fb0 <HAL_GPIO_Init+0x2dc>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1e8>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1e4>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a47      	ldr	r2, [pc, #284]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1e0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1dc>
 8000eac:	2304      	movs	r3, #4
 8000eae:	e008      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed2:	4937      	ldr	r1, [pc, #220]	; (8000fb0 <HAL_GPIO_Init+0x2dc>)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f04:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f2e:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f58:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f47f aea3 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	48001000 	.word	0x48001000
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4013      	ands	r3, r2
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43d9      	mvns	r1, r3
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	400b      	ands	r3, r1
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001032:	af00      	add	r7, sp, #0
 8001034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001038:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800103c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800103e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f001 b823 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 817d 	beq.w	8001362 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001068:	4bbc      	ldr	r3, [pc, #752]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b04      	cmp	r3, #4
 8001072:	d00c      	beq.n	800108e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001074:	4bb9      	ldr	r3, [pc, #740]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b08      	cmp	r3, #8
 800107e:	d15c      	bne.n	800113a <HAL_RCC_OscConfig+0x10e>
 8001080:	4bb6      	ldr	r3, [pc, #728]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108c:	d155      	bne.n	800113a <HAL_RCC_OscConfig+0x10e>
 800108e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001092:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d102      	bne.n	80010c0 <HAL_RCC_OscConfig+0x94>
 80010ba:	4ba8      	ldr	r3, [pc, #672]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	e015      	b.n	80010ec <HAL_RCC_OscConfig+0xc0>
 80010c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010e8:	4b9c      	ldr	r3, [pc, #624]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010f8:	fa92 f2a2 	rbit	r2, r2
 80010fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001100:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001104:	fab2 f282 	clz	r2, r2
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f002 021f 	and.w	r2, r2, #31
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 811f 	beq.w	8001360 <HAL_RCC_OscConfig+0x334>
 8001122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 8116 	bne.w	8001360 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	f000 bfaf 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x12e>
 800114c:	4b83      	ldr	r3, [pc, #524]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a82      	ldr	r2, [pc, #520]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e036      	b.n	80011c8 <HAL_RCC_OscConfig+0x19c>
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x158>
 800116a:	4b7c      	ldr	r3, [pc, #496]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a7b      	ldr	r2, [pc, #492]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a78      	ldr	r2, [pc, #480]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800117c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e021      	b.n	80011c8 <HAL_RCC_OscConfig+0x19c>
 8001184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x184>
 8001196:	4b71      	ldr	r3, [pc, #452]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a70      	ldr	r2, [pc, #448]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6d      	ldr	r2, [pc, #436]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0x19c>
 80011b0:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a69      	ldr	r2, [pc, #420]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a66      	ldr	r2, [pc, #408]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c8:	4b64      	ldr	r3, [pc, #400]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	f023 020f 	bic.w	r2, r3, #15
 80011d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	495f      	ldr	r1, [pc, #380]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d059      	beq.n	80012a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fa91 	bl	8000718 <HAL_GetTick>
 80011f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fa8c 	bl	8000718 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b64      	cmp	r3, #100	; 0x64
 800120a:	d902      	bls.n	8001212 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	f000 bf43 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
 8001212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001216:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	095b      	lsrs	r3, r3, #5
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d102      	bne.n	8001244 <HAL_RCC_OscConfig+0x218>
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	e015      	b.n	8001270 <HAL_RCC_OscConfig+0x244>
 8001244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001248:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800125c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001260:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x330>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001274:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001278:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001284:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001288:	fab2 f282 	clz	r2, r2
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f002 021f 	and.w	r2, r2, #31
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0ab      	beq.n	80011fc <HAL_RCC_OscConfig+0x1d0>
 80012a4:	e05d      	b.n	8001362 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fa37 	bl	8000718 <HAL_GetTick>
 80012aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fa32 	bl	8000718 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b64      	cmp	r3, #100	; 0x64
 80012be:	d902      	bls.n	80012c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	f000 bee9 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
 80012c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80012da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d102      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2cc>
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_RCC_OscConfig+0x330>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	e015      	b.n	8001324 <HAL_RCC_OscConfig+0x2f8>
 80012f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800130c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001310:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001314:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_RCC_OscConfig+0x330>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001328:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800132c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001330:	fa92 f2a2 	rbit	r2, r2
 8001334:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001338:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800133c:	fab2 f282 	clz	r2, r2
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	f042 0220 	orr.w	r2, r2, #32
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	f002 021f 	and.w	r2, r2, #31
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ab      	bne.n	80012b0 <HAL_RCC_OscConfig+0x284>
 8001358:	e003      	b.n	8001362 <HAL_RCC_OscConfig+0x336>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 817d 	beq.w	8001672 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001378:	4ba6      	ldr	r3, [pc, #664]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00b      	beq.n	800139c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001384:	4ba3      	ldr	r3, [pc, #652]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d172      	bne.n	8001476 <HAL_RCC_OscConfig+0x44a>
 8001390:	4ba0      	ldr	r3, [pc, #640]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d16c      	bne.n	8001476 <HAL_RCC_OscConfig+0x44a>
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80013ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d102      	bne.n	80013cc <HAL_RCC_OscConfig+0x3a0>
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	e013      	b.n	80013f4 <HAL_RCC_OscConfig+0x3c8>
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013f0:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2202      	movs	r2, #2
 80013f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80013fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013fe:	fa92 f2a2 	rbit	r2, r2
 8001402:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001406:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	f002 021f 	and.w	r2, r2, #31
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <HAL_RCC_OscConfig+0x410>
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d002      	beq.n	800143c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 be2e 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b75      	ldr	r3, [pc, #468]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	21f8      	movs	r1, #248	; 0xf8
 8001452:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800145a:	fa91 f1a1 	rbit	r1, r1
 800145e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001462:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001466:	fab1 f181 	clz	r1, r1
 800146a:	b2c9      	uxtb	r1, r1
 800146c:	408b      	lsls	r3, r1
 800146e:	4969      	ldr	r1, [pc, #420]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001474:	e0fd      	b.n	8001672 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8088 	beq.w	8001598 <HAL_RCC_OscConfig+0x56c>
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800149a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	461a      	mov	r2, r3
 80014b0:	2301      	movs	r3, #1
 80014b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff f930 	bl	8000718 <HAL_GetTick>
 80014b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff f92b 	bl	8000718 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d902      	bls.n	80014d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f000 bde2 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80014e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x4d8>
 80014fe:	4b45      	ldr	r3, [pc, #276]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	e013      	b.n	800152c <HAL_RCC_OscConfig+0x500>
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800151c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001528:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2202      	movs	r2, #2
 800152e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001532:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001536:	fa92 f2a2 	rbit	r2, r2
 800153a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800153e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0af      	beq.n	80014be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	21f8      	movs	r1, #248	; 0xf8
 8001574:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800157c:	fa91 f1a1 	rbit	r1, r1
 8001580:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001584:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001588:	fab1 f181 	clz	r1, r1
 800158c:	b2c9      	uxtb	r1, r1
 800158e:	408b      	lsls	r3, r1
 8001590:	4920      	ldr	r1, [pc, #128]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
 8001596:	e06c      	b.n	8001672 <HAL_RCC_OscConfig+0x646>
 8001598:	2301      	movs	r3, #1
 800159a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80015aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	2300      	movs	r3, #0
 80015c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff f8a8 	bl	8000718 <HAL_GetTick>
 80015c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff f8a3 	bl	8000718 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d902      	bls.n	80015e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	f000 bd5a 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80015f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d104      	bne.n	8001618 <HAL_RCC_OscConfig+0x5ec>
 800160e:	4b01      	ldr	r3, [pc, #4]	; (8001614 <HAL_RCC_OscConfig+0x5e8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	e015      	b.n	8001640 <HAL_RCC_OscConfig+0x614>
 8001614:	40021000 	.word	0x40021000
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001630:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800163c:	4bc8      	ldr	r3, [pc, #800]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	2202      	movs	r2, #2
 8001642:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001646:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800164a:	fa92 f2a2 	rbit	r2, r2
 800164e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001652:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	f042 0220 	orr.w	r2, r2, #32
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f002 021f 	and.w	r2, r2, #31
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ad      	bne.n	80015ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8110 	beq.w	80018a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d079      	beq.n	800178c <HAL_RCC_OscConfig+0x760>
 8001698:	2301      	movs	r3, #1
 800169a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80016aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	4bab      	ldr	r3, [pc, #684]	; (8001964 <HAL_RCC_OscConfig+0x938>)
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	461a      	mov	r2, r3
 80016be:	2301      	movs	r3, #1
 80016c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff f829 	bl	8000718 <HAL_GetTick>
 80016c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff f824 	bl	8000718 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d902      	bls.n	80016e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	f000 bcdb 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016fc:	2202      	movs	r2, #2
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fa93 f2a3 	rbit	r2, r3
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001720:	2202      	movs	r2, #2
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800173a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173c:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 800173e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001748:	2102      	movs	r1, #2
 800174a:	6019      	str	r1, [r3, #0]
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f1a3 	rbit	r1, r3
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001762:	6019      	str	r1, [r3, #0]
  return result;
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001778:	b2db      	uxtb	r3, r3
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0a0      	beq.n	80016cc <HAL_RCC_OscConfig+0x6a0>
 800178a:	e08d      	b.n	80018a8 <HAL_RCC_OscConfig+0x87c>
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017ae:	601a      	str	r2, [r3, #0]
  return result;
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x938>)
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	461a      	mov	r2, r3
 80017ca:	2300      	movs	r3, #0
 80017cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7fe ffa3 	bl	8000718 <HAL_GetTick>
 80017d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7fe ff9e 	bl	8000718 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d902      	bls.n	80017ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f000 bc55 	b.w	8002098 <HAL_RCC_OscConfig+0x106c>
 80017ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800183e:	2202      	movs	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f2a3 	rbit	r2, r3
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001858:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 800185c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001866:	2102      	movs	r1, #2
 8001868:	6019      	str	r1, [r3, #0]
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f1a3 	rbit	r1, r3
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001880:	6019      	str	r1, [r3, #0]
  return result;
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d197      	bne.n	80017d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 81a1 	beq.w	8001c00 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 80018d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018da:	61d3      	str	r3, [r2, #28]
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_RCC_OscConfig+0x93c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d11a      	bne.n	8001940 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_RCC_OscConfig+0x93c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_RCC_OscConfig+0x93c>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001916:	f7fe feff 	bl	8000718 <HAL_GetTick>
 800191a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191e:	e009      	b.n	8001934 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001920:	f7fe fefa 	bl	8000718 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e3b1      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x93c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0ef      	beq.n	8001920 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10d      	bne.n	800196c <HAL_RCC_OscConfig+0x940>
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a02      	ldr	r2, [pc, #8]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	e03c      	b.n	80019d8 <HAL_RCC_OscConfig+0x9ac>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	10908120 	.word	0x10908120
 8001968:	40007000 	.word	0x40007000
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x96a>
 800197c:	4bc1      	ldr	r3, [pc, #772]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4ac0      	ldr	r2, [pc, #768]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6213      	str	r3, [r2, #32]
 8001988:	4bbe      	ldr	r3, [pc, #760]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4abd      	ldr	r2, [pc, #756]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 800198e:	f023 0304 	bic.w	r3, r3, #4
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e020      	b.n	80019d8 <HAL_RCC_OscConfig+0x9ac>
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x994>
 80019a6:	4bb7      	ldr	r3, [pc, #732]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4ab6      	ldr	r2, [pc, #728]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	4bb4      	ldr	r3, [pc, #720]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4ab3      	ldr	r2, [pc, #716]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0x9ac>
 80019c0:	4bb0      	ldr	r3, [pc, #704]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4aaf      	ldr	r2, [pc, #700]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4bad      	ldr	r3, [pc, #692]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4aac      	ldr	r2, [pc, #688]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 8081 	beq.w	8001aec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7fe fe95 	bl	8000718 <HAL_GetTick>
 80019ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7fe fe90 	bl	8000718 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e345      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a14:	2202      	movs	r2, #2
 8001a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a38:	2202      	movs	r2, #2
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a52:	601a      	str	r2, [r3, #0]
  return result;
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a5c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0xa4c>
 8001a72:	4b84      	ldr	r3, [pc, #528]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	e013      	b.n	8001aa0 <HAL_RCC_OscConfig+0xa74>
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a80:	2202      	movs	r2, #2
 8001a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	4b79      	ldr	r3, [pc, #484]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	6011      	str	r1, [r2, #0]
 8001aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ab0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	fa92 f1a2 	rbit	r1, r2
 8001aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001abe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ac2:	6011      	str	r1, [r2, #0]
  return result;
 8001ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	fab2 f282 	clz	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f002 021f 	and.w	r2, r2, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d084      	beq.n	80019f4 <HAL_RCC_OscConfig+0x9c8>
 8001aea:	e07f      	b.n	8001bec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7fe fe14 	bl	8000718 <HAL_GetTick>
 8001af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7fe fe0f 	bl	8000718 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e2c4      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b16:	2202      	movs	r2, #2
 8001b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b54:	601a      	str	r2, [r3, #0]
  return result;
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0xb4e>
 8001b74:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	e013      	b.n	8001ba2 <HAL_RCC_OscConfig+0xb76>
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b82:	2202      	movs	r2, #2
 8001b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001baa:	2102      	movs	r1, #2
 8001bac:	6011      	str	r1, [r2, #0]
 8001bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	fa92 f1a2 	rbit	r1, r2
 8001bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bc4:	6011      	str	r1, [r2, #0]
  return result;
 8001bc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	fab2 f282 	clz	r2, r2
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f002 021f 	and.w	r2, r2, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d184      	bne.n	8001af6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8242 	beq.w	8002096 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_RCC_OscConfig+0xc58>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	f000 8213 	beq.w	8002046 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	f040 8162 	bne.w	8001ef6 <HAL_RCC_OscConfig+0xeca>
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c56:	601a      	str	r2, [r3, #0]
  return result;
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7fe fd4e 	bl	8000718 <HAL_GetTick>
 8001c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	e00c      	b.n	8001c9c <HAL_RCC_OscConfig+0xc70>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe fd46 	bl	8000718 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1fd      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001cc0:	601a      	str	r2, [r3, #0]
  return result;
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001cca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xcba>
 8001ce0:	4bb0      	ldr	r3, [pc, #704]	; (8001fa4 <HAL_RCC_OscConfig+0xf78>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	e027      	b.n	8001d36 <HAL_RCC_OscConfig+0xd0a>
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	4b9c      	ldr	r3, [pc, #624]	; (8001fa4 <HAL_RCC_OscConfig+0xf78>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d42:	6011      	str	r1, [r2, #0]
 8001d44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d48:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	fa92 f1a2 	rbit	r1, r2
 8001d52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d56:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d5a:	6011      	str	r1, [r2, #0]
  return result;
 8001d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d60:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f042 0220 	orr.w	r2, r2, #32
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f002 021f 	and.w	r2, r2, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d182      	bne.n	8001c88 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0xf78>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	497f      	ldr	r1, [pc, #508]	; (8001fa4 <HAL_RCC_OscConfig+0xf78>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001db2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dce:	601a      	str	r2, [r3, #0]
  return result;
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dd8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	461a      	mov	r2, r3
 8001dec:	2301      	movs	r3, #1
 8001dee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7fe fc92 	bl	8000718 <HAL_GetTick>
 8001df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe fc8d 	bl	8000718 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e144      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e32:	601a      	str	r2, [r3, #0]
  return result;
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d102      	bne.n	8001e58 <HAL_RCC_OscConfig+0xe2c>
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <HAL_RCC_OscConfig+0xf78>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	e027      	b.n	8001ea8 <HAL_RCC_OscConfig+0xe7c>
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_RCC_OscConfig+0xf78>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001eb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	fa92 f1a2 	rbit	r1, r2
 8001ec4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ecc:	6011      	str	r1, [r2, #0]
  return result;
 8001ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d082      	beq.n	8001dfa <HAL_RCC_OscConfig+0xdce>
 8001ef4:	e0cf      	b.n	8002096 <HAL_RCC_OscConfig+0x106a>
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f1a:	601a      	str	r2, [r3, #0]
  return result;
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	461a      	mov	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fbec 	bl	8000718 <HAL_GetTick>
 8001f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe fbe7 	bl	8000718 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e09e      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f7e:	601a      	str	r2, [r3, #0]
  return result;
 8001f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f84:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d104      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xf7c>
 8001f9e:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <HAL_RCC_OscConfig+0xf78>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	e029      	b.n	8001ff8 <HAL_RCC_OscConfig+0xfcc>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fa93 f2a3 	rbit	r2, r3
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x1078>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ffc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002000:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002004:	6011      	str	r1, [r2, #0]
 8002006:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800200a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	fa92 f1a2 	rbit	r1, r2
 8002014:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002018:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800201c:	6011      	str	r1, [r2, #0]
  return result;
 800201e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002022:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f042 0220 	orr.w	r2, r2, #32
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f002 021f 	and.w	r2, r2, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d180      	bne.n	8001f46 <HAL_RCC_OscConfig+0xf1a>
 8002044:	e027      	b.n	8002096 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e01e      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_RCC_OscConfig+0x1078>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002062:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002066:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	429a      	cmp	r2, r3
 8002078:	d10b      	bne.n	8002092 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800207a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800207e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09e      	sub	sp, #120	; 0x78
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e162      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b90      	ldr	r3, [pc, #576]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d910      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b8d      	ldr	r3, [pc, #564]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	498b      	ldr	r1, [pc, #556]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b89      	ldr	r3, [pc, #548]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e14a      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b82      	ldr	r3, [pc, #520]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	497f      	ldr	r1, [pc, #508]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80dc 	beq.w	80022d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d13c      	bne.n	800219e <HAL_RCC_ClockConfig+0xf6>
 8002124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002128:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_RCC_ClockConfig+0xa6>
 8002148:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e00f      	b.n	800216e <HAL_RCC_ClockConfig+0xc6>
 800214e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002152:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	667b      	str	r3, [r7, #100]	; 0x64
 800215c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002172:	65ba      	str	r2, [r7, #88]	; 0x58
 8002174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002176:	fa92 f2a2 	rbit	r2, r2
 800217a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800217c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f042 0220 	orr.w	r2, r2, #32
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	f002 021f 	and.w	r2, r2, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f202 	lsl.w	r2, r1, r2
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d17b      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0f3      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d13c      	bne.n	8002220 <HAL_RCC_ClockConfig+0x178>
 80021a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x128>
 80021ca:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e00f      	b.n	80021f0 <HAL_RCC_ClockConfig+0x148>
 80021d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
 80021de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
 80021e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80021f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f042 0220 	orr.w	r2, r2, #32
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d13a      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b2      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
 8002220:	2302      	movs	r3, #2
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_RCC_ClockConfig+0x1a0>
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e00d      	b.n	8002264 <HAL_RCC_ClockConfig+0x1bc>
 8002248:	2302      	movs	r3, #2
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
 8002254:	2302      	movs	r3, #2
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2202      	movs	r2, #2
 8002266:	61ba      	str	r2, [r7, #24]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	fa92 f2a2 	rbit	r2, r2
 800226e:	617a      	str	r2, [r7, #20]
  return result;
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	fab2 f282 	clz	r2, r2
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f042 0220 	orr.w	r2, r2, #32
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f002 021f 	and.w	r2, r2, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e079      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	491a      	ldr	r1, [pc, #104]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fa38 	bl	8000718 <HAL_GetTick>
 80022a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fa34 	bl	8000718 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e061      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d214      	bcs.n	800230c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4906      	ldr	r1, [pc, #24]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_ClockConfig+0x25c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e040      	b.n	8002386 <HAL_RCC_ClockConfig+0x2de>
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	491a      	ldr	r1, [pc, #104]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4912      	ldr	r1, [pc, #72]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800234a:	f000 f829 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCC_ClockConfig+0x2e8>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	22f0      	movs	r2, #240	; 0xf0
 800235a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	fa92 f2a2 	rbit	r2, r2
 8002362:	60fa      	str	r2, [r7, #12]
  return result;
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	40d3      	lsrs	r3, r2
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x2ec>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	fa21 f303 	lsr.w	r3, r1, r3
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_ClockConfig+0x2f0>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_RCC_ClockConfig+0x2f4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f986 	bl	8000690 <HAL_InitTick>
  
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3778      	adds	r7, #120	; 0x78
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	08003d34 	.word	0x08003d34
 8002398:	20000000 	.word	0x20000000
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	; 0x2c
 80023a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d002      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ce:	e03c      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023d2:	623b      	str	r3, [r7, #32]
      break;
 80023d4:	e03c      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	fa92 f2a2 	rbit	r2, r2
 80023e8:	607a      	str	r2, [r7, #4]
  return result;
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	40d3      	lsrs	r3, r2
 80023f4:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	220f      	movs	r2, #15
 8002404:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	60fa      	str	r2, [r7, #12]
  return result;
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	fab2 f282 	clz	r2, r2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	40d3      	lsrs	r3, r2
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <HAL_RCC_GetSysClockFreq+0xcc>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc4>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e004      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <HAL_RCC_GetSysClockFreq+0xd0>)
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	623b      	str	r3, [r7, #32]
      break;
 8002448:	e002      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetSysClockFreq+0xc4>)
 800244c:	623b      	str	r3, [r7, #32]
      break;
 800244e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002450:	6a3b      	ldr	r3, [r7, #32]
}
 8002452:	4618      	mov	r0, r3
 8002454:	372c      	adds	r7, #44	; 0x2c
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	007a1200 	.word	0x007a1200
 8002468:	08003d4c 	.word	0x08003d4c
 800246c:	08003d5c 	.word	0x08003d5c
 8002470:	003d0900 	.word	0x003d0900

08002474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_GetHCLKFreq+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002492:	f7ff ffef 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8002496:	4601      	mov	r1, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	603a      	str	r2, [r7, #0]
  return result;
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	08003d44 	.word	0x08003d44

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024d6:	f7ff ffcd 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 80024da:	4601      	mov	r1, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	fa92 f2a2 	rbit	r2, r2
 80024f0:	603a      	str	r2, [r7, #0]
  return result;
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	40d3      	lsrs	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08003d44 	.word	0x08003d44

08002514 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b092      	sub	sp, #72	; 0x48
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80d4 	beq.w	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10e      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	61d3      	str	r3, [r2, #28]
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b45      	ldr	r3, [pc, #276]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a41      	ldr	r2, [pc, #260]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe f8cd 	bl	8000718 <HAL_GetTick>
 800257e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe f8c9 	bl	8000718 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	; 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e169      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8084 	beq.w	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025bc:	429a      	cmp	r2, r3
 80025be:	d07c      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	461a      	mov	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04b      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe f879 	bl	8000718 <HAL_GetTick>
 8002626:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe f875 	bl	8000718 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e113      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002640:	2302      	movs	r3, #2
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	61fb      	str	r3, [r7, #28]
  return result;
 8002658:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d108      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800266e:	4b01      	ldr	r3, [pc, #4]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	e00d      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002674:	40021000 	.word	0x40021000
 8002678:	40007000 	.word	0x40007000
 800267c:	10908100 	.word	0x10908100
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2202      	movs	r2, #2
 8002692:	613a      	str	r2, [r7, #16]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	60fa      	str	r2, [r7, #12]
  return result;
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0b7      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026ba:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	496a      	ldr	r1, [pc, #424]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ec:	4b60      	ldr	r3, [pc, #384]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f023 0203 	bic.w	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	495d      	ldr	r1, [pc, #372]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800270a:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4956      	ldr	r1, [pc, #344]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002728:	4b51      	ldr	r3, [pc, #324]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	494e      	ldr	r1, [pc, #312]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002736:	4313      	orrs	r3, r2
 8002738:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f023 0210 	bic.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4947      	ldr	r1, [pc, #284]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002754:	4313      	orrs	r3, r2
 8002756:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002764:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	493f      	ldr	r1, [pc, #252]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002782:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f023 0220 	bic.w	r2, r3, #32
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4938      	ldr	r1, [pc, #224]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a0:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	4930      	ldr	r1, [pc, #192]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4929      	ldr	r1, [pc, #164]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4921      	ldr	r1, [pc, #132]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	491a      	ldr	r1, [pc, #104]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	4912      	ldr	r1, [pc, #72]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002826:	4313      	orrs	r3, r2
 8002828:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	490b      	ldr	r1, [pc, #44]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002844:	4313      	orrs	r3, r2
 8002846:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	4903      	ldr	r1, [pc, #12]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3748      	adds	r7, #72	; 0x48
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e040      	b.n	8002908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fd fdf4 	bl	8000484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	; 0x24
 80028a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fb76 	bl	8002fa4 <UART_SetConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e022      	b.n	8002908 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fd3e 	bl	800334c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fdc5 	bl	8003490 <UART_CheckIdleState>
 8002906:	4603      	mov	r3, r0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002924:	2b20      	cmp	r3, #32
 8002926:	d132      	bne.n	800298e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_UART_Receive_IT+0x24>
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e02b      	b.n	8002990 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d018      	beq.n	800297e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	613b      	str	r3, [r7, #16]
   return(result);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	69f9      	ldr	r1, [r7, #28]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	61bb      	str	r3, [r7, #24]
   return(result);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e6      	bne.n	800294c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	461a      	mov	r2, r3
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fe93 	bl	80036b0 <UART_Start_Receive_IT>
 800298a:	4603      	mov	r3, r0
 800298c:	e000      	b.n	8002990 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0ba      	sub	sp, #232	; 0xe8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80029c6:	4013      	ands	r3, r2
 80029c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d115      	bne.n	8002a00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00f      	beq.n	8002a00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 82ab 	beq.w	8002f4c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
      }
      return;
 80029fe:	e2a5      	b.n	8002f4c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8117 	beq.w	8002c38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a1a:	4b85      	ldr	r3, [pc, #532]	; (8002c30 <HAL_UART_IRQHandler+0x298>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 810a 	beq.w	8002c38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0xbc>
 8002a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d011      	beq.n	8002a84 <HAL_UART_IRQHandler+0xec>
 8002a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2202      	movs	r2, #2
 8002a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7a:	f043 0204 	orr.w	r2, r3, #4
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d011      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x11c>
 8002a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d017      	beq.n	8002af0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d012      	beq.n	8002b22 <HAL_UART_IRQHandler+0x18a>
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8211 	beq.w	8002f50 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d005      	beq.n	8002b7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04f      	beq.n	8002c1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fe4c 	bl	8003818 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d141      	bne.n	8002c12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3308      	adds	r3, #8
 8002b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1d9      	bne.n	8002b8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d013      	beq.n	8002c0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <HAL_UART_IRQHandler+0x29c>)
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd ff53 	bl	8000a9a <HAL_DMA_Abort_IT>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d017      	beq.n	8002c2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c04:	4610      	mov	r0, r2
 8002c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	e00f      	b.n	8002c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9b4 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	e00b      	b.n	8002c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9b0 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c18:	e007      	b.n	8002c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9ac 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c28:	e192      	b.n	8002f50 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2a:	bf00      	nop
    return;
 8002c2c:	e190      	b.n	8002f50 <HAL_UART_IRQHandler+0x5b8>
 8002c2e:	bf00      	nop
 8002c30:	04000120 	.word	0x04000120
 8002c34:	080038e1 	.word	0x080038e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 814b 	bne.w	8002ed8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8144 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 813d 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	f040 80b5 	bne.w	8002de0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8164 	beq.w	8002f54 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c96:	429a      	cmp	r2, r3
 8002c98:	f080 815c 	bcs.w	8002f54 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	f000 8086 	beq.w	8002dbe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ce8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1da      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3308      	adds	r3, #8
 8002d02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e1      	bne.n	8002cfc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3308      	adds	r3, #8
 8002d58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e3      	bne.n	8002d38 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8e:	f023 0310 	bic.w	r3, r3, #16
 8002d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002da2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002da8:	e841 2300 	strex	r3, r2, [r1]
 8002dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e4      	bne.n	8002d7e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fe35 	bl	8000a28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f8d7 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dde:	e0b9      	b.n	8002f54 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80ab 	beq.w	8002f58 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80a6 	beq.w	8002f58 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e4      	bne.n	8002e0c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3308      	adds	r3, #8
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	623b      	str	r3, [r7, #32]
   return(result);
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3308      	adds	r3, #8
 8002e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e66:	633a      	str	r2, [r7, #48]	; 0x30
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e3      	bne.n	8002e42 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	69b9      	ldr	r1, [r7, #24]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e4      	bne.n	8002e8e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f85b 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ed6:	e03f      	b.n	8002f58 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <HAL_UART_IRQHandler+0x56a>
 8002ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fed8 	bl	8003cb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f00:	e02d      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00e      	beq.n	8002f2c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01c      	beq.n	8002f5c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
    }
    return;
 8002f2a:	e017      	b.n	8002f5c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fce1 	bl	800390c <UART_EndTransmit_IT>
    return;
 8002f4a:	e008      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f4c:	bf00      	nop
 8002f4e:	e006      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f50:	bf00      	nop
 8002f52:	e004      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f54:	bf00      	nop
 8002f56:	e002      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f5c:	bf00      	nop
  }

}
 8002f5e:	37e8      	adds	r7, #232	; 0xe8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fd2:	f023 030c 	bic.w	r3, r3, #12
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4aa7      	ldr	r2, [pc, #668]	; (80032bc <UART_SetConfig+0x318>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d120      	bne.n	8003066 <UART_SetConfig+0xc2>
 8003024:	4ba6      	ldr	r3, [pc, #664]	; (80032c0 <UART_SetConfig+0x31c>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d817      	bhi.n	8003060 <UART_SetConfig+0xbc>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <UART_SetConfig+0x94>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	08003049 	.word	0x08003049
 800303c:	08003055 	.word	0x08003055
 8003040:	0800305b 	.word	0x0800305b
 8003044:	0800304f 	.word	0x0800304f
 8003048:	2301      	movs	r3, #1
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e0b5      	b.n	80031ba <UART_SetConfig+0x216>
 800304e:	2302      	movs	r3, #2
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e0b2      	b.n	80031ba <UART_SetConfig+0x216>
 8003054:	2304      	movs	r3, #4
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e0af      	b.n	80031ba <UART_SetConfig+0x216>
 800305a:	2308      	movs	r3, #8
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e0ac      	b.n	80031ba <UART_SetConfig+0x216>
 8003060:	2310      	movs	r3, #16
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e0a9      	b.n	80031ba <UART_SetConfig+0x216>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a96      	ldr	r2, [pc, #600]	; (80032c4 <UART_SetConfig+0x320>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d124      	bne.n	80030ba <UART_SetConfig+0x116>
 8003070:	4b93      	ldr	r3, [pc, #588]	; (80032c0 <UART_SetConfig+0x31c>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800307c:	d011      	beq.n	80030a2 <UART_SetConfig+0xfe>
 800307e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003082:	d817      	bhi.n	80030b4 <UART_SetConfig+0x110>
 8003084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003088:	d011      	beq.n	80030ae <UART_SetConfig+0x10a>
 800308a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800308e:	d811      	bhi.n	80030b4 <UART_SetConfig+0x110>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <UART_SetConfig+0xf8>
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d006      	beq.n	80030a8 <UART_SetConfig+0x104>
 800309a:	e00b      	b.n	80030b4 <UART_SetConfig+0x110>
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e08b      	b.n	80031ba <UART_SetConfig+0x216>
 80030a2:	2302      	movs	r3, #2
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e088      	b.n	80031ba <UART_SetConfig+0x216>
 80030a8:	2304      	movs	r3, #4
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e085      	b.n	80031ba <UART_SetConfig+0x216>
 80030ae:	2308      	movs	r3, #8
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e082      	b.n	80031ba <UART_SetConfig+0x216>
 80030b4:	2310      	movs	r3, #16
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e07f      	b.n	80031ba <UART_SetConfig+0x216>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a82      	ldr	r2, [pc, #520]	; (80032c8 <UART_SetConfig+0x324>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d124      	bne.n	800310e <UART_SetConfig+0x16a>
 80030c4:	4b7e      	ldr	r3, [pc, #504]	; (80032c0 <UART_SetConfig+0x31c>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80030cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030d0:	d011      	beq.n	80030f6 <UART_SetConfig+0x152>
 80030d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030d6:	d817      	bhi.n	8003108 <UART_SetConfig+0x164>
 80030d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030dc:	d011      	beq.n	8003102 <UART_SetConfig+0x15e>
 80030de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030e2:	d811      	bhi.n	8003108 <UART_SetConfig+0x164>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <UART_SetConfig+0x14c>
 80030e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ec:	d006      	beq.n	80030fc <UART_SetConfig+0x158>
 80030ee:	e00b      	b.n	8003108 <UART_SetConfig+0x164>
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e061      	b.n	80031ba <UART_SetConfig+0x216>
 80030f6:	2302      	movs	r3, #2
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e05e      	b.n	80031ba <UART_SetConfig+0x216>
 80030fc:	2304      	movs	r3, #4
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e05b      	b.n	80031ba <UART_SetConfig+0x216>
 8003102:	2308      	movs	r3, #8
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e058      	b.n	80031ba <UART_SetConfig+0x216>
 8003108:	2310      	movs	r3, #16
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e055      	b.n	80031ba <UART_SetConfig+0x216>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <UART_SetConfig+0x328>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d124      	bne.n	8003162 <UART_SetConfig+0x1be>
 8003118:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <UART_SetConfig+0x31c>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003124:	d011      	beq.n	800314a <UART_SetConfig+0x1a6>
 8003126:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800312a:	d817      	bhi.n	800315c <UART_SetConfig+0x1b8>
 800312c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003130:	d011      	beq.n	8003156 <UART_SetConfig+0x1b2>
 8003132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003136:	d811      	bhi.n	800315c <UART_SetConfig+0x1b8>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <UART_SetConfig+0x1a0>
 800313c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003140:	d006      	beq.n	8003150 <UART_SetConfig+0x1ac>
 8003142:	e00b      	b.n	800315c <UART_SetConfig+0x1b8>
 8003144:	2300      	movs	r3, #0
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e037      	b.n	80031ba <UART_SetConfig+0x216>
 800314a:	2302      	movs	r3, #2
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e034      	b.n	80031ba <UART_SetConfig+0x216>
 8003150:	2304      	movs	r3, #4
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e031      	b.n	80031ba <UART_SetConfig+0x216>
 8003156:	2308      	movs	r3, #8
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e02e      	b.n	80031ba <UART_SetConfig+0x216>
 800315c:	2310      	movs	r3, #16
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e02b      	b.n	80031ba <UART_SetConfig+0x216>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5a      	ldr	r2, [pc, #360]	; (80032d0 <UART_SetConfig+0x32c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d124      	bne.n	80031b6 <UART_SetConfig+0x212>
 800316c:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <UART_SetConfig+0x31c>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003174:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003178:	d011      	beq.n	800319e <UART_SetConfig+0x1fa>
 800317a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800317e:	d817      	bhi.n	80031b0 <UART_SetConfig+0x20c>
 8003180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003184:	d011      	beq.n	80031aa <UART_SetConfig+0x206>
 8003186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318a:	d811      	bhi.n	80031b0 <UART_SetConfig+0x20c>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <UART_SetConfig+0x1f4>
 8003190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003194:	d006      	beq.n	80031a4 <UART_SetConfig+0x200>
 8003196:	e00b      	b.n	80031b0 <UART_SetConfig+0x20c>
 8003198:	2300      	movs	r3, #0
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e00d      	b.n	80031ba <UART_SetConfig+0x216>
 800319e:	2302      	movs	r3, #2
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e00a      	b.n	80031ba <UART_SetConfig+0x216>
 80031a4:	2304      	movs	r3, #4
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e007      	b.n	80031ba <UART_SetConfig+0x216>
 80031aa:	2308      	movs	r3, #8
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e004      	b.n	80031ba <UART_SetConfig+0x216>
 80031b0:	2310      	movs	r3, #16
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e001      	b.n	80031ba <UART_SetConfig+0x216>
 80031b6:	2310      	movs	r3, #16
 80031b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d15b      	bne.n	800327c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d827      	bhi.n	800321a <UART_SetConfig+0x276>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x22c>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	080031fd 	.word	0x080031fd
 80031d8:	08003205 	.word	0x08003205
 80031dc:	0800321b 	.word	0x0800321b
 80031e0:	0800320b 	.word	0x0800320b
 80031e4:	0800321b 	.word	0x0800321b
 80031e8:	0800321b 	.word	0x0800321b
 80031ec:	0800321b 	.word	0x0800321b
 80031f0:	08003213 	.word	0x08003213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7ff f94a 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 80031f8:	61b8      	str	r0, [r7, #24]
        break;
 80031fa:	e013      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031fc:	f7ff f968 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8003200:	61b8      	str	r0, [r7, #24]
        break;
 8003202:	e00f      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <UART_SetConfig+0x330>)
 8003206:	61bb      	str	r3, [r7, #24]
        break;
 8003208:	e00c      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800320a:	f7ff f8c9 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800320e:	61b8      	str	r0, [r7, #24]
        break;
 8003210:	e008      	b.n	8003224 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003216:	61bb      	str	r3, [r7, #24]
        break;
 8003218:	e004      	b.n	8003224 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	77bb      	strb	r3, [r7, #30]
        break;
 8003222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8082 	beq.w	8003330 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	005a      	lsls	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b0f      	cmp	r3, #15
 8003246:	d916      	bls.n	8003276 <UART_SetConfig+0x2d2>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d212      	bcs.n	8003276 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f023 030f 	bic.w	r3, r3, #15
 8003258:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	b29b      	uxth	r3, r3
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	b29a      	uxth	r2, r3
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	4313      	orrs	r3, r2
 800326a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	89fa      	ldrh	r2, [r7, #14]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	e05c      	b.n	8003330 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	77bb      	strb	r3, [r7, #30]
 800327a:	e059      	b.n	8003330 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d835      	bhi.n	80032ee <UART_SetConfig+0x34a>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x2e4>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032d9 	.word	0x080032d9
 8003294:	080032ef 	.word	0x080032ef
 8003298:	080032df 	.word	0x080032df
 800329c:	080032ef 	.word	0x080032ef
 80032a0:	080032ef 	.word	0x080032ef
 80032a4:	080032ef 	.word	0x080032ef
 80032a8:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7ff f8ee 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 80032b0:	61b8      	str	r0, [r7, #24]
        break;
 80032b2:	e021      	b.n	80032f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b4:	f7ff f90c 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 80032b8:	61b8      	str	r0, [r7, #24]
        break;
 80032ba:	e01d      	b.n	80032f8 <UART_SetConfig+0x354>
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40004800 	.word	0x40004800
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	40005000 	.word	0x40005000
 80032d4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <UART_SetConfig+0x3a4>)
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e00c      	b.n	80032f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7ff f85f 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 80032e2:	61b8      	str	r0, [r7, #24]
        break;
 80032e4:	e008      	b.n	80032f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e004      	b.n	80032f8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77bb      	strb	r3, [r7, #30]
        break;
 80032f6:	bf00      	nop
    }

    if (pclk != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085a      	lsrs	r2, r3, #1
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d909      	bls.n	800332c <UART_SetConfig+0x388>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331e:	d205      	bcs.n	800332c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e001      	b.n	8003330 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800333c:	7fbb      	ldrb	r3, [r7, #30]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	007a1200 	.word	0x007a1200

0800334c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01a      	beq.n	8003462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344a:	d10a      	bne.n	8003462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b098      	sub	sp, #96	; 0x60
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a0:	f7fd f93a 	bl	8000718 <HAL_GetTick>
 80034a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d12e      	bne.n	8003512 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	2200      	movs	r2, #0
 80034be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f88c 	bl	80035e0 <UART_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d021      	beq.n	8003512 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e6      	bne.n	80034ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e062      	b.n	80035d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d149      	bne.n	80035b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f856 	bl	80035e0 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03c      	beq.n	80035b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	623b      	str	r3, [r7, #32]
   return(result);
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
 800355a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800355e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e6      	bne.n	800353a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3308      	adds	r3, #8
 8003572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	60fb      	str	r3, [r7, #12]
   return(result);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800358c:	61fa      	str	r2, [r7, #28]
 800358e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	617b      	str	r3, [r7, #20]
   return(result);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e5      	bne.n	800356c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e011      	b.n	80035d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3758      	adds	r7, #88	; 0x58
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f0:	e049      	b.n	8003686 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d045      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fd f88d 	bl	8000718 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <UART_WaitOnFlagUntilTimeout+0x30>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e048      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d031      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d110      	bne.n	8003652 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2208      	movs	r2, #8
 8003636:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f8ed 	bl	8003818 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2208      	movs	r2, #8
 8003642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e029      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003660:	d111      	bne.n	8003686 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800366a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f8d3 	bl	8003818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e00f      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d0a6      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b097      	sub	sp, #92	; 0x5c
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	d10e      	bne.n	8003702 <UART_Start_Receive_IT+0x52>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <UART_Start_Receive_IT+0x48>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f6:	e01a      	b.n	800372e <UART_Start_Receive_IT+0x7e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	22ff      	movs	r2, #255	; 0xff
 80036fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003700:	e015      	b.n	800372e <UART_Start_Receive_IT+0x7e>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <UART_Start_Receive_IT+0x76>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <UART_Start_Receive_IT+0x6c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800371a:	e008      	b.n	800372e <UART_Start_Receive_IT+0x7e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	227f      	movs	r2, #127	; 0x7f
 8003720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003724:	e003      	b.n	800372e <UART_Start_Receive_IT+0x7e>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2222      	movs	r2, #34	; 0x22
 800373a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	657b      	str	r3, [r7, #84]	; 0x54
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800375e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e5      	bne.n	800373e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d107      	bne.n	800378c <UART_Start_Receive_IT+0xdc>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <UART_Start_Receive_IT+0x160>)
 8003788:	669a      	str	r2, [r3, #104]	; 0x68
 800378a:	e002      	b.n	8003792 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <UART_Start_Receive_IT+0x164>)
 8003790:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d019      	beq.n	80037ce <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80037ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <UART_Start_Receive_IT+0xea>
 80037cc:	e018      	b.n	8003800 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	613b      	str	r3, [r7, #16]
   return(result);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f043 0320 	orr.w	r3, r3, #32
 80037e2:	653b      	str	r3, [r7, #80]	; 0x50
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e6      	bne.n	80037ce <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	375c      	adds	r7, #92	; 0x5c
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	08003b09 	.word	0x08003b09
 8003814:	08003961 	.word	0x08003961

08003818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b095      	sub	sp, #84	; 0x54
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383e:	643b      	str	r3, [r7, #64]	; 0x40
 8003840:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e6      	bne.n	8003820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	61fb      	str	r3, [r7, #28]
   return(result);
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	64bb      	str	r3, [r7, #72]	; 0x48
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3308      	adds	r3, #8
 8003870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e5      	bne.n	8003852 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	2b01      	cmp	r3, #1
 800388c:	d118      	bne.n	80038c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	60bb      	str	r3, [r7, #8]
   return(result);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f023 0310 	bic.w	r3, r3, #16
 80038a2:	647b      	str	r3, [r7, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e6      	bne.n	800388e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038d4:	bf00      	nop
 80038d6:	3754      	adds	r7, #84	; 0x54
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff fb3a 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	60bb      	str	r3, [r7, #8]
   return(result);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	613b      	str	r3, [r7, #16]
   return(result);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e6      	bne.n	8003914 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fb06 	bl	8002f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003958:	bf00      	nop
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b09c      	sub	sp, #112	; 0x70
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800396e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003978:	2b22      	cmp	r3, #34	; 0x22
 800397a:	f040 80b9 	bne.w	8003af0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003984:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003988:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800398c:	b2d9      	uxtb	r1, r3
 800398e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003992:	b2da      	uxtb	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	400a      	ands	r2, r1
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 809c 	bne.w	8003b00 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80039e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e6      	bne.n	80039c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3308      	adds	r3, #8
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	667b      	str	r3, [r7, #100]	; 0x64
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d018      	beq.n	8003a82 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a64:	663b      	str	r3, [r7, #96]	; 0x60
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e6      	bne.n	8003a50 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d12e      	bne.n	8003ae8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f023 0310 	bic.w	r3, r3, #16
 8003aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	617b      	str	r3, [r7, #20]
   return(result);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d103      	bne.n	8003ad8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fa53 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ae6:	e00b      	b.n	8003b00 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7fc fb6d 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8003aee:	e007      	b.n	8003b00 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	619a      	str	r2, [r3, #24]
}
 8003b00:	bf00      	nop
 8003b02:	3770      	adds	r7, #112	; 0x70
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b09c      	sub	sp, #112	; 0x70
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b20:	2b22      	cmp	r3, #34	; 0x22
 8003b22:	f040 80b9 	bne.w	8003c98 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003b3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003b3e:	4013      	ands	r3, r2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 809c 	bne.w	8003ca8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b84:	667b      	str	r3, [r7, #100]	; 0x64
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e6      	bne.n	8003b70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bc2:	643a      	str	r2, [r7, #64]	; 0x40
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e5      	bne.n	8003ba2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d018      	beq.n	8003c2a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c18:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e6      	bne.n	8003bf8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d12e      	bne.n	8003c90 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	613b      	str	r3, [r7, #16]
   return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d103      	bne.n	8003c80 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff f97f 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c8e:	e00b      	b.n	8003ca8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fc fa99 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8003c96:	e007      	b.n	8003ca8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0208 	orr.w	r2, r2, #8
 8003ca6:	619a      	str	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	3770      	adds	r7, #112	; 0x70
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4d0d      	ldr	r5, [pc, #52]	; (8003cfc <__libc_init_array+0x38>)
 8003cc8:	4c0d      	ldr	r4, [pc, #52]	; (8003d00 <__libc_init_array+0x3c>)
 8003cca:	1b64      	subs	r4, r4, r5
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	2600      	movs	r6, #0
 8003cd0:	42a6      	cmp	r6, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	4d0b      	ldr	r5, [pc, #44]	; (8003d04 <__libc_init_array+0x40>)
 8003cd6:	4c0c      	ldr	r4, [pc, #48]	; (8003d08 <__libc_init_array+0x44>)
 8003cd8:	f000 f820 	bl	8003d1c <_init>
 8003cdc:	1b64      	subs	r4, r4, r5
 8003cde:	10a4      	asrs	r4, r4, #2
 8003ce0:	2600      	movs	r6, #0
 8003ce2:	42a6      	cmp	r6, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cec:	4798      	blx	r3
 8003cee:	3601      	adds	r6, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf6:	4798      	blx	r3
 8003cf8:	3601      	adds	r6, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	08003d6c 	.word	0x08003d6c
 8003d00:	08003d6c 	.word	0x08003d6c
 8003d04:	08003d6c 	.word	0x08003d6c
 8003d08:	08003d70 	.word	0x08003d70

08003d0c <memset>:
 8003d0c:	4402      	add	r2, r0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <_init>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr

08003d28 <_fini>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr
