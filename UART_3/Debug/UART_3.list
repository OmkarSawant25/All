
UART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003588  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003748  08003748  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003748  08003748  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003748  08003748  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000138  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c46  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001775  00000000  00000000  00029c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  0002baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9a3  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e63  00000000  00000000  00048b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac248  00000000  00000000  0005296e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000febb6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b14  00000000  00000000  000fec08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036f8 	.word	0x080036f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080036f8 	.word	0x080036f8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa42 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f818 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8c2 	bl	800035c <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f89a 	bl	8000310 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f868 	bl	80002b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, RX_string, 5);
 80001e0:	2205      	movs	r2, #5
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <main+0x30>)
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <main+0x34>)
 80001e6:	f002 fbdf 	bl	80029a8 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart1, TX_string, 5);
 80001ea:	2205      	movs	r2, #5
 80001ec:	4904      	ldr	r1, [pc, #16]	; (8000200 <main+0x38>)
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <main+0x34>)
 80001f0:	f002 fb5e 	bl	80028b0 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f4:	e7fe      	b.n	80001f4 <main+0x2c>
 80001f6:	bf00      	nop
 80001f8:	20000140 	.word	0x20000140
 80001fc:	20000030 	.word	0x20000030
 8000200:	20000000 	.word	0x20000000

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b09e      	sub	sp, #120	; 0x78
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f003 fa68 	bl	80036e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	223c      	movs	r2, #60	; 0x3c
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fa5a 	bl	80036e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000234:	2302      	movs	r3, #2
 8000236:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023c:	2310      	movs	r3, #16
 800023e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000244:	2300      	movs	r3, #0
 8000246:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000248:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800024c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000252:	4618      	mov	r0, r3
 8000254:	f000 feba 	bl	8000fcc <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800025e:	f000 f8bd 	bl	80003dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000266:	2302      	movs	r3, #2
 8000268:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000278:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fee2 	bl	8002048 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800028a:	f000 f8a7 	bl	80003dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800028e:	2301      	movs	r3, #1
 8000290:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000296:	463b      	mov	r3, r7
 8000298:	4618      	mov	r0, r3
 800029a:	f002 f90b 	bl	80024b4 <HAL_RCCEx_PeriphCLKConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002a4:	f000 f89a 	bl	80003dc <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3778      	adds	r7, #120	; 0x78
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002b6:	4a15      	ldr	r2, [pc, #84]	; (800030c <MX_USART1_UART_Init+0x5c>)
 80002b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_USART1_UART_Init+0x58>)
 80002f4:	f002 fa8e 	bl	8002814 <HAL_UART_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80002fe:	f000 f86d 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000030 	.word	0x20000030
 800030c:	40013800 	.word	0x40013800

08000310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <MX_DMA_Init+0x48>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <MX_DMA_Init+0x48>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6153      	str	r3, [r2, #20]
 8000322:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <MX_DMA_Init+0x48>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	200e      	movs	r0, #14
 8000334:	f000 facf 	bl	80008d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000338:	200e      	movs	r0, #14
 800033a:	f000 fae8 	bl	800090e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	200f      	movs	r0, #15
 8000344:	f000 fac7 	bl	80008d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000348:	200f      	movs	r0, #15
 800034a:	f000 fae0 	bl	800090e <HAL_NVIC_EnableIRQ>

}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_GPIO_Init+0x78>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <MX_GPIO_Init+0x7c>)
 80003aa:	f000 fdf7 	bl	8000f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	4619      	mov	r1, r3
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_GPIO_Init+0x7c>)
 80003c8:	f000 fc6e 	bl	8000ca8 <HAL_GPIO_Init>

}
 80003cc:	bf00      	nop
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48001000 	.word	0x48001000

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x44>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <HAL_MspInit+0x44>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <HAL_MspInit+0x44>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800041e:	2007      	movs	r0, #7
 8000420:	f000 fa4e 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40021000 	.word	0x40021000

08000430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a3d      	ldr	r2, [pc, #244]	; (8000544 <HAL_UART_MspInit+0x114>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d173      	bne.n	800053a <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000452:	4b3d      	ldr	r3, [pc, #244]	; (8000548 <HAL_UART_MspInit+0x118>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a3c      	ldr	r2, [pc, #240]	; (8000548 <HAL_UART_MspInit+0x118>)
 8000458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b3a      	ldr	r3, [pc, #232]	; (8000548 <HAL_UART_MspInit+0x118>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4b37      	ldr	r3, [pc, #220]	; (8000548 <HAL_UART_MspInit+0x118>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a36      	ldr	r2, [pc, #216]	; (8000548 <HAL_UART_MspInit+0x118>)
 8000470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b34      	ldr	r3, [pc, #208]	; (8000548 <HAL_UART_MspInit+0x118>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000482:	2330      	movs	r3, #48	; 0x30
 8000484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048e:	2303      	movs	r3, #3
 8000490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000492:	2307      	movs	r3, #7
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4619      	mov	r1, r3
 800049c:	482b      	ldr	r0, [pc, #172]	; (800054c <HAL_UART_MspInit+0x11c>)
 800049e:	f000 fc03 	bl	8000ca8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004a4:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <HAL_UART_MspInit+0x124>)
 80004a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004a8:	4b29      	ldr	r3, [pc, #164]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004ae:	4b28      	ldr	r3, [pc, #160]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004b4:	4b26      	ldr	r3, [pc, #152]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004c0:	4b23      	ldr	r3, [pc, #140]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80004cc:	4b20      	ldr	r3, [pc, #128]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80004d2:	481f      	ldr	r0, [pc, #124]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004d4:	f000 fa35 	bl	8000942 <HAL_DMA_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80004de:	f7ff ff7d 	bl	80003dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004e6:	675a      	str	r2, [r3, #116]	; 0x74
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <HAL_UART_MspInit+0x120>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <HAL_UART_MspInit+0x128>)
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <HAL_UART_MspInit+0x12c>)
 80004f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <HAL_UART_MspInit+0x128>)
 80004f6:	2210      	movs	r2, #16
 80004f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_UART_MspInit+0x128>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_UART_MspInit+0x128>)
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_UART_MspInit+0x128>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_UART_MspInit+0x128>)
 800050e:	2200      	movs	r2, #0
 8000510:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_UART_MspInit+0x128>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_UART_MspInit+0x128>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800051e:	480e      	ldr	r0, [pc, #56]	; (8000558 <HAL_UART_MspInit+0x128>)
 8000520:	f000 fa0f 	bl	8000942 <HAL_DMA_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800052a:	f7ff ff57 	bl	80003dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_UART_MspInit+0x128>)
 8000532:	671a      	str	r2, [r3, #112]	; 0x70
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <HAL_UART_MspInit+0x128>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053a:	bf00      	nop
 800053c:	3728      	adds	r7, #40	; 0x28
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000
 800054c:	48000800 	.word	0x48000800
 8000550:	200000b8 	.word	0x200000b8
 8000554:	40020058 	.word	0x40020058
 8000558:	200000fc 	.word	0x200000fc
 800055c:	40020044 	.word	0x40020044

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>

08000572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>

0800057e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f898 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <DMA1_Channel4_IRQHandler+0x10>)
 80005ba:	f000 fa68 	bl	8000a8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000fc 	.word	0x200000fc

080005c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <DMA1_Channel5_IRQHandler+0x10>)
 80005ce:	f000 fa5e 	bl	8000a8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000b8 	.word	0x200000b8

080005dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SystemInit+0x20>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <SystemInit+0x20>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000638 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000604:	f7ff ffea 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062e:	f003 f837 	bl	80036a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000632:	f7ff fdc9 	bl	80001c8 <main>

08000636 <LoopForever>:

LoopForever:
    b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000638:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000644:	08003750 	.word	0x08003750
  ldr r2, =_sbss
 8000648:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800064c:	2000014c 	.word	0x2000014c

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f92b 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff feba 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f943 	bl	800092a <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f90b 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000010 	.word	0x20000010
 80006dc:	2000000c 	.word	0x2000000c

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_IncTick+0x20>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_IncTick+0x24>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_IncTick+0x24>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000010 	.word	0x20000010
 8000704:	20000148 	.word	0x20000148

08000708 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;  
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <HAL_GetTick+0x14>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000148 	.word	0x20000148

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	db0b      	blt.n	80007ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 021f 	and.w	r2, r3, #31
 800079c:	4907      	ldr	r1, [pc, #28]	; (80007bc <__NVIC_EnableIRQ+0x38>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	2001      	movs	r0, #1
 80007a6:	fa00 f202 	lsl.w	r2, r0, r2
 80007aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	490c      	ldr	r1, [pc, #48]	; (800080c <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4908      	ldr	r1, [pc, #32]	; (8000810 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f1c3 0307 	rsb	r3, r3, #7
 800082e:	2b04      	cmp	r3, #4
 8000830:	bf28      	it	cs
 8000832:	2304      	movcs	r3, #4
 8000834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	2b06      	cmp	r3, #6
 800083c:	d902      	bls.n	8000844 <NVIC_EncodePriority+0x30>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3b03      	subs	r3, #3
 8000842:	e000      	b.n	8000846 <NVIC_EncodePriority+0x32>
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	401a      	ands	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43d9      	mvns	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff8e 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff29 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff3e 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff8e 	bl	8000814 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5d 	bl	80007c0 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff31 	bl	8000784 <__NVIC_EnableIRQ>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffa2 	bl	800087c <SysTick_Config>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	e037      	b.n	80009c8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2202      	movs	r2, #2
 800095c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800096e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000972:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800097c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f940 	bl	8000c30 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2201      	movs	r2, #1
 80009ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}  
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d101      	bne.n	80009f0 <HAL_DMA_Start_IT+0x20>
 80009ec:	2302      	movs	r3, #2
 80009ee:	e04a      	b.n	8000a86 <HAL_DMA_Start_IT+0xb6>
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2201      	movs	r2, #1
 80009f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d13a      	bne.n	8000a78 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2202      	movs	r2, #2
 8000a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0201 	bic.w	r2, r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f000 f8d4 	bl	8000bd4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 020e 	orr.w	r2, r2, #14
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e00f      	b.n	8000a66 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f042 020a 	orr.w	r2, r2, #10
 8000a54:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 0204 	bic.w	r2, r2, #4
 8000a64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0201 	orr.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e005      	b.n	8000a84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000a80:	2302      	movs	r3, #2
 8000a82:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	2204      	movs	r2, #4
 8000aac:	409a      	lsls	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d024      	beq.n	8000b00 <HAL_DMA_IRQHandler+0x72>
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d01f      	beq.n	8000b00 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0320 	and.w	r3, r3, #32
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d107      	bne.n	8000ade <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f022 0204 	bic.w	r2, r2, #4
 8000adc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aec:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d06a      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000afe:	e065      	b.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	2202      	movs	r2, #2
 8000b06:	409a      	lsls	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d02c      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xdc>
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d027      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10b      	bne.n	8000b40 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 020a 	bic.w	r2, r2, #10
 8000b36:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b48:	2102      	movs	r1, #2
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d035      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000b68:	e030      	b.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	2208      	movs	r2, #8
 8000b70:	409a      	lsls	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d028      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d023      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 020e 	bic.w	r2, r2, #14
 8000b92:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2201      	movs	r2, #1
 8000bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	4798      	blx	r3
    }
  }
}  
 8000bca:	e7ff      	b.n	8000bcc <HAL_DMA_IRQHandler+0x13e>
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bea:	2101      	movs	r1, #1
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b10      	cmp	r3, #16
 8000c00:	d108      	bne.n	8000c14 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000c12:	e007      	b.n	8000c24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	60da      	str	r2, [r3, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <DMA_CalcBaseAndBitshift+0x60>)
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d80f      	bhi.n	8000c64 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <DMA_CalcBaseAndBitshift+0x64>)
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <DMA_CalcBaseAndBitshift+0x68>)
 8000c50:	fba2 2303 	umull	r2, r3, r2, r3
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	009a      	lsls	r2, r3, #2
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <DMA_CalcBaseAndBitshift+0x6c>)
 8000c60:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000c62:	e00e      	b.n	8000c82 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <DMA_CalcBaseAndBitshift+0x70>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <DMA_CalcBaseAndBitshift+0x68>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	009a      	lsls	r2, r3, #2
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <DMA_CalcBaseAndBitshift+0x74>)
 8000c80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40020407 	.word	0x40020407
 8000c94:	bffdfff8 	.word	0xbffdfff8
 8000c98:	cccccccd 	.word	0xcccccccd
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	bffdfbf8 	.word	0xbffdfbf8
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	e154      	b.n	8000f62 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8146 	beq.w	8000f5c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d005      	beq.n	8000ce8 <HAL_GPIO_Init+0x40>
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d130      	bne.n	8000d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 0201 	and.w	r2, r3, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d017      	beq.n	8000d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d123      	bne.n	8000dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	6939      	ldr	r1, [r7, #16]
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0203 	and.w	r2, r3, #3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 80a0 	beq.w	8000f5c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <HAL_GPIO_Init+0x2d8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a57      	ldr	r2, [pc, #348]	; (8000f80 <HAL_GPIO_Init+0x2d8>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e34:	4a53      	ldr	r2, [pc, #332]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e5e:	d019      	beq.n	8000e94 <HAL_GPIO_Init+0x1ec>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <HAL_GPIO_Init+0x2e0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d013      	beq.n	8000e90 <HAL_GPIO_Init+0x1e8>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_GPIO_Init+0x2e4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00d      	beq.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x1e0>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <HAL_GPIO_Init+0x2ec>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d101      	bne.n	8000e84 <HAL_GPIO_Init+0x1dc>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e84:	2305      	movs	r3, #5
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e94:	2300      	movs	r3, #0
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea6:	4937      	ldr	r1, [pc, #220]	; (8000f84 <HAL_GPIO_Init+0x2dc>)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed8:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f02:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f aea3 	bne.w	8000cb8 <HAL_GPIO_Init+0x10>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000c00 	.word	0x48000c00
 8000f94:	48001000 	.word	0x48001000
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fdc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f001 b823 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 817d 	beq.w	8001302 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001008:	4bbc      	ldr	r3, [pc, #752]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b04      	cmp	r3, #4
 8001012:	d00c      	beq.n	800102e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001014:	4bb9      	ldr	r3, [pc, #740]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d15c      	bne.n	80010da <HAL_RCC_OscConfig+0x10e>
 8001020:	4bb6      	ldr	r3, [pc, #728]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102c:	d155      	bne.n	80010da <HAL_RCC_OscConfig+0x10e>
 800102e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001032:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001042:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d102      	bne.n	8001060 <HAL_RCC_OscConfig+0x94>
 800105a:	4ba8      	ldr	r3, [pc, #672]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	e015      	b.n	800108c <HAL_RCC_OscConfig+0xc0>
 8001060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001064:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001078:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800107c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001088:	4b9c      	ldr	r3, [pc, #624]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001090:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001094:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001098:	fa92 f2a2 	rbit	r2, r2
 800109c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010a0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010a4:	fab2 f282 	clz	r2, r2
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	f042 0220 	orr.w	r2, r2, #32
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	f002 021f 	and.w	r2, r2, #31
 80010b4:	2101      	movs	r1, #1
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 811f 	beq.w	8001300 <HAL_RCC_OscConfig+0x334>
 80010c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 8116 	bne.w	8001300 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	f000 bfaf 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x12e>
 80010ec:	4b83      	ldr	r3, [pc, #524]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a82      	ldr	r2, [pc, #520]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e036      	b.n	8001168 <HAL_RCC_OscConfig+0x19c>
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x158>
 800110a:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a7b      	ldr	r2, [pc, #492]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b79      	ldr	r3, [pc, #484]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a78      	ldr	r2, [pc, #480]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800111c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e021      	b.n	8001168 <HAL_RCC_OscConfig+0x19c>
 8001124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001128:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x184>
 8001136:	4b71      	ldr	r3, [pc, #452]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a70      	ldr	r2, [pc, #448]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6d      	ldr	r2, [pc, #436]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e00b      	b.n	8001168 <HAL_RCC_OscConfig+0x19c>
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a69      	ldr	r2, [pc, #420]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a66      	ldr	r2, [pc, #408]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	f023 020f 	bic.w	r2, r3, #15
 8001170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001174:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	495f      	ldr	r1, [pc, #380]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800117e:	4313      	orrs	r3, r2
 8001180:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d059      	beq.n	8001246 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fab9 	bl	8000708 <HAL_GetTick>
 8001196:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fab4 	bl	8000708 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b64      	cmp	r3, #100	; 0x64
 80011aa:	d902      	bls.n	80011b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f000 bf43 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
 80011b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x218>
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0x244>
 80011e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001200:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001214:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001218:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800121c:	fa92 f2a2 	rbit	r2, r2
 8001220:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001224:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001228:	fab2 f282 	clz	r2, r2
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f042 0220 	orr.w	r2, r2, #32
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	f002 021f 	and.w	r2, r2, #31
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0ab      	beq.n	800119c <HAL_RCC_OscConfig+0x1d0>
 8001244:	e05d      	b.n	8001302 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fa5f 	bl	8000708 <HAL_GetTick>
 800124a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	e00a      	b.n	8001266 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fa5a 	bl	8000708 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d902      	bls.n	8001266 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	f000 bee9 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
 8001266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800127a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d102      	bne.n	8001298 <HAL_RCC_OscConfig+0x2cc>
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	e015      	b.n	80012c4 <HAL_RCC_OscConfig+0x2f8>
 8001298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012cc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012d0:	fa92 f2a2 	rbit	r2, r2
 80012d4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012d8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012dc:	fab2 f282 	clz	r2, r2
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f042 0220 	orr.w	r2, r2, #32
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f002 021f 	and.w	r2, r2, #31
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ab      	bne.n	8001250 <HAL_RCC_OscConfig+0x284>
 80012f8:	e003      	b.n	8001302 <HAL_RCC_OscConfig+0x336>
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 817d 	beq.w	8001612 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001318:	4ba6      	ldr	r3, [pc, #664]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001324:	4ba3      	ldr	r3, [pc, #652]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d172      	bne.n	8001416 <HAL_RCC_OscConfig+0x44a>
 8001330:	4ba0      	ldr	r3, [pc, #640]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d16c      	bne.n	8001416 <HAL_RCC_OscConfig+0x44a>
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800134e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <HAL_RCC_OscConfig+0x3a0>
 8001366:	4b93      	ldr	r3, [pc, #588]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e013      	b.n	8001394 <HAL_RCC_OscConfig+0x3c8>
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001384:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2202      	movs	r2, #2
 8001396:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800139a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800139e:	fa92 f2a2 	rbit	r2, r2
 80013a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013aa:	fab2 f282 	clz	r2, r2
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	f042 0220 	orr.w	r2, r2, #32
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f002 021f 	and.w	r2, r2, #31
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <HAL_RCC_OscConfig+0x410>
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f000 be2e 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	21f8      	movs	r1, #248	; 0xf8
 80013f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013fa:	fa91 f1a1 	rbit	r1, r1
 80013fe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001402:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001406:	fab1 f181 	clz	r1, r1
 800140a:	b2c9      	uxtb	r1, r1
 800140c:	408b      	lsls	r3, r1
 800140e:	4969      	ldr	r1, [pc, #420]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	e0fd      	b.n	8001612 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8088 	beq.w	8001538 <HAL_RCC_OscConfig+0x56c>
 8001428:	2301      	movs	r3, #1
 800142a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800143a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001448:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	461a      	mov	r2, r3
 8001450:	2301      	movs	r3, #1
 8001452:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff f958 	bl	8000708 <HAL_GetTick>
 8001458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff f953 	bl	8000708 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d902      	bls.n	8001474 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	f000 bde2 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800147e:	fa93 f3a3 	rbit	r3, r3
 8001482:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001486:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	095b      	lsrs	r3, r3, #5
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4d8>
 800149e:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x500>
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014ae:	fa93 f3a3 	rbit	r3, r3
 80014b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	2202      	movs	r2, #2
 80014ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014d6:	fa92 f2a2 	rbit	r2, r2
 80014da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014e2:	fab2 f282 	clz	r2, r2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	f002 021f 	and.w	r2, r2, #31
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0af      	beq.n	800145e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	21f8      	movs	r1, #248	; 0xf8
 8001514:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800151c:	fa91 f1a1 	rbit	r1, r1
 8001520:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001524:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001528:	fab1 f181 	clz	r1, r1
 800152c:	b2c9      	uxtb	r1, r1
 800152e:	408b      	lsls	r3, r1
 8001530:	4920      	ldr	r1, [pc, #128]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
 8001536:	e06c      	b.n	8001612 <HAL_RCC_OscConfig+0x646>
 8001538:	2301      	movs	r3, #1
 800153a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800154a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001558:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	461a      	mov	r2, r3
 8001560:	2300      	movs	r3, #0
 8001562:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff f8d0 	bl	8000708 <HAL_GetTick>
 8001568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff f8cb 	bl	8000708 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d902      	bls.n	8001584 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	f000 bd5a 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d104      	bne.n	80015b8 <HAL_RCC_OscConfig+0x5ec>
 80015ae:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <HAL_RCC_OscConfig+0x5e8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	e015      	b.n	80015e0 <HAL_RCC_OscConfig+0x614>
 80015b4:	40021000 	.word	0x40021000
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015dc:	4bc8      	ldr	r3, [pc, #800]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2202      	movs	r2, #2
 80015e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015ea:	fa92 f2a2 	rbit	r2, r2
 80015ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015f6:	fab2 f282 	clz	r2, r2
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	f042 0220 	orr.w	r2, r2, #32
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	f002 021f 	and.w	r2, r2, #31
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ad      	bne.n	800156e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8110 	beq.w	8001848 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d079      	beq.n	800172c <HAL_RCC_OscConfig+0x760>
 8001638:	2301      	movs	r3, #1
 800163a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800164a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	4bab      	ldr	r3, [pc, #684]	; (8001904 <HAL_RCC_OscConfig+0x938>)
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	461a      	mov	r2, r3
 800165e:	2301      	movs	r3, #1
 8001660:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff f851 	bl	8000708 <HAL_GetTick>
 8001666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	e00a      	b.n	8001682 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff f84c 	bl	8000708 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d902      	bls.n	8001682 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	f000 bcdb 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800169c:	2202      	movs	r2, #2
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016c0:	2202      	movs	r2, #2
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f2a3 	rbit	r2, r3
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016dc:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 80016de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016e8:	2102      	movs	r1, #2
 80016ea:	6019      	str	r1, [r3, #0]
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f1a3 	rbit	r1, r3
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001702:	6019      	str	r1, [r3, #0]
  return result;
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0a0      	beq.n	800166c <HAL_RCC_OscConfig+0x6a0>
 800172a:	e08d      	b.n	8001848 <HAL_RCC_OscConfig+0x87c>
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	fa93 f2a3 	rbit	r2, r3
 8001746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800174e:	601a      	str	r2, [r3, #0]
  return result;
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001758:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x938>)
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	461a      	mov	r2, r3
 800176a:	2300      	movs	r3, #0
 800176c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7fe ffcb 	bl	8000708 <HAL_GetTick>
 8001772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001778:	f7fe ffc6 	bl	8000708 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d902      	bls.n	800178e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	f000 bc55 	b.w	8002038 <HAL_RCC_OscConfig+0x106c>
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 80017fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001806:	2102      	movs	r1, #2
 8001808:	6019      	str	r1, [r3, #0]
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fa93 f1a3 	rbit	r1, r3
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001820:	6019      	str	r1, [r3, #0]
  return result;
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d197      	bne.n	8001778 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 81a1 	beq.w	8001ba0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d116      	bne.n	800189e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	4a22      	ldr	r2, [pc, #136]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	61d3      	str	r3, [r2, #28]
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001896:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001898:	2301      	movs	r3, #1
 800189a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_RCC_OscConfig+0x93c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_RCC_OscConfig+0x93c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_RCC_OscConfig+0x93c>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b6:	f7fe ff27 	bl	8000708 <HAL_GetTick>
 80018ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	e009      	b.n	80018d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7fe ff22 	bl	8000708 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e3b1      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_RCC_OscConfig+0x93c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ef      	beq.n	80018c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10d      	bne.n	800190c <HAL_RCC_OscConfig+0x940>
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a02      	ldr	r2, [pc, #8]	; (8001900 <HAL_RCC_OscConfig+0x934>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	e03c      	b.n	8001978 <HAL_RCC_OscConfig+0x9ac>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	10908120 	.word	0x10908120
 8001908:	40007000 	.word	0x40007000
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10c      	bne.n	8001936 <HAL_RCC_OscConfig+0x96a>
 800191c:	4bc1      	ldr	r3, [pc, #772]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4ac0      	ldr	r2, [pc, #768]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	4bbe      	ldr	r3, [pc, #760]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4abd      	ldr	r2, [pc, #756]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 800192e:	f023 0304 	bic.w	r3, r3, #4
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	e020      	b.n	8001978 <HAL_RCC_OscConfig+0x9ac>
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x994>
 8001946:	4bb7      	ldr	r3, [pc, #732]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4ab6      	ldr	r2, [pc, #728]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	4bb4      	ldr	r3, [pc, #720]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4ab3      	ldr	r2, [pc, #716]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x9ac>
 8001960:	4bb0      	ldr	r3, [pc, #704]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4aaf      	ldr	r2, [pc, #700]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	4bad      	ldr	r3, [pc, #692]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4aac      	ldr	r2, [pc, #688]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001972:	f023 0304 	bic.w	r3, r3, #4
 8001976:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8081 	beq.w	8001a8c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7fe febd 	bl	8000708 <HAL_GetTick>
 800198e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7fe feb8 	bl	8000708 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e345      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019b4:	2202      	movs	r2, #2
 80019b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019f2:	601a      	str	r2, [r3, #0]
  return result;
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0xa4c>
 8001a12:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	e013      	b.n	8001a40 <HAL_RCC_OscConfig+0xa74>
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a44:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a48:	2102      	movs	r1, #2
 8001a4a:	6011      	str	r1, [r2, #0]
 8001a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	fa92 f1a2 	rbit	r1, r2
 8001a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a62:	6011      	str	r1, [r2, #0]
  return result;
 8001a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a68:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f002 021f 	and.w	r2, r2, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d084      	beq.n	8001994 <HAL_RCC_OscConfig+0x9c8>
 8001a8a:	e07f      	b.n	8001b8c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7fe fe3c 	bl	8000708 <HAL_GetTick>
 8001a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7fe fe37 	bl	8000708 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e2c4      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001af4:	601a      	str	r2, [r3, #0]
  return result;
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001afe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d102      	bne.n	8001b1a <HAL_RCC_OscConfig+0xb4e>
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	e013      	b.n	8001b42 <HAL_RCC_OscConfig+0xb76>
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b22:	2202      	movs	r2, #2
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fa92 f1a2 	rbit	r1, r2
 8001b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b60:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b64:	6011      	str	r1, [r2, #0]
  return result;
 8001b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b6a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d184      	bne.n	8001a96 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b8c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8242 	beq.w	8002036 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_RCC_OscConfig+0xc58>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	f000 8213 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	f040 8162 	bne.w	8001e96 <HAL_RCC_OscConfig+0xeca>
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bf6:	601a      	str	r2, [r3, #0]
  return result;
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	461a      	mov	r2, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe fd76 	bl	8000708 <HAL_GetTick>
 8001c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	e00c      	b.n	8001c3c <HAL_RCC_OscConfig+0xc70>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7fe fd6e 	bl	8000708 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1fd      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c60:	601a      	str	r2, [r3, #0]
  return result;
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_OscConfig+0xcba>
 8001c80:	4bb0      	ldr	r3, [pc, #704]	; (8001f44 <HAL_RCC_OscConfig+0xf78>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e027      	b.n	8001cd6 <HAL_RCC_OscConfig+0xd0a>
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4b9c      	ldr	r3, [pc, #624]	; (8001f44 <HAL_RCC_OscConfig+0xf78>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cda:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cde:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce2:	6011      	str	r1, [r2, #0]
 8001ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	fa92 f1a2 	rbit	r1, r2
 8001cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cfa:	6011      	str	r1, [r2, #0]
  return result;
 8001cfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	fab2 f282 	clz	r2, r2
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f002 021f 	and.w	r2, r2, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d182      	bne.n	8001c28 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0xf78>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	430b      	orrs	r3, r1
 8001d44:	497f      	ldr	r1, [pc, #508]	; (8001f44 <HAL_RCC_OscConfig+0xf78>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d6e:	601a      	str	r2, [r3, #0]
  return result;
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fcba 	bl	8000708 <HAL_GetTick>
 8001d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d98:	e009      	b.n	8001dae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7fe fcb5 	bl	8000708 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e144      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dd2:	601a      	str	r2, [r3, #0]
  return result;
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ddc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_OscConfig+0xe2c>
 8001df2:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <HAL_RCC_OscConfig+0xf78>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e027      	b.n	8001e48 <HAL_RCC_OscConfig+0xe7c>
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCC_OscConfig+0xf78>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fa92 f1a2 	rbit	r1, r2
 8001e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e6c:	6011      	str	r1, [r2, #0]
  return result;
 8001e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f042 0220 	orr.w	r2, r2, #32
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f002 021f 	and.w	r2, r2, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d082      	beq.n	8001d9a <HAL_RCC_OscConfig+0xdce>
 8001e94:	e0cf      	b.n	8002036 <HAL_RCC_OscConfig+0x106a>
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	fa93 f2a3 	rbit	r2, r3
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001eba:	601a      	str	r2, [r3, #0]
  return result;
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ec4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe fc14 	bl	8000708 <HAL_GetTick>
 8001ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe fc0f 	bl	8000708 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e09e      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f1e:	601a      	str	r2, [r3, #0]
  return result;
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d104      	bne.n	8001f48 <HAL_RCC_OscConfig+0xf7c>
 8001f3e:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <HAL_RCC_OscConfig+0xf78>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	e029      	b.n	8001f98 <HAL_RCC_OscConfig+0xfcc>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x1078>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f9c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fa0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fa4:	6011      	str	r1, [r2, #0]
 8001fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001faa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	fa92 f1a2 	rbit	r1, r2
 8001fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fb8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fbc:	6011      	str	r1, [r2, #0]
  return result;
 8001fbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fc2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	fab2 f282 	clz	r2, r2
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f042 0220 	orr.w	r2, r2, #32
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f002 021f 	and.w	r2, r2, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f202 	lsl.w	r2, r1, r2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d180      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xf1a>
 8001fe4:	e027      	b.n	8002036 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e01e      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_RCC_OscConfig+0x1078>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002002:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002006:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	429a      	cmp	r2, r3
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800201a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800201e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b09e      	sub	sp, #120	; 0x78
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e162      	b.n	8002326 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b90      	ldr	r3, [pc, #576]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d910      	bls.n	8002090 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b8d      	ldr	r3, [pc, #564]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 0207 	bic.w	r2, r3, #7
 8002076:	498b      	ldr	r1, [pc, #556]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b89      	ldr	r3, [pc, #548]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e14a      	b.n	8002326 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209c:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	497f      	ldr	r1, [pc, #508]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80dc 	beq.w	8002274 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d13c      	bne.n	800213e <HAL_RCC_ClockConfig+0xf6>
 80020c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_ClockConfig+0xa6>
 80020e8:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	e00f      	b.n	800210e <HAL_RCC_ClockConfig+0xc6>
 80020ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	667b      	str	r3, [r7, #100]	; 0x64
 80020fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002100:	663b      	str	r3, [r7, #96]	; 0x60
 8002102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002112:	65ba      	str	r2, [r7, #88]	; 0x58
 8002114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002116:	fa92 f2a2 	rbit	r2, r2
 800211a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800211c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d17b      	bne.n	8002232 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0f3      	b.n	8002326 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d13c      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x178>
 8002146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d102      	bne.n	8002170 <HAL_RCC_ClockConfig+0x128>
 800216a:	4b4f      	ldr	r3, [pc, #316]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e00f      	b.n	8002190 <HAL_RCC_ClockConfig+0x148>
 8002170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
 800217e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
 8002184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800218c:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002194:	63ba      	str	r2, [r7, #56]	; 0x38
 8002196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002198:	fa92 f2a2 	rbit	r2, r2
 800219c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800219e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f042 0220 	orr.w	r2, r2, #32
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	f002 021f 	and.w	r2, r2, #31
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f202 	lsl.w	r2, r1, r2
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d13a      	bne.n	8002232 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b2      	b.n	8002326 <HAL_RCC_ClockConfig+0x2de>
 80021c0:	2302      	movs	r3, #2
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x1a0>
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	e00d      	b.n	8002204 <HAL_RCC_ClockConfig+0x1bc>
 80021e8:	2302      	movs	r3, #2
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2202      	movs	r2, #2
 8002206:	61ba      	str	r2, [r7, #24]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	fa92 f2a2 	rbit	r2, r2
 800220e:	617a      	str	r2, [r7, #20]
  return result;
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	fab2 f282 	clz	r2, r2
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f042 0220 	orr.w	r2, r2, #32
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f002 021f 	and.w	r2, r2, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f202 	lsl.w	r2, r1, r2
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e079      	b.n	8002326 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7fe fa60 	bl	8000708 <HAL_GetTick>
 8002248:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	e00a      	b.n	8002262 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7fe fa5c 	bl	8000708 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e061      	b.n	8002326 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_RCC_ClockConfig+0x260>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 020c 	and.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	429a      	cmp	r2, r3
 8002272:	d1eb      	bne.n	800224c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d214      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0207 	bic.w	r2, r3, #7
 800228a:	4906      	ldr	r1, [pc, #24]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RCC_ClockConfig+0x25c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e040      	b.n	8002326 <HAL_RCC_ClockConfig+0x2de>
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_ClockConfig+0x2e8>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	491a      	ldr	r1, [pc, #104]	; (8002330 <HAL_RCC_ClockConfig+0x2e8>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x2e8>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4912      	ldr	r1, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x2e8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022ea:	f000 f829 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_RCC_ClockConfig+0x2e8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f8:	22f0      	movs	r2, #240	; 0xf0
 80022fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	fa92 f2a2 	rbit	r2, r2
 8002302:	60fa      	str	r2, [r7, #12]
  return result;
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	fab2 f282 	clz	r2, r2
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	40d3      	lsrs	r3, r2
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x2ec>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	fa21 f303 	lsr.w	r3, r1, r3
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_RCC_ClockConfig+0x2f0>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_RCC_ClockConfig+0x2f4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f9ae 	bl	8000680 <HAL_InitTick>
  
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3778      	adds	r7, #120	; 0x78
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	08003710 	.word	0x08003710
 8002338:	20000008 	.word	0x20000008
 800233c:	2000000c 	.word	0x2000000c

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b08b      	sub	sp, #44	; 0x2c
 8002344:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_RCC_GetSysClockFreq+0xc0>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x30>
 800236a:	2b08      	cmp	r3, #8
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x36>
 800236e:	e03c      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002372:	623b      	str	r3, [r7, #32]
      break;
 8002374:	e03c      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800237c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002380:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	fa92 f2a2 	rbit	r2, r2
 8002388:	607a      	str	r2, [r7, #4]
  return result;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	40d3      	lsrs	r3, r2
 8002394:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_GetSysClockFreq+0xc0>)
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	220f      	movs	r2, #15
 80023a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	fa92 f2a2 	rbit	r2, r2
 80023ac:	60fa      	str	r2, [r7, #12]
  return result;
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	40d3      	lsrs	r3, r2
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_RCC_GetSysClockFreq+0xcc>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	e004      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	623b      	str	r3, [r7, #32]
      break;
 80023e8:	e002      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ec:	623b      	str	r3, [r7, #32]
      break;
 80023ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	372c      	adds	r7, #44	; 0x2c
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	007a1200 	.word	0x007a1200
 8002408:	08003728 	.word	0x08003728
 800240c:	08003738 	.word	0x08003738
 8002410:	003d0900 	.word	0x003d0900

08002414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_RCC_GetHCLKFreq+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000008 	.word	0x20000008

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002432:	f7ff ffef 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002436:	4601      	mov	r1, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002440:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	603a      	str	r2, [r7, #0]
  return result;
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	40d3      	lsrs	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_RCC_GetPCLK1Freq+0x40>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	08003720 	.word	0x08003720

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002476:	f7ff ffcd 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 800247a:	4601      	mov	r1, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002484:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002488:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	fa92 f2a2 	rbit	r2, r2
 8002490:	603a      	str	r2, [r7, #0]
  return result;
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	fab2 f282 	clz	r2, r2
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	40d3      	lsrs	r3, r2
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08003720 	.word	0x08003720

080024b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b092      	sub	sp, #72	; 0x48
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80d4 	beq.w	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d8:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10e      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4a4a      	ldr	r2, [pc, #296]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	61d3      	str	r3, [r2, #28]
 80024f0:	4b48      	ldr	r3, [pc, #288]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b45      	ldr	r3, [pc, #276]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d118      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a41      	ldr	r2, [pc, #260]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7fe f8f5 	bl	8000708 <HAL_GetTick>
 800251e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	e008      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7fe f8f1 	bl	8000708 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e169      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800254a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8084 	beq.w	800265a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800255c:	429a      	cmp	r2, r3
 800255e:	d07c      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800256a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	461a      	mov	r2, r3
 800258a:	2301      	movs	r3, #1
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	461a      	mov	r2, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025b2:	4a18      	ldr	r2, [pc, #96]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d04b      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe f8a1 	bl	8000708 <HAL_GetTick>
 80025c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe f89d 	bl	8000708 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e113      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80025e0:	2302      	movs	r3, #2
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	2302      	movs	r3, #2
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	61fb      	str	r3, [r7, #28]
  return result;
 80025f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d108      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800260e:	4b01      	ldr	r3, [pc, #4]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	e00d      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
 800261c:	10908100 	.word	0x10908100
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2202      	movs	r2, #2
 8002632:	613a      	str	r2, [r7, #16]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	fa92 f2a2 	rbit	r2, r2
 800263a:	60fa      	str	r2, [r7, #12]
  return result;
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	fab2 f282 	clz	r2, r2
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f002 021f 	and.w	r2, r2, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0b7      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	496a      	ldr	r1, [pc, #424]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800266c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	4a65      	ldr	r2, [pc, #404]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800268c:	4b60      	ldr	r3, [pc, #384]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f023 0203 	bic.w	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	495d      	ldr	r1, [pc, #372]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800269a:	4313      	orrs	r3, r2
 800269c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026aa:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4956      	ldr	r1, [pc, #344]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c8:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	494e      	ldr	r1, [pc, #312]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f023 0210 	bic.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4947      	ldr	r1, [pc, #284]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002704:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	493f      	ldr	r1, [pc, #252]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f023 0220 	bic.w	r2, r3, #32
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4938      	ldr	r1, [pc, #224]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4930      	ldr	r1, [pc, #192]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4929      	ldr	r1, [pc, #164]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	4921      	ldr	r1, [pc, #132]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	491a      	ldr	r1, [pc, #104]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	4912      	ldr	r1, [pc, #72]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	490b      	ldr	r1, [pc, #44]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3748      	adds	r7, #72	; 0x48
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e040      	b.n	80028a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fd fdfa 	bl	8000430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f92a 	bl	8002aac <UART_SetConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e022      	b.n	80028a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 faf2 	bl	8002e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800287e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800288e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb79 	bl	8002f98 <UART_CheckIdleState>
 80028a6:	4603      	mov	r3, r0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d165      	bne.n	8002992 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_UART_Transmit_DMA+0x22>
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e05e      	b.n	8002994 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	88fa      	ldrh	r2, [r7, #6]
 80028e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2221      	movs	r2, #33	; 0x21
 80028f8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d027      	beq.n	8002952 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a25      	ldr	r2, [pc, #148]	; (800299c <HAL_UART_Transmit_DMA+0xec>)
 8002908:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <HAL_UART_Transmit_DMA+0xf0>)
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <HAL_UART_Transmit_DMA+0xf4>)
 8002918:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	2200      	movs	r2, #0
 8002920:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4619      	mov	r1, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3328      	adds	r3, #40	; 0x28
 8002932:	461a      	mov	r2, r3
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f7fe f84b 	bl	80009d0 <HAL_DMA_Start_IT>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2210      	movs	r2, #16
 8002944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e020      	b.n	8002994 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3308      	adds	r3, #8
 8002960:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	613b      	str	r3, [r7, #16]
   return(result);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3308      	adds	r3, #8
 8002978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297a:	623a      	str	r2, [r7, #32]
 800297c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	69f9      	ldr	r1, [r7, #28]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	61bb      	str	r3, [r7, #24]
   return(result);
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e5      	bne.n	800295a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	0800340d 	.word	0x0800340d
 80029a0:	080034a1 	.word	0x080034a1
 80029a4:	08003621 	.word	0x08003621

080029a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d132      	bne.n	8002a26 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_Receive_DMA+0x24>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e02b      	b.n	8002a28 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d018      	beq.n	8002a16 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	e853 3f00 	ldrex	r3, [r3]
 80029f0:	613b      	str	r3, [r7, #16]
   return(result);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a06:	69f9      	ldr	r1, [r7, #28]
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	e841 2300 	strex	r3, r2, [r1]
 8002a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1e6      	bne.n	80029e4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fbcb 	bl	80031b8 <UART_Start_Receive_DMA>
 8002a22:	4603      	mov	r3, r0
 8002a24:	e000      	b.n	8002a28 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ada:	f023 030c 	bic.w	r3, r3, #12
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	6979      	ldr	r1, [r7, #20]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4aa7      	ldr	r2, [pc, #668]	; (8002dc4 <UART_SetConfig+0x318>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d120      	bne.n	8002b6e <UART_SetConfig+0xc2>
 8002b2c:	4ba6      	ldr	r3, [pc, #664]	; (8002dc8 <UART_SetConfig+0x31c>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d817      	bhi.n	8002b68 <UART_SetConfig+0xbc>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <UART_SetConfig+0x94>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b5d 	.word	0x08002b5d
 8002b48:	08002b63 	.word	0x08002b63
 8002b4c:	08002b57 	.word	0x08002b57
 8002b50:	2301      	movs	r3, #1
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e0b5      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002b56:	2302      	movs	r3, #2
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e0b2      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e0af      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002b62:	2308      	movs	r3, #8
 8002b64:	77fb      	strb	r3, [r7, #31]
 8002b66:	e0ac      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002b68:	2310      	movs	r3, #16
 8002b6a:	77fb      	strb	r3, [r7, #31]
 8002b6c:	e0a9      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a96      	ldr	r2, [pc, #600]	; (8002dcc <UART_SetConfig+0x320>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d124      	bne.n	8002bc2 <UART_SetConfig+0x116>
 8002b78:	4b93      	ldr	r3, [pc, #588]	; (8002dc8 <UART_SetConfig+0x31c>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b84:	d011      	beq.n	8002baa <UART_SetConfig+0xfe>
 8002b86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b8a:	d817      	bhi.n	8002bbc <UART_SetConfig+0x110>
 8002b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b90:	d011      	beq.n	8002bb6 <UART_SetConfig+0x10a>
 8002b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b96:	d811      	bhi.n	8002bbc <UART_SetConfig+0x110>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <UART_SetConfig+0xf8>
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d006      	beq.n	8002bb0 <UART_SetConfig+0x104>
 8002ba2:	e00b      	b.n	8002bbc <UART_SetConfig+0x110>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e08b      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002baa:	2302      	movs	r3, #2
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	e088      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	77fb      	strb	r3, [r7, #31]
 8002bb4:	e085      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	77fb      	strb	r3, [r7, #31]
 8002bba:	e082      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	77fb      	strb	r3, [r7, #31]
 8002bc0:	e07f      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a82      	ldr	r2, [pc, #520]	; (8002dd0 <UART_SetConfig+0x324>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d124      	bne.n	8002c16 <UART_SetConfig+0x16a>
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <UART_SetConfig+0x31c>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002bd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bd8:	d011      	beq.n	8002bfe <UART_SetConfig+0x152>
 8002bda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bde:	d817      	bhi.n	8002c10 <UART_SetConfig+0x164>
 8002be0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002be4:	d011      	beq.n	8002c0a <UART_SetConfig+0x15e>
 8002be6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bea:	d811      	bhi.n	8002c10 <UART_SetConfig+0x164>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <UART_SetConfig+0x14c>
 8002bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf4:	d006      	beq.n	8002c04 <UART_SetConfig+0x158>
 8002bf6:	e00b      	b.n	8002c10 <UART_SetConfig+0x164>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e061      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	77fb      	strb	r3, [r7, #31]
 8002c02:	e05e      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c04:	2304      	movs	r3, #4
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e05b      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	e058      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c10:	2310      	movs	r3, #16
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e055      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6e      	ldr	r2, [pc, #440]	; (8002dd4 <UART_SetConfig+0x328>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d124      	bne.n	8002c6a <UART_SetConfig+0x1be>
 8002c20:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <UART_SetConfig+0x31c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c2c:	d011      	beq.n	8002c52 <UART_SetConfig+0x1a6>
 8002c2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c32:	d817      	bhi.n	8002c64 <UART_SetConfig+0x1b8>
 8002c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c38:	d011      	beq.n	8002c5e <UART_SetConfig+0x1b2>
 8002c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c3e:	d811      	bhi.n	8002c64 <UART_SetConfig+0x1b8>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <UART_SetConfig+0x1a0>
 8002c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c48:	d006      	beq.n	8002c58 <UART_SetConfig+0x1ac>
 8002c4a:	e00b      	b.n	8002c64 <UART_SetConfig+0x1b8>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e037      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c52:	2302      	movs	r3, #2
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e034      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e031      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	e02e      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c64:	2310      	movs	r3, #16
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e02b      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	; (8002dd8 <UART_SetConfig+0x32c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d124      	bne.n	8002cbe <UART_SetConfig+0x212>
 8002c74:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <UART_SetConfig+0x31c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002c7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c80:	d011      	beq.n	8002ca6 <UART_SetConfig+0x1fa>
 8002c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c86:	d817      	bhi.n	8002cb8 <UART_SetConfig+0x20c>
 8002c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c8c:	d011      	beq.n	8002cb2 <UART_SetConfig+0x206>
 8002c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c92:	d811      	bhi.n	8002cb8 <UART_SetConfig+0x20c>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <UART_SetConfig+0x1f4>
 8002c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9c:	d006      	beq.n	8002cac <UART_SetConfig+0x200>
 8002c9e:	e00b      	b.n	8002cb8 <UART_SetConfig+0x20c>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e00d      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e00a      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002cac:	2304      	movs	r3, #4
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e007      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	77fb      	strb	r3, [r7, #31]
 8002cb6:	e004      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e001      	b.n	8002cc2 <UART_SetConfig+0x216>
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	d15b      	bne.n	8002d84 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d827      	bhi.n	8002d22 <UART_SetConfig+0x276>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <UART_SetConfig+0x22c>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002cfd 	.word	0x08002cfd
 8002cdc:	08002d05 	.word	0x08002d05
 8002ce0:	08002d0d 	.word	0x08002d0d
 8002ce4:	08002d23 	.word	0x08002d23
 8002ce8:	08002d13 	.word	0x08002d13
 8002cec:	08002d23 	.word	0x08002d23
 8002cf0:	08002d23 	.word	0x08002d23
 8002cf4:	08002d23 	.word	0x08002d23
 8002cf8:	08002d1b 	.word	0x08002d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cfc:	f7ff fb96 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8002d00:	61b8      	str	r0, [r7, #24]
        break;
 8002d02:	e013      	b.n	8002d2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d04:	f7ff fbb4 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8002d08:	61b8      	str	r0, [r7, #24]
        break;
 8002d0a:	e00f      	b.n	8002d2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d0c:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <UART_SetConfig+0x330>)
 8002d0e:	61bb      	str	r3, [r7, #24]
        break;
 8002d10:	e00c      	b.n	8002d2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d12:	f7ff fb15 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 8002d16:	61b8      	str	r0, [r7, #24]
        break;
 8002d18:	e008      	b.n	8002d2c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d1e:	61bb      	str	r3, [r7, #24]
        break;
 8002d20:	e004      	b.n	8002d2c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	77bb      	strb	r3, [r7, #30]
        break;
 8002d2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8082 	beq.w	8002e38 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	005a      	lsls	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d916      	bls.n	8002d7e <UART_SetConfig+0x2d2>
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d212      	bcs.n	8002d7e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f023 030f 	bic.w	r3, r3, #15
 8002d60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	89fb      	ldrh	r3, [r7, #14]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	89fa      	ldrh	r2, [r7, #14]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	e05c      	b.n	8002e38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	77bb      	strb	r3, [r7, #30]
 8002d82:	e059      	b.n	8002e38 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d835      	bhi.n	8002df6 <UART_SetConfig+0x34a>
 8002d8a:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <UART_SetConfig+0x2e4>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002dbd 	.word	0x08002dbd
 8002d98:	08002de1 	.word	0x08002de1
 8002d9c:	08002df7 	.word	0x08002df7
 8002da0:	08002de7 	.word	0x08002de7
 8002da4:	08002df7 	.word	0x08002df7
 8002da8:	08002df7 	.word	0x08002df7
 8002dac:	08002df7 	.word	0x08002df7
 8002db0:	08002def 	.word	0x08002def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db4:	f7ff fb3a 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8002db8:	61b8      	str	r0, [r7, #24]
        break;
 8002dba:	e021      	b.n	8002e00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dbc:	f7ff fb58 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8002dc0:	61b8      	str	r0, [r7, #24]
        break;
 8002dc2:	e01d      	b.n	8002e00 <UART_SetConfig+0x354>
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40004400 	.word	0x40004400
 8002dd0:	40004800 	.word	0x40004800
 8002dd4:	40004c00 	.word	0x40004c00
 8002dd8:	40005000 	.word	0x40005000
 8002ddc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de0:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <UART_SetConfig+0x3a4>)
 8002de2:	61bb      	str	r3, [r7, #24]
        break;
 8002de4:	e00c      	b.n	8002e00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de6:	f7ff faab 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 8002dea:	61b8      	str	r0, [r7, #24]
        break;
 8002dec:	e008      	b.n	8002e00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df2:	61bb      	str	r3, [r7, #24]
        break;
 8002df4:	e004      	b.n	8002e00 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	77bb      	strb	r3, [r7, #30]
        break;
 8002dfe:	bf00      	nop
    }

    if (pclk != 0U)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d018      	beq.n	8002e38 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	085a      	lsrs	r2, r3, #1
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	441a      	add	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b0f      	cmp	r3, #15
 8002e1e:	d909      	bls.n	8002e34 <UART_SetConfig+0x388>
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e26:	d205      	bcs.n	8002e34 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	e001      	b.n	8002e38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e44:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	007a1200 	.word	0x007a1200

08002e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01a      	beq.n	8002f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d10a      	bne.n	8002f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b098      	sub	sp, #96	; 0x60
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fa8:	f7fd fbae 	bl	8000708 <HAL_GetTick>
 8002fac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d12e      	bne.n	800301a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f88c 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d021      	beq.n	800301a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fea:	653b      	str	r3, [r7, #80]	; 0x50
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e6      	bne.n	8002fd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e062      	b.n	80030e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d149      	bne.n	80030bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003030:	2200      	movs	r2, #0
 8003032:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f856 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03c      	beq.n	80030bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	623b      	str	r3, [r7, #32]
   return(result);
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
 8003062:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e6      	bne.n	8003042 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3308      	adds	r3, #8
 800307a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	60fb      	str	r3, [r7, #12]
   return(result);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	64bb      	str	r3, [r7, #72]	; 0x48
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3308      	adds	r3, #8
 8003092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003094:	61fa      	str	r2, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	617b      	str	r3, [r7, #20]
   return(result);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e011      	b.n	80030e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3758      	adds	r7, #88	; 0x58
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f8:	e049      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d045      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7fd fb01 	bl	8000708 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <UART_WaitOnFlagUntilTimeout+0x30>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e048      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d031      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b08      	cmp	r3, #8
 8003136:	d110      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2208      	movs	r2, #8
 800313e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f8ff 	bl	8003344 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2208      	movs	r2, #8
 800314a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e029      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003168:	d111      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f8e5 	bl	8003344 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d0a6      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b096      	sub	sp, #88	; 0x58
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2222      	movs	r2, #34	; 0x22
 80031e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d028      	beq.n	800323e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f0:	4a3e      	ldr	r2, [pc, #248]	; (80032ec <UART_Start_Receive_DMA+0x134>)
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f8:	4a3d      	ldr	r2, [pc, #244]	; (80032f0 <UART_Start_Receive_DMA+0x138>)
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	4a3c      	ldr	r2, [pc, #240]	; (80032f4 <UART_Start_Receive_DMA+0x13c>)
 8003202:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	2200      	movs	r2, #0
 800320a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3324      	adds	r3, #36	; 0x24
 8003216:	4619      	mov	r1, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	461a      	mov	r2, r3
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	f7fd fbd6 	bl	80009d0 <HAL_DMA_Start_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2210      	movs	r2, #16
 800322e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e051      	b.n	80032e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	657b      	str	r3, [r7, #84]	; 0x54
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003264:	64bb      	str	r3, [r7, #72]	; 0x48
 8003266:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800326a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e6      	bne.n	8003246 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3308      	adds	r3, #8
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	653b      	str	r3, [r7, #80]	; 0x50
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3308      	adds	r3, #8
 8003296:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003298:	637a      	str	r2, [r7, #52]	; 0x34
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800329e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e5      	bne.n	8003278 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	613b      	str	r3, [r7, #16]
   return(result);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3308      	adds	r3, #8
 80032ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032cc:	623a      	str	r2, [r7, #32]
 80032ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	69f9      	ldr	r1, [r7, #28]
 80032d2:	6a3a      	ldr	r2, [r7, #32]
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3758      	adds	r7, #88	; 0x58
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	080034bd 	.word	0x080034bd
 80032f0:	080035e3 	.word	0x080035e3
 80032f4:	08003621 	.word	0x08003621

080032f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	60bb      	str	r3, [r7, #8]
   return(result);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	613b      	str	r3, [r7, #16]
   return(result);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e6      	bne.n	8003300 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003338:	bf00      	nop
 800333a:	3724      	adds	r7, #36	; 0x24
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b095      	sub	sp, #84	; 0x54
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
 800336c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e6      	bne.n	800334c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	61fb      	str	r3, [r7, #28]
   return(result);
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	64bb      	str	r3, [r7, #72]	; 0x48
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3308      	adds	r3, #8
 800339c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800339e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d118      	bne.n	80033ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f023 0310 	bic.w	r3, r3, #16
 80033ce:	647b      	str	r3, [r7, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6979      	ldr	r1, [r7, #20]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	613b      	str	r3, [r7, #16]
   return(result);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e6      	bne.n	80033ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003400:	bf00      	nop
 8003402:	3754      	adds	r7, #84	; 0x54
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b090      	sub	sp, #64	; 0x40
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b20      	cmp	r3, #32
 8003420:	d037      	beq.n	8003492 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003424:	2200      	movs	r2, #0
 8003426:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3308      	adds	r3, #8
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	623b      	str	r3, [r7, #32]
   return(result);
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3308      	adds	r3, #8
 8003448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344a:	633a      	str	r2, [r7, #48]	; 0x30
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e5      	bne.n	800342a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800345e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	60fb      	str	r3, [r7, #12]
   return(result);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
 8003474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	69b9      	ldr	r1, [r7, #24]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	617b      	str	r3, [r7, #20]
   return(result);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e6      	bne.n	800345e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003490:	e002      	b.n	8003498 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8003492:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003494:	f7ff facc 	bl	8002a30 <HAL_UART_TxCpltCallback>
}
 8003498:	bf00      	nop
 800349a:	3740      	adds	r7, #64	; 0x40
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fac8 	bl	8002a44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b09c      	sub	sp, #112	; 0x70
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d071      	beq.n	80035b6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80034fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	667b      	str	r3, [r7, #100]	; 0x64
 8003524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800352c:	647a      	str	r2, [r7, #68]	; 0x44
 800352e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3308      	adds	r3, #8
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	623b      	str	r3, [r7, #32]
   return(result);
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003556:	663b      	str	r3, [r7, #96]	; 0x60
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3308      	adds	r3, #8
 800355e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003560:	633a      	str	r2, [r7, #48]	; 0x30
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e5      	bne.n	8003540 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003576:	2220      	movs	r2, #32
 8003578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800357c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	2b01      	cmp	r3, #1
 8003582:	d118      	bne.n	80035b6 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	60fb      	str	r3, [r7, #12]
   return(result);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f023 0310 	bic.w	r3, r3, #16
 8003598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800359a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	69b9      	ldr	r1, [r7, #24]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	617b      	str	r3, [r7, #20]
   return(result);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e6      	bne.n	8003584 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b8:	2200      	movs	r2, #0
 80035ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035ca:	4619      	mov	r1, r3
 80035cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80035ce:	f7ff fa61 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035d2:	e002      	b.n	80035da <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80035d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80035d6:	f7ff fa3f 	bl	8002a58 <HAL_UART_RxCpltCallback>
}
 80035da:	bf00      	nop
 80035dc:	3770      	adds	r7, #112	; 0x70
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d109      	bne.n	8003612 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	b29b      	uxth	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff fa42 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003610:	e002      	b.n	8003618 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff fa2a 	bl	8002a6c <HAL_UART_RxHalfCpltCallback>
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003632:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d109      	bne.n	800365e <UART_DMAError+0x3e>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b21      	cmp	r3, #33	; 0x21
 800364e:	d106      	bne.n	800365e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003658:	6978      	ldr	r0, [r7, #20]
 800365a:	f7ff fe4d 	bl	80032f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d109      	bne.n	8003680 <UART_DMAError+0x60>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b22      	cmp	r3, #34	; 0x22
 8003670:	d106      	bne.n	8003680 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2200      	movs	r2, #0
 8003676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff fe62 	bl	8003344 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003686:	f043 0210 	orr.w	r2, r3, #16
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003690:	6978      	ldr	r0, [r7, #20]
 8003692:	f7ff f9f5 	bl	8002a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <__libc_init_array>:
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	4d0d      	ldr	r5, [pc, #52]	; (80036d8 <__libc_init_array+0x38>)
 80036a4:	4c0d      	ldr	r4, [pc, #52]	; (80036dc <__libc_init_array+0x3c>)
 80036a6:	1b64      	subs	r4, r4, r5
 80036a8:	10a4      	asrs	r4, r4, #2
 80036aa:	2600      	movs	r6, #0
 80036ac:	42a6      	cmp	r6, r4
 80036ae:	d109      	bne.n	80036c4 <__libc_init_array+0x24>
 80036b0:	4d0b      	ldr	r5, [pc, #44]	; (80036e0 <__libc_init_array+0x40>)
 80036b2:	4c0c      	ldr	r4, [pc, #48]	; (80036e4 <__libc_init_array+0x44>)
 80036b4:	f000 f820 	bl	80036f8 <_init>
 80036b8:	1b64      	subs	r4, r4, r5
 80036ba:	10a4      	asrs	r4, r4, #2
 80036bc:	2600      	movs	r6, #0
 80036be:	42a6      	cmp	r6, r4
 80036c0:	d105      	bne.n	80036ce <__libc_init_array+0x2e>
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c8:	4798      	blx	r3
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7ee      	b.n	80036ac <__libc_init_array+0xc>
 80036ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d2:	4798      	blx	r3
 80036d4:	3601      	adds	r6, #1
 80036d6:	e7f2      	b.n	80036be <__libc_init_array+0x1e>
 80036d8:	08003748 	.word	0x08003748
 80036dc:	08003748 	.word	0x08003748
 80036e0:	08003748 	.word	0x08003748
 80036e4:	0800374c 	.word	0x0800374c

080036e8 <memset>:
 80036e8:	4402      	add	r2, r0
 80036ea:	4603      	mov	r3, r0
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d100      	bne.n	80036f2 <memset+0xa>
 80036f0:	4770      	bx	lr
 80036f2:	f803 1b01 	strb.w	r1, [r3], #1
 80036f6:	e7f9      	b.n	80036ec <memset+0x4>

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
