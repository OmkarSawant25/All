
UartReceive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f0  080037f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080037f0  080037f0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f0  080037f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080037f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000000ec  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad7a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a39  00000000  00000000  0002adbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb66  00000000  00000000  0002d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a918  00000000  00000000  0004a196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac3ea  00000000  00000000  00054aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00100e98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ccc  00000000  00000000  00100ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037a0 	.word	0x080037a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080037a0 	.word	0x080037a0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9f8 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8b8 	bl	8000348 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f898 	bl	800030c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f866 	bl	80002ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, TXstring, sizeof(TXstring), 100);
 80001e0:	2364      	movs	r3, #100	; 0x64
 80001e2:	2205      	movs	r2, #5
 80001e4:	4902      	ldr	r1, [pc, #8]	; (80001f0 <main+0x28>)
 80001e6:	4803      	ldr	r0, [pc, #12]	; (80001f4 <main+0x2c>)
 80001e8:	f002 faea 	bl	80027c0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	e7fe      	b.n	80001ec <main+0x24>
 80001ee:	bf00      	nop
 80001f0:	20000000 	.word	0x20000000
 80001f4:	20000030 	.word	0x20000030

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09e      	sub	sp, #120	; 0x78
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 fac2 	bl	8003790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	223c      	movs	r2, #60	; 0x3c
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fab4 	bl	8003790 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000228:	2301      	movs	r3, #1
 800022a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000248:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fe44 	bl	8000edc <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800025a:	f000 f899 	bl	8000390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fe6c 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000286:	f000 f883 	bl	8000390 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800028a:	2302      	movs	r3, #2
 800028c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000292:	463b      	mov	r3, r7
 8000294:	4618      	mov	r0, r3
 8000296:	f002 f895 	bl	80023c4 <HAL_RCCEx_PeriphCLKConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002a0:	f000 f876 	bl	8000390 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3778      	adds	r7, #120	; 0x78
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002b2:	4a15      	ldr	r2, [pc, #84]	; (8000308 <MX_USART2_UART_Init+0x5c>)
 80002b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002d2:	220c      	movs	r2, #12
 80002d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002d8:	2200      	movs	r2, #0
 80002da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_USART2_UART_Init+0x58>)
 80002f0:	f002 fa18 	bl	8002724 <HAL_UART_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002fa:	f000 f849 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000030 	.word	0x20000030
 8000308:	40004400 	.word	0x40004400

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_DMA_Init+0x38>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <MX_DMA_Init+0x38>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_DMA_Init+0x38>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	2010      	movs	r0, #16
 8000330:	f000 fa87 	bl	8000842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000334:	2010      	movs	r0, #16
 8000336:	f000 faa0 	bl	800087a <HAL_NVIC_EnableIRQ>

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MX_GPIO_Init+0x44>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <MX_GPIO_Init+0x44>)
 8000354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_GPIO_Init+0x44>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_GPIO_Init+0x44>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a08      	ldr	r2, [pc, #32]	; (800038c <MX_GPIO_Init+0x44>)
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_GPIO_Init+0x44>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]

}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000398:	e7fe      	b.n	8000398 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <HAL_MspInit+0x44>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <HAL_MspInit+0x44>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <HAL_MspInit+0x44>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <HAL_MspInit+0x44>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <HAL_MspInit+0x44>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_MspInit+0x44>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003d2:	2007      	movs	r0, #7
 80003d4:	f000 fa2a 	bl	800082c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000

080003e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08a      	sub	sp, #40	; 0x28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <HAL_UART_MspInit+0xd8>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d156      	bne.n	80004b4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000406:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <HAL_UART_MspInit+0xdc>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <HAL_UART_MspInit+0xdc>)
 800040c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <HAL_UART_MspInit+0xdc>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <HAL_UART_MspInit+0xdc>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a27      	ldr	r2, [pc, #156]	; (80004c0 <HAL_UART_MspInit+0xdc>)
 8000424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <HAL_UART_MspInit+0xdc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000436:	230c      	movs	r3, #12
 8000438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000442:	2303      	movs	r3, #3
 8000444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000446:	2307      	movs	r3, #7
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 fbc8 	bl	8000be8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 800045a:	4a1b      	ldr	r2, [pc, #108]	; (80004c8 <HAL_UART_MspInit+0xe4>)
 800045c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 8000460:	2200      	movs	r2, #0
 8000462:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 800047e:	2220      	movs	r2, #32
 8000480:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 8000484:	2200      	movs	r2, #0
 8000486:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000488:	480e      	ldr	r0, [pc, #56]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 800048a:	f000 fa10 	bl	80008ae <HAL_DMA_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000494:	f7ff ff7c 	bl	8000390 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 800049c:	675a      	str	r2, [r3, #116]	; 0x74
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <HAL_UART_MspInit+0xe0>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2026      	movs	r0, #38	; 0x26
 80004aa:	f000 f9ca 	bl	8000842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004ae:	2026      	movs	r0, #38	; 0x26
 80004b0:	f000 f9e3 	bl	800087a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004b4:	bf00      	nop
 80004b6:	3728      	adds	r7, #40	; 0x28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40004400 	.word	0x40004400
 80004c0:	40021000 	.word	0x40021000
 80004c4:	200000b8 	.word	0x200000b8
 80004c8:	4002006c 	.word	0x4002006c

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 f898 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <DMA1_Channel6_IRQHandler+0x10>)
 8000526:	f000 fa80 	bl	8000a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000b8 	.word	0x200000b8

08000534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <USART2_IRQHandler+0x10>)
 800053a:	f002 f9cb 	bl	80028d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000030 	.word	0x20000030

08000548 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <SystemInit+0x20>)
 800054e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <SystemInit+0x20>)
 8000554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f7ff ffea 	bl	8000548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000576:	490d      	ldr	r1, [pc, #52]	; (80005ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <LoopForever+0xe>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800058c:	4c0a      	ldr	r4, [pc, #40]	; (80005b8 <LoopForever+0x16>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f003 f8d5 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f7ff fe13 	bl	80001c8 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80005b0:	080037f8 	.word	0x080037f8
  ldr r2, =_sbss
 80005b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80005b8:	20000100 	.word	0x20000100

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_Init+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_Init+0x28>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f92b 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f808 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005dc:	f7ff fede 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40022000 	.word	0x40022000

080005ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x54>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f1 	udiv	r3, r3, r1
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f943 	bl	8000896 <HAL_SYSTICK_Config>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e00e      	b.n	8000638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d80a      	bhi.n	8000636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f90b 	bl	8000842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_InitTick+0x5c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	e000      	b.n	8000638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000008 	.word	0x20000008
 8000644:	20000010 	.word	0x20000010
 8000648:	2000000c 	.word	0x2000000c

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_IncTick+0x20>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x24>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_IncTick+0x24>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000010 	.word	0x20000010
 8000670:	200000fc 	.word	0x200000fc

08000674 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;  
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_GetTick+0x14>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	200000fc 	.word	0x200000fc

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <__NVIC_EnableIRQ+0x38>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f8:	d301      	bcc.n	80007fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00f      	b.n	800081e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <SysTick_Config+0x40>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000806:	210f      	movs	r1, #15
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f7ff ff8e 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SysTick_Config+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <SysTick_Config+0x40>)
 8000818:	2207      	movs	r2, #7
 800081a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff29 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000854:	f7ff ff3e 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff8e 	bl	8000780 <NVIC_EncodePriority>
 8000864:	4602      	mov	r2, r0
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff5d 	bl	800072c <__NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff31 	bl	80006f0 <__NVIC_EnableIRQ>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ffa2 	bl	80007e8 <SysTick_Config>
 80008a4:	4603      	mov	r3, r0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b084      	sub	sp, #16
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e037      	b.n	8000934 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2202      	movs	r2, #2
 80008c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80008de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80008e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 f92a 	bl	8000b70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
}  
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800094a:	2b02      	cmp	r3, #2
 800094c:	d008      	beq.n	8000960 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2204      	movs	r2, #4
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e020      	b.n	80009a2 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 020e 	bic.w	r2, r2, #14
 800096e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0201 	bic.w	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000988:	2101      	movs	r1, #1
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d005      	beq.n	80009d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2204      	movs	r2, #4
 80009c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e027      	b.n	8000a20 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 020e 	bic.w	r2, r2, #14
 80009de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0201 	bic.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f8:	2101      	movs	r1, #1
 80009fa:	fa01 f202 	lsl.w	r2, r1, r2
 80009fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	4798      	blx	r3
    } 
  }
  return status;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	2204      	movs	r2, #4
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d024      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x72>
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d01f      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0320 	and.w	r3, r3, #32
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d107      	bne.n	8000a7a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 0204 	bic.w	r2, r2, #4
 8000a78:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	2104      	movs	r1, #4
 8000a84:	fa01 f202 	lsl.w	r2, r1, r2
 8000a88:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d06a      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000a9a:	e065      	b.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d02c      	beq.n	8000b06 <HAL_DMA_IRQHandler+0xdc>
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d027      	beq.n	8000b06 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10b      	bne.n	8000adc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 020a 	bic.w	r2, r2, #10
 8000ad2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d035      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000b04:	e030      	b.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d028      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d023      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f022 020e 	bic.w	r2, r2, #14
 8000b2e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2201      	movs	r2, #1
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	4798      	blx	r3
    }
  }
}  
 8000b66:	e7ff      	b.n	8000b68 <HAL_DMA_IRQHandler+0x13e>
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <DMA_CalcBaseAndBitshift+0x60>)
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d80f      	bhi.n	8000ba4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <DMA_CalcBaseAndBitshift+0x64>)
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8000b90:	fba2 2303 	umull	r2, r3, r2, r3
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	009a      	lsls	r2, r3, #2
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <DMA_CalcBaseAndBitshift+0x6c>)
 8000ba0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000ba2:	e00e      	b.n	8000bc2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <DMA_CalcBaseAndBitshift+0x70>)
 8000bac:	4413      	add	r3, r2
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	009a      	lsls	r2, r3, #2
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <DMA_CalcBaseAndBitshift+0x74>)
 8000bc0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40020407 	.word	0x40020407
 8000bd4:	bffdfff8 	.word	0xbffdfff8
 8000bd8:	cccccccd 	.word	0xcccccccd
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	bffdfbf8 	.word	0xbffdfbf8
 8000be4:	40020400 	.word	0x40020400

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e154      	b.n	8000ea2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8146 	beq.w	8000e9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d005      	beq.n	8000c28 <HAL_GPIO_Init+0x40>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	f003 0201 	and.w	r2, r3, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d017      	beq.n	8000cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d123      	bne.n	8000d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	6939      	ldr	r1, [r7, #16]
 8000d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0203 	and.w	r2, r3, #3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80a0 	beq.w	8000e9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a57      	ldr	r2, [pc, #348]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d74:	4a53      	ldr	r2, [pc, #332]	; (8000ec4 <HAL_GPIO_Init+0x2dc>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d9e:	d019      	beq.n	8000dd4 <HAL_GPIO_Init+0x1ec>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d013      	beq.n	8000dd0 <HAL_GPIO_Init+0x1e8>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <HAL_GPIO_Init+0x2e4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_Init+0x1e4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a47      	ldr	r2, [pc, #284]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_Init+0x1dc>
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	e008      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	e006      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e004      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e002      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de6:	4937      	ldr	r1, [pc, #220]	; (8000ec4 <HAL_GPIO_Init+0x2dc>)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e18:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f47f aea3 	bne.w	8000bf8 <HAL_GPIO_Init+0x10>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	48000c00 	.word	0x48000c00
 8000ed4:	48001000 	.word	0x48001000
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f001 b823 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 817d 	beq.w	8001212 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f18:	4bbc      	ldr	r3, [pc, #752]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f24:	4bb9      	ldr	r3, [pc, #740]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d15c      	bne.n	8000fea <HAL_RCC_OscConfig+0x10e>
 8000f30:	4bb6      	ldr	r3, [pc, #728]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d155      	bne.n	8000fea <HAL_RCC_OscConfig+0x10e>
 8000f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f42:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	095b      	lsrs	r3, r3, #5
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d102      	bne.n	8000f70 <HAL_RCC_OscConfig+0x94>
 8000f6a:	4ba8      	ldr	r3, [pc, #672]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	e015      	b.n	8000f9c <HAL_RCC_OscConfig+0xc0>
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f88:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f98:	4b9c      	ldr	r3, [pc, #624]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000fa4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fa8:	fa92 f2a2 	rbit	r2, r2
 8000fac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000fb0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fb4:	fab2 f282 	clz	r2, r2
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	f042 0220 	orr.w	r2, r2, #32
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f002 021f 	and.w	r2, r2, #31
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 811f 	beq.w	8001210 <HAL_RCC_OscConfig+0x334>
 8000fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 8116 	bne.w	8001210 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f000 bfaf 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x12e>
 8000ffc:	4b83      	ldr	r3, [pc, #524]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a82      	ldr	r2, [pc, #520]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e036      	b.n	8001078 <HAL_RCC_OscConfig+0x19c>
 800100a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x158>
 800101a:	4b7c      	ldr	r3, [pc, #496]	; (800120c <HAL_RCC_OscConfig+0x330>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a7b      	ldr	r2, [pc, #492]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b79      	ldr	r3, [pc, #484]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a78      	ldr	r2, [pc, #480]	; (800120c <HAL_RCC_OscConfig+0x330>)
 800102c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e021      	b.n	8001078 <HAL_RCC_OscConfig+0x19c>
 8001034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001038:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x184>
 8001046:	4b71      	ldr	r3, [pc, #452]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a70      	ldr	r2, [pc, #448]	; (800120c <HAL_RCC_OscConfig+0x330>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b6e      	ldr	r3, [pc, #440]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a6d      	ldr	r2, [pc, #436]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0x19c>
 8001060:	4b6a      	ldr	r3, [pc, #424]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a69      	ldr	r2, [pc, #420]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b67      	ldr	r3, [pc, #412]	; (800120c <HAL_RCC_OscConfig+0x330>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a66      	ldr	r2, [pc, #408]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001078:	4b64      	ldr	r3, [pc, #400]	; (800120c <HAL_RCC_OscConfig+0x330>)
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	f023 020f 	bic.w	r2, r3, #15
 8001080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	495f      	ldr	r1, [pc, #380]	; (800120c <HAL_RCC_OscConfig+0x330>)
 800108e:	4313      	orrs	r3, r2
 8001090:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d059      	beq.n	8001156 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fae7 	bl	8000674 <HAL_GetTick>
 80010a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e00a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fae2 	bl	8000674 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b64      	cmp	r3, #100	; 0x64
 80010ba:	d902      	bls.n	80010c2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	f000 bf43 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
 80010c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	095b      	lsrs	r3, r3, #5
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d102      	bne.n	80010f4 <HAL_RCC_OscConfig+0x218>
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <HAL_RCC_OscConfig+0x330>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	e015      	b.n	8001120 <HAL_RCC_OscConfig+0x244>
 80010f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001110:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_RCC_OscConfig+0x330>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001124:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001128:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800112c:	fa92 f2a2 	rbit	r2, r2
 8001130:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001134:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001138:	fab2 f282 	clz	r2, r2
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f042 0220 	orr.w	r2, r2, #32
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	f002 021f 	and.w	r2, r2, #31
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0ab      	beq.n	80010ac <HAL_RCC_OscConfig+0x1d0>
 8001154:	e05d      	b.n	8001212 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fa8d 	bl	8000674 <HAL_GetTick>
 800115a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e00a      	b.n	8001176 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fa88 	bl	8000674 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b64      	cmp	r3, #100	; 0x64
 800116e:	d902      	bls.n	8001176 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	f000 bee9 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
 8001176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800118a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2cc>
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_RCC_OscConfig+0x330>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	e015      	b.n	80011d4 <HAL_RCC_OscConfig+0x2f8>
 80011a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_RCC_OscConfig+0x330>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011e0:	fa92 f2a2 	rbit	r2, r2
 80011e4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011ec:	fab2 f282 	clz	r2, r2
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ab      	bne.n	8001160 <HAL_RCC_OscConfig+0x284>
 8001208:	e003      	b.n	8001212 <HAL_RCC_OscConfig+0x336>
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 817d 	beq.w	8001522 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001228:	4ba6      	ldr	r3, [pc, #664]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001234:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d172      	bne.n	8001326 <HAL_RCC_OscConfig+0x44a>
 8001240:	4ba0      	ldr	r3, [pc, #640]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d16c      	bne.n	8001326 <HAL_RCC_OscConfig+0x44a>
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800125e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	095b      	lsrs	r3, r3, #5
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <HAL_RCC_OscConfig+0x3a0>
 8001276:	4b93      	ldr	r3, [pc, #588]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	e013      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c8>
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001294:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2202      	movs	r2, #2
 80012a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80012aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012b6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	f002 021f 	and.w	r2, r2, #31
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00a      	beq.n	80012ec <HAL_RCC_OscConfig+0x410>
 80012d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d002      	beq.n	80012ec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f000 be2e 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b75      	ldr	r3, [pc, #468]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	21f8      	movs	r1, #248	; 0xf8
 8001302:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800130a:	fa91 f1a1 	rbit	r1, r1
 800130e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001312:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001316:	fab1 f181 	clz	r1, r1
 800131a:	b2c9      	uxtb	r1, r1
 800131c:	408b      	lsls	r3, r1
 800131e:	4969      	ldr	r1, [pc, #420]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001324:	e0fd      	b.n	8001522 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8088 	beq.w	8001448 <HAL_RCC_OscConfig+0x56c>
 8001338:	2301      	movs	r3, #1
 800133a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800134a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001358:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	461a      	mov	r2, r3
 8001360:	2301      	movs	r3, #1
 8001362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff f986 	bl	8000674 <HAL_GetTick>
 8001368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff f981 	bl	8000674 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d902      	bls.n	8001384 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	f000 bde2 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001396:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	095b      	lsrs	r3, r3, #5
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d102      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4d8>
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	e013      	b.n	80013dc <HAL_RCC_OscConfig+0x500>
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	2202      	movs	r2, #2
 80013de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f042 0220 	orr.w	r2, r2, #32
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	f002 021f 	and.w	r2, r2, #31
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0af      	beq.n	800136e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	21f8      	movs	r1, #248	; 0xf8
 8001424:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800142c:	fa91 f1a1 	rbit	r1, r1
 8001430:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001434:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001438:	fab1 f181 	clz	r1, r1
 800143c:	b2c9      	uxtb	r1, r1
 800143e:	408b      	lsls	r3, r1
 8001440:	4920      	ldr	r1, [pc, #128]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
 8001446:	e06c      	b.n	8001522 <HAL_RCC_OscConfig+0x646>
 8001448:	2301      	movs	r3, #1
 800144a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800145a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001468:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	461a      	mov	r2, r3
 8001470:	2300      	movs	r3, #0
 8001472:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff f8fe 	bl	8000674 <HAL_GetTick>
 8001478:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147c:	e00a      	b.n	8001494 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff f8f9 	bl	8000674 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d902      	bls.n	8001494 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	f000 bd5a 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d104      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5ec>
 80014be:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <HAL_RCC_OscConfig+0x5e8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0x614>
 80014c4:	40021000 	.word	0x40021000
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014ec:	4bc8      	ldr	r3, [pc, #800]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	2202      	movs	r2, #2
 80014f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014fa:	fa92 f2a2 	rbit	r2, r2
 80014fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001502:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001506:	fab2 f282 	clz	r2, r2
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	f042 0220 	orr.w	r2, r2, #32
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	f002 021f 	and.w	r2, r2, #31
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1ad      	bne.n	800147e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8110 	beq.w	8001758 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d079      	beq.n	800163c <HAL_RCC_OscConfig+0x760>
 8001548:	2301      	movs	r3, #1
 800154a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800155a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	4bab      	ldr	r3, [pc, #684]	; (8001814 <HAL_RCC_OscConfig+0x938>)
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	461a      	mov	r2, r3
 800156e:	2301      	movs	r3, #1
 8001570:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff f87f 	bl	8000674 <HAL_GetTick>
 8001576:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff f87a 	bl	8000674 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d902      	bls.n	8001592 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	f000 bcdb 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ec:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 80015ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015f8:	2102      	movs	r1, #2
 80015fa:	6019      	str	r1, [r3, #0]
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fa93 f1a3 	rbit	r1, r3
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001612:	6019      	str	r1, [r3, #0]
  return result;
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0a0      	beq.n	800157c <HAL_RCC_OscConfig+0x6a0>
 800163a:	e08d      	b.n	8001758 <HAL_RCC_OscConfig+0x87c>
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800165e:	601a      	str	r2, [r3, #0]
  return result;
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001668:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x938>)
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	461a      	mov	r2, r3
 800167a:	2300      	movs	r3, #0
 800167c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7fe fff9 	bl	8000674 <HAL_GetTick>
 8001682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7fe fff4 	bl	8000674 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d902      	bls.n	800169e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	f000 bc55 	b.w	8001f48 <HAL_RCC_OscConfig+0x106c>
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016a6:	2202      	movs	r2, #2
 80016a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	fa93 f2a3 	rbit	r2, r3
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ca:	2202      	movs	r2, #2
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001708:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170a:	4b41      	ldr	r3, [pc, #260]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 800170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001716:	2102      	movs	r1, #2
 8001718:	6019      	str	r1, [r3, #0]
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f1a3 	rbit	r1, r3
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001730:	6019      	str	r1, [r3, #0]
  return result;
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d197      	bne.n	8001688 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 81a1 	beq.w	8001ab0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d116      	bne.n	80017ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	4a22      	ldr	r2, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	61d3      	str	r3, [r2, #28]
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_RCC_OscConfig+0x93c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d11a      	bne.n	80017f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_RCC_OscConfig+0x93c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HAL_RCC_OscConfig+0x93c>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7fe ff55 	bl	8000674 <HAL_GetTick>
 80017ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	e009      	b.n	80017e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d0:	f7fe ff50 	bl	8000674 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b64      	cmp	r3, #100	; 0x64
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e3b1      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_RCC_OscConfig+0x93c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ef      	beq.n	80017d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10d      	bne.n	800181c <HAL_RCC_OscConfig+0x940>
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a02      	ldr	r2, [pc, #8]	; (8001810 <HAL_RCC_OscConfig+0x934>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	e03c      	b.n	8001888 <HAL_RCC_OscConfig+0x9ac>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	10908120 	.word	0x10908120
 8001818:	40007000 	.word	0x40007000
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x96a>
 800182c:	4bc1      	ldr	r3, [pc, #772]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4ac0      	ldr	r2, [pc, #768]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	4bbe      	ldr	r3, [pc, #760]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4abd      	ldr	r2, [pc, #756]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e020      	b.n	8001888 <HAL_RCC_OscConfig+0x9ac>
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x994>
 8001856:	4bb7      	ldr	r3, [pc, #732]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4ab6      	ldr	r2, [pc, #728]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4bb4      	ldr	r3, [pc, #720]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4ab3      	ldr	r2, [pc, #716]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x9ac>
 8001870:	4bb0      	ldr	r3, [pc, #704]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4aaf      	ldr	r2, [pc, #700]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	4bad      	ldr	r3, [pc, #692]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4aac      	ldr	r2, [pc, #688]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001882:	f023 0304 	bic.w	r3, r3, #4
 8001886:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8081 	beq.w	800199c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7fe feeb 	bl	8000674 <HAL_GetTick>
 800189e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7fe fee6 	bl	8000674 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e345      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018c4:	2202      	movs	r2, #2
 80018c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fa93 f2a3 	rbit	r2, r3
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001902:	601a      	str	r2, [r3, #0]
  return result;
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800190c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	095b      	lsrs	r3, r3, #5
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0xa4c>
 8001922:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	e013      	b.n	8001950 <HAL_RCC_OscConfig+0xa74>
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001930:	2202      	movs	r2, #2
 8001932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	fa93 f2a3 	rbit	r2, r3
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001954:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001958:	2102      	movs	r1, #2
 800195a:	6011      	str	r1, [r2, #0]
 800195c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001960:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	fa92 f1a2 	rbit	r1, r2
 800196a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800196e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001972:	6011      	str	r1, [r2, #0]
  return result;
 8001974:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001978:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f002 021f 	and.w	r2, r2, #31
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d084      	beq.n	80018a4 <HAL_RCC_OscConfig+0x9c8>
 800199a:	e07f      	b.n	8001a9c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7fe fe6a 	bl	8000674 <HAL_GetTick>
 80019a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00b      	b.n	80019be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7fe fe65 	bl	8000674 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e2c4      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019c6:	2202      	movs	r2, #2
 80019c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a04:	601a      	str	r2, [r3, #0]
  return result;
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_OscConfig+0xb4e>
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	e013      	b.n	8001a52 <HAL_RCC_OscConfig+0xb76>
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a56:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	6011      	str	r1, [r2, #0]
 8001a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fa92 f1a2 	rbit	r1, r2
 8001a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a74:	6011      	str	r1, [r2, #0]
  return result;
 8001a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	fab2 f282 	clz	r2, r2
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	f002 021f 	and.w	r2, r2, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d184      	bne.n	80019a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a9c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8242 	beq.w	8001f46 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_RCC_OscConfig+0xc58>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	f000 8213 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	f040 8162 	bne.w	8001da6 <HAL_RCC_OscConfig+0xeca>
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b06:	601a      	str	r2, [r3, #0]
  return result;
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	461a      	mov	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7fe fda4 	bl	8000674 <HAL_GetTick>
 8001b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	e00c      	b.n	8001b4c <HAL_RCC_OscConfig+0xc70>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe fd9c 	bl	8000674 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1fd      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b70:	601a      	str	r2, [r3, #0]
  return result;
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <HAL_RCC_OscConfig+0xcba>
 8001b90:	4bb0      	ldr	r3, [pc, #704]	; (8001e54 <HAL_RCC_OscConfig+0xf78>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e027      	b.n	8001be6 <HAL_RCC_OscConfig+0xd0a>
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	4b9c      	ldr	r3, [pc, #624]	; (8001e54 <HAL_RCC_OscConfig+0xf78>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf2:	6011      	str	r1, [r2, #0]
 8001bf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	fa92 f1a2 	rbit	r1, r2
 8001c02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c06:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c0a:	6011      	str	r1, [r2, #0]
  return result;
 8001c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c10:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	fab2 f282 	clz	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f042 0220 	orr.w	r2, r2, #32
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f002 021f 	and.w	r2, r2, #31
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d182      	bne.n	8001b38 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c32:	4b88      	ldr	r3, [pc, #544]	; (8001e54 <HAL_RCC_OscConfig+0xf78>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	430b      	orrs	r3, r1
 8001c54:	497f      	ldr	r1, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0xf78>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c7e:	601a      	str	r2, [r3, #0]
  return result;
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c88:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fce8 	bl	8000674 <HAL_GetTick>
 8001ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fce3 	bl	8000674 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e144      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f2a3 	rbit	r2, r3
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ce2:	601a      	str	r2, [r3, #0]
  return result;
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_OscConfig+0xe2c>
 8001d02:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <HAL_RCC_OscConfig+0xf78>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e027      	b.n	8001d58 <HAL_RCC_OscConfig+0xe7c>
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0xf78>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d64:	6011      	str	r1, [r2, #0]
 8001d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fa92 f1a2 	rbit	r1, r2
 8001d74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d78:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d7c:	6011      	str	r1, [r2, #0]
  return result;
 8001d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d82:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f002 021f 	and.w	r2, r2, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d082      	beq.n	8001caa <HAL_RCC_OscConfig+0xdce>
 8001da4:	e0cf      	b.n	8001f46 <HAL_RCC_OscConfig+0x106a>
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001dae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dd4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	461a      	mov	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fc42 	bl	8000674 <HAL_GetTick>
 8001df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	e009      	b.n	8001e0a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fc3d 	bl	8000674 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e09e      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e2e:	601a      	str	r2, [r3, #0]
  return result;
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d104      	bne.n	8001e58 <HAL_RCC_OscConfig+0xf7c>
 8001e4e:	4b01      	ldr	r3, [pc, #4]	; (8001e54 <HAL_RCC_OscConfig+0xf78>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e029      	b.n	8001ea8 <HAL_RCC_OscConfig+0xfcc>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_RCC_OscConfig+0x1078>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001eb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	fa92 f1a2 	rbit	r1, r2
 8001ec4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ecc:	6011      	str	r1, [r2, #0]
  return result;
 8001ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d180      	bne.n	8001df6 <HAL_RCC_OscConfig+0xf1a>
 8001ef4:	e027      	b.n	8001f46 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e01e      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_OscConfig+0x1078>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b09e      	sub	sp, #120	; 0x78
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e162      	b.n	8002236 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b90      	ldr	r3, [pc, #576]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b8d      	ldr	r3, [pc, #564]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	498b      	ldr	r1, [pc, #556]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e14a      	b.n	8002236 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b82      	ldr	r3, [pc, #520]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	497f      	ldr	r1, [pc, #508]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80dc 	beq.w	8002184 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d13c      	bne.n	800204e <HAL_RCC_ClockConfig+0xf6>
 8001fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xa6>
 8001ff8:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e00f      	b.n	800201e <HAL_RCC_ClockConfig+0xc6>
 8001ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002002:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	667b      	str	r3, [r7, #100]	; 0x64
 800200c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002010:	663b      	str	r3, [r7, #96]	; 0x60
 8002012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002022:	65ba      	str	r2, [r7, #88]	; 0x58
 8002024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002026:	fa92 f2a2 	rbit	r2, r2
 800202a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800202c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800202e:	fab2 f282 	clz	r2, r2
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f042 0220 	orr.w	r2, r2, #32
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	f002 021f 	and.w	r2, r2, #31
 800203e:	2101      	movs	r1, #1
 8002040:	fa01 f202 	lsl.w	r2, r1, r2
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d17b      	bne.n	8002142 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0f3      	b.n	8002236 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d13c      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x178>
 8002056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d102      	bne.n	8002080 <HAL_RCC_ClockConfig+0x128>
 800207a:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	e00f      	b.n	80020a0 <HAL_RCC_ClockConfig+0x148>
 8002080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	647b      	str	r3, [r7, #68]	; 0x44
 800208e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002092:	643b      	str	r3, [r7, #64]	; 0x40
 8002094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80020a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a8:	fa92 f2a2 	rbit	r2, r2
 80020ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b0:	fab2 f282 	clz	r2, r2
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f042 0220 	orr.w	r2, r2, #32
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	f002 021f 	and.w	r2, r2, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d13a      	bne.n	8002142 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0b2      	b.n	8002236 <HAL_RCC_ClockConfig+0x2de>
 80020d0:	2302      	movs	r3, #2
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x1a0>
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e00d      	b.n	8002114 <HAL_RCC_ClockConfig+0x1bc>
 80020f8:	2302      	movs	r3, #2
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2202      	movs	r2, #2
 8002116:	61ba      	str	r2, [r7, #24]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	617a      	str	r2, [r7, #20]
  return result;
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	fab2 f282 	clz	r2, r2
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f042 0220 	orr.w	r2, r2, #32
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	f002 021f 	and.w	r2, r2, #31
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e079      	b.n	8002236 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	491a      	ldr	r1, [pc, #104]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7fe fa8e 	bl	8000674 <HAL_GetTick>
 8002158:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7fe fa8a 	bl	8000674 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e061      	b.n	8002236 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_ClockConfig+0x260>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d214      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4906      	ldr	r1, [pc, #24]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e040      	b.n	8002236 <HAL_RCC_ClockConfig+0x2de>
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_ClockConfig+0x2e8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	491a      	ldr	r1, [pc, #104]	; (8002240 <HAL_RCC_ClockConfig+0x2e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_RCC_ClockConfig+0x2e8>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4912      	ldr	r1, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x2e8>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021fa:	f000 f829 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 80021fe:	4601      	mov	r1, r0
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCC_ClockConfig+0x2e8>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002208:	22f0      	movs	r2, #240	; 0xf0
 800220a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	fa92 f2a2 	rbit	r2, r2
 8002212:	60fa      	str	r2, [r7, #12]
  return result;
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	fab2 f282 	clz	r2, r2
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	40d3      	lsrs	r3, r2
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x2ec>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	fa21 f303 	lsr.w	r3, r1, r3
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_RCC_ClockConfig+0x2f0>)
 8002228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCC_ClockConfig+0x2f4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f9dc 	bl	80005ec <HAL_InitTick>
  
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3778      	adds	r7, #120	; 0x78
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	080037b8 	.word	0x080037b8
 8002248:	20000008 	.word	0x20000008
 800224c:	2000000c 	.word	0x2000000c

08002250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b08b      	sub	sp, #44	; 0x2c
 8002254:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b04      	cmp	r3, #4
 8002278:	d002      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x30>
 800227a:	2b08      	cmp	r3, #8
 800227c:	d003      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0x36>
 800227e:	e03c      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002282:	623b      	str	r3, [r7, #32]
      break;
 8002284:	e03c      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800228c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002290:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	fa92 f2a2 	rbit	r2, r2
 8002298:	607a      	str	r2, [r7, #4]
  return result;
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	fab2 f282 	clz	r2, r2
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	40d3      	lsrs	r3, r2
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	220f      	movs	r2, #15
 80022b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	60fa      	str	r2, [r7, #12]
  return result;
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	40d3      	lsrs	r3, r2
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	e004      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	623b      	str	r3, [r7, #32]
      break;
 80022f8:	e002      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022fc:	623b      	str	r3, [r7, #32]
      break;
 80022fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002300:	6a3b      	ldr	r3, [r7, #32]
}
 8002302:	4618      	mov	r0, r3
 8002304:	372c      	adds	r7, #44	; 0x2c
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	007a1200 	.word	0x007a1200
 8002318:	080037d0 	.word	0x080037d0
 800231c:	080037e0 	.word	0x080037e0
 8002320:	003d0900 	.word	0x003d0900

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_RCC_GetHCLKFreq+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000008 	.word	0x20000008

0800233c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002342:	f7ff ffef 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002346:	4601      	mov	r1, r0
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002350:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002354:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	603a      	str	r2, [r7, #0]
  return result;
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	40d3      	lsrs	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <HAL_RCC_GetPCLK1Freq+0x40>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	080037c8 	.word	0x080037c8

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002386:	f7ff ffcd 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 800238a:	4601      	mov	r1, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002394:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002398:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	fa92 f2a2 	rbit	r2, r2
 80023a0:	603a      	str	r2, [r7, #0]
  return result;
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	fab2 f282 	clz	r2, r2
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	40d3      	lsrs	r3, r2
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	080037c8 	.word	0x080037c8

080023c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b092      	sub	sp, #72	; 0x48
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80d4 	beq.w	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e8:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10e      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4a4a      	ldr	r2, [pc, #296]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fe:	61d3      	str	r3, [r2, #28]
 8002400:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a41      	ldr	r2, [pc, #260]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe f923 	bl	8000674 <HAL_GetTick>
 800242e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe f91f 	bl	8000674 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e169      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8084 	beq.w	800256a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800246c:	429a      	cmp	r2, r3
 800246e:	d07c      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002470:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	461a      	mov	r2, r3
 800249a:	2301      	movs	r3, #1
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	2300      	movs	r3, #0
 80024c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04b      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe f8cf 	bl	8000674 <HAL_GetTick>
 80024d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe f8cb 	bl	8000674 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e113      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	2302      	movs	r3, #2
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	61fb      	str	r3, [r7, #28]
  return result;
 8002508:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d108      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800251e:	4b01      	ldr	r3, [pc, #4]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	e00d      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
 800252c:	10908100 	.word	0x10908100
 8002530:	2302      	movs	r3, #2
 8002532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	4b78      	ldr	r3, [pc, #480]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2202      	movs	r2, #2
 8002542:	613a      	str	r2, [r7, #16]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	fa92 f2a2 	rbit	r2, r2
 800254a:	60fa      	str	r2, [r7, #12]
  return result;
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0b7      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	496a      	ldr	r1, [pc, #424]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800257c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b66      	ldr	r3, [pc, #408]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	4a65      	ldr	r2, [pc, #404]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800259c:	4b60      	ldr	r3, [pc, #384]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f023 0203 	bic.w	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	495d      	ldr	r1, [pc, #372]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ba:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4956      	ldr	r1, [pc, #344]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025d8:	4b51      	ldr	r3, [pc, #324]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	494e      	ldr	r1, [pc, #312]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f6:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f023 0210 	bic.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4947      	ldr	r1, [pc, #284]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002614:	4b42      	ldr	r3, [pc, #264]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	493f      	ldr	r1, [pc, #252]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f023 0220 	bic.w	r2, r3, #32
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4938      	ldr	r1, [pc, #224]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002650:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	4930      	ldr	r1, [pc, #192]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4929      	ldr	r1, [pc, #164]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4921      	ldr	r1, [pc, #132]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	491a      	ldr	r1, [pc, #104]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	4912      	ldr	r1, [pc, #72]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	490b      	ldr	r1, [pc, #44]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3748      	adds	r7, #72	; 0x48
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e040      	b.n	80027b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd fe4c 	bl	80003e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fbbc 	bl	8002ee0 <UART_SetConfig>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e022      	b.n	80027b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fd84 	bl	8003288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fe0b 	bl	80033cc <UART_CheckIdleState>
 80027b6:	4603      	mov	r3, r0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d178      	bne.n	80028ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_UART_Transmit+0x24>
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e071      	b.n	80028cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2221      	movs	r2, #33	; 0x21
 80027f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f6:	f7fd ff3d 	bl	8000674 <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002814:	d108      	bne.n	8002828 <HAL_UART_Transmit+0x68>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e003      	b.n	8002830 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002830:	e030      	b.n	8002894 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fe6d 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e03c      	b.n	80028cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	881a      	ldrh	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002864:	b292      	uxth	r2, r2
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	3302      	adds	r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	e008      	b.n	8002882 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b292      	uxth	r2, r2
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1c8      	bne.n	8002832 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2200      	movs	r2, #0
 80028a8:	2140      	movs	r1, #64	; 0x40
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fe36 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e005      	b.n	80028cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0ba      	sub	sp, #232	; 0xe8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80028fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002902:	4013      	ands	r3, r2
 8002904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d115      	bne.n	800293c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 82ab 	beq.w	8002e88 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
      }
      return;
 800293a:	e2a5      	b.n	8002e88 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800293c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8117 	beq.w	8002b74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002952:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002956:	4b85      	ldr	r3, [pc, #532]	; (8002b6c <HAL_UART_IRQHandler+0x298>)
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 810a 	beq.w	8002b74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d011      	beq.n	8002990 <HAL_UART_IRQHandler+0xbc>
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d011      	beq.n	80029c0 <HAL_UART_IRQHandler+0xec>
 800299c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2202      	movs	r2, #2
 80029ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d011      	beq.n	80029f0 <HAL_UART_IRQHandler+0x11c>
 80029cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d017      	beq.n	8002a2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a22:	f043 0208 	orr.w	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d012      	beq.n	8002a5e <HAL_UART_IRQHandler+0x18a>
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00c      	beq.n	8002a5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8211 	beq.w	8002e8c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d005      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04f      	beq.n	8002b56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fd97 	bl	80035ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d141      	bne.n	8002b4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3308      	adds	r3, #8
 8002af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002af6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1d9      	bne.n	8002aca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b22:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_UART_IRQHandler+0x29c>)
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd ff3f 	bl	80009ae <HAL_DMA_Abort_IT>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d017      	beq.n	8002b66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b40:	4610      	mov	r0, r2
 8002b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	e00f      	b.n	8002b66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9b4 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	e00b      	b.n	8002b66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f9b0 	bl	8002eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	e007      	b.n	8002b66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f9ac 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002b64:	e192      	b.n	8002e8c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b66:	bf00      	nop
    return;
 8002b68:	e190      	b.n	8002e8c <HAL_UART_IRQHandler+0x5b8>
 8002b6a:	bf00      	nop
 8002b6c:	04000120 	.word	0x04000120
 8002b70:	080036b3 	.word	0x080036b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	f040 814b 	bne.w	8002e14 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8144 	beq.w	8002e14 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 813d 	beq.w	8002e14 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	f040 80b5 	bne.w	8002d1c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8164 	beq.w	8002e90 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	f080 815c 	bcs.w	8002e90 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1da      	bne.n	8002bee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c42:	e853 3f00 	ldrex	r3, [r3]
 8002c46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3308      	adds	r3, #8
 8002c58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e1      	bne.n	8002c38 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3308      	adds	r3, #8
 8002c7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3308      	adds	r3, #8
 8002c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e3      	bne.n	8002c74 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cca:	f023 0310 	bic.w	r3, r3, #16
 8002cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cde:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ce2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e4      	bne.n	8002cba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fe21 	bl	800093c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f8d7 	bl	8002ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d1a:	e0b9      	b.n	8002e90 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80ab 	beq.w	8002e94 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a6 	beq.w	8002e94 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e4      	bne.n	8002d48 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3308      	adds	r3, #8
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002da2:	633a      	str	r2, [r7, #48]	; 0x30
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e3      	bne.n	8002d7e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0310 	bic.w	r3, r3, #16
 8002dde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df0:	69b9      	ldr	r1, [r7, #24]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	e841 2300 	strex	r3, r2, [r1]
 8002df8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e4      	bne.n	8002dca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f85b 	bl	8002ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e12:	e03f      	b.n	8002e94 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00e      	beq.n	8002e3e <HAL_UART_IRQHandler+0x56a>
 8002e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fc7b 	bl	8003732 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e3c:	e02d      	b.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01c      	beq.n	8002e98 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
    }
    return;
 8002e66:	e017      	b.n	8002e98 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d012      	beq.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fc2c 	bl	80036de <UART_EndTransmit_IT>
    return;
 8002e86:	e008      	b.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e88:	bf00      	nop
 8002e8a:	e006      	b.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e8c:	bf00      	nop
 8002e8e:	e004      	b.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e90:	bf00      	nop
 8002e92:	e002      	b.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e98:	bf00      	nop
  }

}
 8002e9a:	37e8      	adds	r7, #232	; 0xe8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f0e:	f023 030c 	bic.w	r3, r3, #12
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4aa7      	ldr	r2, [pc, #668]	; (80031f8 <UART_SetConfig+0x318>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d120      	bne.n	8002fa2 <UART_SetConfig+0xc2>
 8002f60:	4ba6      	ldr	r3, [pc, #664]	; (80031fc <UART_SetConfig+0x31c>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d817      	bhi.n	8002f9c <UART_SetConfig+0xbc>
 8002f6c:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <UART_SetConfig+0x94>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f91 	.word	0x08002f91
 8002f7c:	08002f97 	.word	0x08002f97
 8002f80:	08002f8b 	.word	0x08002f8b
 8002f84:	2301      	movs	r3, #1
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e0b5      	b.n	80030f6 <UART_SetConfig+0x216>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e0b2      	b.n	80030f6 <UART_SetConfig+0x216>
 8002f90:	2304      	movs	r3, #4
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e0af      	b.n	80030f6 <UART_SetConfig+0x216>
 8002f96:	2308      	movs	r3, #8
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e0ac      	b.n	80030f6 <UART_SetConfig+0x216>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e0a9      	b.n	80030f6 <UART_SetConfig+0x216>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a96      	ldr	r2, [pc, #600]	; (8003200 <UART_SetConfig+0x320>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d124      	bne.n	8002ff6 <UART_SetConfig+0x116>
 8002fac:	4b93      	ldr	r3, [pc, #588]	; (80031fc <UART_SetConfig+0x31c>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb8:	d011      	beq.n	8002fde <UART_SetConfig+0xfe>
 8002fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fbe:	d817      	bhi.n	8002ff0 <UART_SetConfig+0x110>
 8002fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fc4:	d011      	beq.n	8002fea <UART_SetConfig+0x10a>
 8002fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fca:	d811      	bhi.n	8002ff0 <UART_SetConfig+0x110>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <UART_SetConfig+0xf8>
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d006      	beq.n	8002fe4 <UART_SetConfig+0x104>
 8002fd6:	e00b      	b.n	8002ff0 <UART_SetConfig+0x110>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e08b      	b.n	80030f6 <UART_SetConfig+0x216>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e088      	b.n	80030f6 <UART_SetConfig+0x216>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e085      	b.n	80030f6 <UART_SetConfig+0x216>
 8002fea:	2308      	movs	r3, #8
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e082      	b.n	80030f6 <UART_SetConfig+0x216>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e07f      	b.n	80030f6 <UART_SetConfig+0x216>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a82      	ldr	r2, [pc, #520]	; (8003204 <UART_SetConfig+0x324>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d124      	bne.n	800304a <UART_SetConfig+0x16a>
 8003000:	4b7e      	ldr	r3, [pc, #504]	; (80031fc <UART_SetConfig+0x31c>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003008:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800300c:	d011      	beq.n	8003032 <UART_SetConfig+0x152>
 800300e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003012:	d817      	bhi.n	8003044 <UART_SetConfig+0x164>
 8003014:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003018:	d011      	beq.n	800303e <UART_SetConfig+0x15e>
 800301a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800301e:	d811      	bhi.n	8003044 <UART_SetConfig+0x164>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <UART_SetConfig+0x14c>
 8003024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003028:	d006      	beq.n	8003038 <UART_SetConfig+0x158>
 800302a:	e00b      	b.n	8003044 <UART_SetConfig+0x164>
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e061      	b.n	80030f6 <UART_SetConfig+0x216>
 8003032:	2302      	movs	r3, #2
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e05e      	b.n	80030f6 <UART_SetConfig+0x216>
 8003038:	2304      	movs	r3, #4
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e05b      	b.n	80030f6 <UART_SetConfig+0x216>
 800303e:	2308      	movs	r3, #8
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e058      	b.n	80030f6 <UART_SetConfig+0x216>
 8003044:	2310      	movs	r3, #16
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e055      	b.n	80030f6 <UART_SetConfig+0x216>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <UART_SetConfig+0x328>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d124      	bne.n	800309e <UART_SetConfig+0x1be>
 8003054:	4b69      	ldr	r3, [pc, #420]	; (80031fc <UART_SetConfig+0x31c>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800305c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003060:	d011      	beq.n	8003086 <UART_SetConfig+0x1a6>
 8003062:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003066:	d817      	bhi.n	8003098 <UART_SetConfig+0x1b8>
 8003068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800306c:	d011      	beq.n	8003092 <UART_SetConfig+0x1b2>
 800306e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003072:	d811      	bhi.n	8003098 <UART_SetConfig+0x1b8>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <UART_SetConfig+0x1a0>
 8003078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307c:	d006      	beq.n	800308c <UART_SetConfig+0x1ac>
 800307e:	e00b      	b.n	8003098 <UART_SetConfig+0x1b8>
 8003080:	2300      	movs	r3, #0
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e037      	b.n	80030f6 <UART_SetConfig+0x216>
 8003086:	2302      	movs	r3, #2
 8003088:	77fb      	strb	r3, [r7, #31]
 800308a:	e034      	b.n	80030f6 <UART_SetConfig+0x216>
 800308c:	2304      	movs	r3, #4
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e031      	b.n	80030f6 <UART_SetConfig+0x216>
 8003092:	2308      	movs	r3, #8
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e02e      	b.n	80030f6 <UART_SetConfig+0x216>
 8003098:	2310      	movs	r3, #16
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e02b      	b.n	80030f6 <UART_SetConfig+0x216>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5a      	ldr	r2, [pc, #360]	; (800320c <UART_SetConfig+0x32c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d124      	bne.n	80030f2 <UART_SetConfig+0x212>
 80030a8:	4b54      	ldr	r3, [pc, #336]	; (80031fc <UART_SetConfig+0x31c>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80030b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030b4:	d011      	beq.n	80030da <UART_SetConfig+0x1fa>
 80030b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ba:	d817      	bhi.n	80030ec <UART_SetConfig+0x20c>
 80030bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030c0:	d011      	beq.n	80030e6 <UART_SetConfig+0x206>
 80030c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030c6:	d811      	bhi.n	80030ec <UART_SetConfig+0x20c>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <UART_SetConfig+0x1f4>
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d0:	d006      	beq.n	80030e0 <UART_SetConfig+0x200>
 80030d2:	e00b      	b.n	80030ec <UART_SetConfig+0x20c>
 80030d4:	2300      	movs	r3, #0
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e00d      	b.n	80030f6 <UART_SetConfig+0x216>
 80030da:	2302      	movs	r3, #2
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e00a      	b.n	80030f6 <UART_SetConfig+0x216>
 80030e0:	2304      	movs	r3, #4
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e007      	b.n	80030f6 <UART_SetConfig+0x216>
 80030e6:	2308      	movs	r3, #8
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e004      	b.n	80030f6 <UART_SetConfig+0x216>
 80030ec:	2310      	movs	r3, #16
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e001      	b.n	80030f6 <UART_SetConfig+0x216>
 80030f2:	2310      	movs	r3, #16
 80030f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fe:	d15b      	bne.n	80031b8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003100:	7ffb      	ldrb	r3, [r7, #31]
 8003102:	2b08      	cmp	r3, #8
 8003104:	d827      	bhi.n	8003156 <UART_SetConfig+0x276>
 8003106:	a201      	add	r2, pc, #4	; (adr r2, 800310c <UART_SetConfig+0x22c>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003131 	.word	0x08003131
 8003110:	08003139 	.word	0x08003139
 8003114:	08003141 	.word	0x08003141
 8003118:	08003157 	.word	0x08003157
 800311c:	08003147 	.word	0x08003147
 8003120:	08003157 	.word	0x08003157
 8003124:	08003157 	.word	0x08003157
 8003128:	08003157 	.word	0x08003157
 800312c:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7ff f904 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 8003134:	61b8      	str	r0, [r7, #24]
        break;
 8003136:	e013      	b.n	8003160 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff f922 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 800313c:	61b8      	str	r0, [r7, #24]
        break;
 800313e:	e00f      	b.n	8003160 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b33      	ldr	r3, [pc, #204]	; (8003210 <UART_SetConfig+0x330>)
 8003142:	61bb      	str	r3, [r7, #24]
        break;
 8003144:	e00c      	b.n	8003160 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7ff f883 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800314a:	61b8      	str	r0, [r7, #24]
        break;
 800314c:	e008      	b.n	8003160 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	61bb      	str	r3, [r7, #24]
        break;
 8003154:	e004      	b.n	8003160 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	77bb      	strb	r3, [r7, #30]
        break;
 800315e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8082 	beq.w	800326c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	005a      	lsls	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	441a      	add	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b0f      	cmp	r3, #15
 8003182:	d916      	bls.n	80031b2 <UART_SetConfig+0x2d2>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318a:	d212      	bcs.n	80031b2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	b29b      	uxth	r3, r3
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	89fb      	ldrh	r3, [r7, #14]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	89fa      	ldrh	r2, [r7, #14]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	e05c      	b.n	800326c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77bb      	strb	r3, [r7, #30]
 80031b6:	e059      	b.n	800326c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031b8:	7ffb      	ldrb	r3, [r7, #31]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d835      	bhi.n	800322a <UART_SetConfig+0x34a>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <UART_SetConfig+0x2e4>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	080031e9 	.word	0x080031e9
 80031c8:	080031f1 	.word	0x080031f1
 80031cc:	08003215 	.word	0x08003215
 80031d0:	0800322b 	.word	0x0800322b
 80031d4:	0800321b 	.word	0x0800321b
 80031d8:	0800322b 	.word	0x0800322b
 80031dc:	0800322b 	.word	0x0800322b
 80031e0:	0800322b 	.word	0x0800322b
 80031e4:	08003223 	.word	0x08003223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e8:	f7ff f8a8 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 80031ec:	61b8      	str	r0, [r7, #24]
        break;
 80031ee:	e021      	b.n	8003234 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031f0:	f7ff f8c6 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 80031f4:	61b8      	str	r0, [r7, #24]
        break;
 80031f6:	e01d      	b.n	8003234 <UART_SetConfig+0x354>
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40021000 	.word	0x40021000
 8003200:	40004400 	.word	0x40004400
 8003204:	40004800 	.word	0x40004800
 8003208:	40004c00 	.word	0x40004c00
 800320c:	40005000 	.word	0x40005000
 8003210:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <UART_SetConfig+0x3a4>)
 8003216:	61bb      	str	r3, [r7, #24]
        break;
 8003218:	e00c      	b.n	8003234 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321a:	f7ff f819 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800321e:	61b8      	str	r0, [r7, #24]
        break;
 8003220:	e008      	b.n	8003234 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003226:	61bb      	str	r3, [r7, #24]
        break;
 8003228:	e004      	b.n	8003234 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	77bb      	strb	r3, [r7, #30]
        break;
 8003232:	bf00      	nop
    }

    if (pclk != 0U)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	085a      	lsrs	r2, r3, #1
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	441a      	add	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b0f      	cmp	r3, #15
 8003252:	d909      	bls.n	8003268 <UART_SetConfig+0x388>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325a:	d205      	bcs.n	8003268 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	e001      	b.n	800326c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003278:	7fbb      	ldrb	r3, [r7, #30]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	007a1200 	.word	0x007a1200

08003288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01a      	beq.n	800339e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003386:	d10a      	bne.n	800339e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	605a      	str	r2, [r3, #4]
  }
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b098      	sub	sp, #96	; 0x60
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033dc:	f7fd f94a 	bl	8000674 <HAL_GetTick>
 80033e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d12e      	bne.n	800344e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f88c 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d021      	beq.n	800344e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341e:	653b      	str	r3, [r7, #80]	; 0x50
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003428:	647b      	str	r3, [r7, #68]	; 0x44
 800342a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800342e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e6      	bne.n	800340a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e062      	b.n	8003514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d149      	bne.n	80034f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800345c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003464:	2200      	movs	r2, #0
 8003466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f856 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03c      	beq.n	80034f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	623b      	str	r3, [r7, #32]
   return(result);
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800348a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
 8003496:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800349a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e6      	bne.n	8003476 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c8:	61fa      	str	r2, [r7, #28]
 80034ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	69b9      	ldr	r1, [r7, #24]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	617b      	str	r3, [r7, #20]
   return(result);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e5      	bne.n	80034a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e011      	b.n	8003514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3758      	adds	r7, #88	; 0x58
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352c:	e049      	b.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d045      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fd f89d 	bl	8000674 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <UART_WaitOnFlagUntilTimeout+0x30>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e048      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d031      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d110      	bne.n	800358e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f838 	bl	80035ea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2208      	movs	r2, #8
 800357e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e029      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359c:	d111      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f81e 	bl	80035ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d0a6      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b095      	sub	sp, #84	; 0x54
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	643b      	str	r3, [r7, #64]	; 0x40
 8003612:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	61fb      	str	r3, [r7, #28]
   return(result);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3308      	adds	r3, #8
 8003642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	2b01      	cmp	r3, #1
 800365e:	d118      	bne.n	8003692 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	60bb      	str	r3, [r7, #8]
   return(result);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f023 0310 	bic.w	r3, r3, #16
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	613b      	str	r3, [r7, #16]
   return(result);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e6      	bne.n	8003660 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036a6:	bf00      	nop
 80036a8:	3754      	adds	r7, #84	; 0x54
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fbef 	bl	8002eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b088      	sub	sp, #32
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6979      	ldr	r1, [r7, #20]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	613b      	str	r3, [r7, #16]
   return(result);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e6      	bne.n	80036e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff fbbb 	bl	8002ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800372a:	bf00      	nop
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	4d0d      	ldr	r5, [pc, #52]	; (8003780 <__libc_init_array+0x38>)
 800374c:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 800374e:	1b64      	subs	r4, r4, r5
 8003750:	10a4      	asrs	r4, r4, #2
 8003752:	2600      	movs	r6, #0
 8003754:	42a6      	cmp	r6, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	4d0b      	ldr	r5, [pc, #44]	; (8003788 <__libc_init_array+0x40>)
 800375a:	4c0c      	ldr	r4, [pc, #48]	; (800378c <__libc_init_array+0x44>)
 800375c:	f000 f820 	bl	80037a0 <_init>
 8003760:	1b64      	subs	r4, r4, r5
 8003762:	10a4      	asrs	r4, r4, #2
 8003764:	2600      	movs	r6, #0
 8003766:	42a6      	cmp	r6, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003770:	4798      	blx	r3
 8003772:	3601      	adds	r6, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	f855 3b04 	ldr.w	r3, [r5], #4
 800377a:	4798      	blx	r3
 800377c:	3601      	adds	r6, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	080037f0 	.word	0x080037f0
 8003784:	080037f0 	.word	0x080037f0
 8003788:	080037f0 	.word	0x080037f0
 800378c:	080037f4 	.word	0x080037f4

08003790 <memset>:
 8003790:	4402      	add	r2, r0
 8003792:	4603      	mov	r3, r0
 8003794:	4293      	cmp	r3, r2
 8003796:	d100      	bne.n	800379a <memset+0xa>
 8003798:	4770      	bx	lr
 800379a:	f803 1b01 	strb.w	r1, [r3], #1
 800379e:	e7f9      	b.n	8003794 <memset+0x4>

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
