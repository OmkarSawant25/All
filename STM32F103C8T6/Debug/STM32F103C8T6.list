
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080022ac  080022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080022ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080022ec  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000774e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f7  00000000  00000000  00027783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00028c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  00029308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b59  00000000  00000000  00029918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bb9  00000000  00000000  00040471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008208d  00000000  00000000  0004802a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca0b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001940  00000000  00000000  000ca108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002294 	.word	0x08002294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002294 	.word	0x08002294

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <sendData>:
uint8_t TxData[64];
uint8_t RxData[64];
unsigned int indx = 0;

void sendData (uint8_t *data)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016a:	480c      	ldr	r0, [pc, #48]	; (800019c <sendData+0x40>)
 800016c:	f000 fd90 	bl	8000c90 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, strlen (data) , 1000);
 8000170:	6878      	ldr	r0, [r7, #4]
 8000172:	f7ff ffeb 	bl	800014c <strlen>
 8000176:	4603      	mov	r3, r0
 8000178:	b29a      	uxth	r2, r3
 800017a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017e:	6879      	ldr	r1, [r7, #4]
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <sendData+0x44>)
 8000182:	f001 f9fd 	bl	8001580 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	4803      	ldr	r0, [pc, #12]	; (800019c <sendData+0x40>)
 800018e:	f000 fd7f 	bl	8000c90 <HAL_GPIO_WritePin>
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800
 80001a0:	20000028 	.word	0x20000028

080001a4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	460b      	mov	r3, r1
 80001ae:	807b      	strh	r3, [r7, #2]
	RxData[0] = 'F';
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80001b2:	2246      	movs	r2, #70	; 0x46
 80001b4:	701a      	strb	r2, [r3, #0]
	RxData[1] = '4';
 80001b6:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80001b8:	2234      	movs	r2, #52	; 0x34
 80001ba:	705a      	strb	r2, [r3, #1]
	RxData[2] = '4';
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80001be:	2234      	movs	r2, #52	; 0x34
 80001c0:	709a      	strb	r2, [r3, #2]
	RxData[3] = '6';
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80001c4:	2236      	movs	r2, #54	; 0x36
 80001c6:	70da      	strb	r2, [r3, #3]
	sendData(RxData);
 80001c8:	4805      	ldr	r0, [pc, #20]	; (80001e0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80001ca:	f7ff ffc7 	bl	800015c <sendData>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 64);
 80001ce:	2240      	movs	r2, #64	; 0x40
 80001d0:	4903      	ldr	r1, [pc, #12]	; (80001e0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80001d2:	4804      	ldr	r0, [pc, #16]	; (80001e4 <HAL_UARTEx_RxEventCallback+0x40>)
 80001d4:	f001 fa57 	bl	8001686 <HAL_UARTEx_ReceiveToIdle_IT>
//	memset (RxData, '\0',64);
}
 80001d8:	bf00      	nop
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	20000028 	.word	0x20000028

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f000 f9aa 	bl	8000544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f0:	f000 f80e 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f4:	f000 f87c 	bl	80002f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f8:	f000 f850 	bl	800029c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 64);
 80001fc:	2240      	movs	r2, #64	; 0x40
 80001fe:	4902      	ldr	r1, [pc, #8]	; (8000208 <main+0x20>)
 8000200:	4802      	ldr	r0, [pc, #8]	; (800020c <main+0x24>)
 8000202:	f001 fa40 	bl	8001686 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000206:	e7fe      	b.n	8000206 <main+0x1e>
 8000208:	20000070 	.word	0x20000070
 800020c:	20000028 	.word	0x20000028

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 f830 	bl	8002284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000232:	2301      	movs	r3, #1
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000244:	2302      	movs	r3, #2
 8000246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fd31 	bl	8000cc0 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000264:	f000 f884 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f000 ff9e 	bl	80011c4 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028e:	f000 f86f 	bl	8000370 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a2:	4a12      	ldr	r2, [pc, #72]	; (80002ec <MX_USART1_UART_Init+0x50>)
 80002a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002d4:	f001 f904 	bl	80014e0 <HAL_UART_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002de:	f000 f847 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40013800 	.word	0x40013800

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_GPIO_Init+0x78>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <MX_GPIO_Init+0x78>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_GPIO_Init+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_GPIO_Init+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a11      	ldr	r2, [pc, #68]	; (8000368 <MX_GPIO_Init+0x78>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_GPIO_Init+0x78>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <MX_GPIO_Init+0x7c>)
 800033c:	f000 fca8 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2302      	movs	r3, #2
 8000350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4619      	mov	r1, r3
 8000358:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_GPIO_Init+0x7c>)
 800035a:	f000 fb15 	bl	8000988 <HAL_GPIO_Init>

}
 800035e:	bf00      	nop
 8000360:	3718      	adds	r7, #24
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000
 800036c:	40010800 	.word	0x40010800

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <HAL_MspInit+0x5c>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_MspInit+0x5c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <HAL_MspInit+0x5c>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <HAL_MspInit+0x5c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <HAL_MspInit+0x60>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_MspInit+0x60>)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010000 	.word	0x40010000

080003e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a20      	ldr	r2, [pc, #128]	; (800047c <HAL_UART_MspInit+0x9c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d139      	bne.n	8000474 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <HAL_UART_MspInit+0xa0>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a1e      	ldr	r2, [pc, #120]	; (8000480 <HAL_UART_MspInit+0xa0>)
 8000406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <HAL_UART_MspInit+0xa0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <HAL_UART_MspInit+0xa0>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <HAL_UART_MspInit+0xa0>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <HAL_UART_MspInit+0xa0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000436:	2302      	movs	r3, #2
 8000438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043a:	2303      	movs	r3, #3
 800043c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	480f      	ldr	r0, [pc, #60]	; (8000484 <HAL_UART_MspInit+0xa4>)
 8000446:	f000 fa9f 	bl	8000988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4809      	ldr	r0, [pc, #36]	; (8000484 <HAL_UART_MspInit+0xa4>)
 8000460:	f000 fa92 	bl	8000988 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2025      	movs	r0, #37	; 0x25
 800046a:	f000 f9a4 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800046e:	2025      	movs	r0, #37	; 0x25
 8000470:	f000 f9bd 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40013800 	.word	0x40013800
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	e7fe      	b.n	800048c <NMI_Handler+0x4>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <MemManage_Handler+0x4>

0800049a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ce:	f000 f87f 	bl	80005d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <USART1_IRQHandler+0x10>)
 80004de:	f001 f92f 	bl	8001740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028

080004ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f8:	f7ff fff8 	bl	80004ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004fe:	490c      	ldr	r1, [pc, #48]	; (8000530 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000514:	4c09      	ldr	r4, [pc, #36]	; (800053c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000522:	f001 fe8b 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff fe5f 	bl	80001e8 <main>
  bx lr
 800052a:	4770      	bx	lr
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000534:	080022e0 	.word	0x080022e0
  ldr r2, =_sbss
 8000538:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800053c:	200000b4 	.word	0x200000b4

08000540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_2_IRQHandler>
	...

08000544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_Init+0x28>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <HAL_Init+0x28>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000554:	2003      	movs	r0, #3
 8000556:	f000 f923 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800055a:	200f      	movs	r0, #15
 800055c:	f000 f808 	bl	8000570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000560:	f7ff ff0c 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40022000 	.word	0x40022000

08000570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x54>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_InitTick+0x58>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	fbb3 f3f1 	udiv	r3, r3, r1
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f93b 	bl	800080a <HAL_SYSTICK_Config>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e00e      	b.n	80005bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d80a      	bhi.n	80005ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	2200      	movs	r2, #0
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f903 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_InitTick+0x5c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000004 	.word	0x20000004

080005d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x1c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_IncTick+0x20>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <HAL_IncTick+0x20>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000008 	.word	0x20000008
 80005f0:	200000b0 	.word	0x200000b0

080005f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <HAL_GetTick+0x10>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	200000b0 	.word	0x200000b0

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <__NVIC_EnableIRQ+0x34>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	f04f 32ff 	mov.w	r2, #4294967295
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	f04f 31ff 	mov.w	r1, #4294967295
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43d9      	mvns	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff90 	bl	80006a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff2d 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff42 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff90 	bl	80006f8 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5f 	bl	80006a4 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff35 	bl	800066c <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b02      	cmp	r3, #2
 8000838:	d008      	beq.n	800084c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2204      	movs	r2, #4
 800083e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e020      	b.n	800088e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f022 020e 	bic.w	r2, r2, #14
 800085a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f022 0201 	bic.w	r2, r2, #1
 800086a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	2101      	movs	r1, #1
 8000876:	fa01 f202 	lsl.w	r2, r1, r2
 800087a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800088c:	7bfb      	ldrb	r3, [r7, #15]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d005      	beq.n	80008bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2204      	movs	r2, #4
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e051      	b.n	8000960 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f022 020e 	bic.w	r2, r2, #14
 80008ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f022 0201 	bic.w	r2, r2, #1
 80008da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a22      	ldr	r2, [pc, #136]	; (800096c <HAL_DMA_Abort_IT+0xd4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d029      	beq.n	800093a <HAL_DMA_Abort_IT+0xa2>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <HAL_DMA_Abort_IT+0xd8>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d022      	beq.n	8000936 <HAL_DMA_Abort_IT+0x9e>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <HAL_DMA_Abort_IT+0xdc>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d01a      	beq.n	8000930 <HAL_DMA_Abort_IT+0x98>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <HAL_DMA_Abort_IT+0xe0>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d012      	beq.n	800092a <HAL_DMA_Abort_IT+0x92>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1c      	ldr	r2, [pc, #112]	; (800097c <HAL_DMA_Abort_IT+0xe4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d00a      	beq.n	8000924 <HAL_DMA_Abort_IT+0x8c>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <HAL_DMA_Abort_IT+0xe8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d102      	bne.n	800091e <HAL_DMA_Abort_IT+0x86>
 8000918:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800091c:	e00e      	b.n	800093c <HAL_DMA_Abort_IT+0xa4>
 800091e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000922:	e00b      	b.n	800093c <HAL_DMA_Abort_IT+0xa4>
 8000924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000928:	e008      	b.n	800093c <HAL_DMA_Abort_IT+0xa4>
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	e005      	b.n	800093c <HAL_DMA_Abort_IT+0xa4>
 8000930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000934:	e002      	b.n	800093c <HAL_DMA_Abort_IT+0xa4>
 8000936:	2310      	movs	r3, #16
 8000938:	e000      	b.n	800093c <HAL_DMA_Abort_IT+0xa4>
 800093a:	2301      	movs	r3, #1
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_DMA_Abort_IT+0xec>)
 800093e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2201      	movs	r2, #1
 8000944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000954:	2b00      	cmp	r3, #0
 8000956:	d003      	beq.n	8000960 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	4798      	blx	r3
    } 
  }
  return status;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40020008 	.word	0x40020008
 8000970:	4002001c 	.word	0x4002001c
 8000974:	40020030 	.word	0x40020030
 8000978:	40020044 	.word	0x40020044
 800097c:	40020058 	.word	0x40020058
 8000980:	4002006c 	.word	0x4002006c
 8000984:	40020000 	.word	0x40020000

08000988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000988:	b480      	push	{r7}
 800098a:	b08b      	sub	sp, #44	; 0x2c
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099a:	e169      	b.n	8000c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800099c:	2201      	movs	r2, #1
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f040 8158 	bne.w	8000c6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4a9a      	ldr	r2, [pc, #616]	; (8000c28 <HAL_GPIO_Init+0x2a0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d05e      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009c4:	4a98      	ldr	r2, [pc, #608]	; (8000c28 <HAL_GPIO_Init+0x2a0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d875      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009ca:	4a98      	ldr	r2, [pc, #608]	; (8000c2c <HAL_GPIO_Init+0x2a4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d058      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009d0:	4a96      	ldr	r2, [pc, #600]	; (8000c2c <HAL_GPIO_Init+0x2a4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d86f      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009d6:	4a96      	ldr	r2, [pc, #600]	; (8000c30 <HAL_GPIO_Init+0x2a8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d052      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009dc:	4a94      	ldr	r2, [pc, #592]	; (8000c30 <HAL_GPIO_Init+0x2a8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d869      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009e2:	4a94      	ldr	r2, [pc, #592]	; (8000c34 <HAL_GPIO_Init+0x2ac>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d04c      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009e8:	4a92      	ldr	r2, [pc, #584]	; (8000c34 <HAL_GPIO_Init+0x2ac>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d863      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009ee:	4a92      	ldr	r2, [pc, #584]	; (8000c38 <HAL_GPIO_Init+0x2b0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d046      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009f4:	4a90      	ldr	r2, [pc, #576]	; (8000c38 <HAL_GPIO_Init+0x2b0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d85d      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d82a      	bhi.n	8000a54 <HAL_GPIO_Init+0xcc>
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d859      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <HAL_GPIO_Init+0x80>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a83 	.word	0x08000a83
 8000a0c:	08000a5d 	.word	0x08000a5d
 8000a10:	08000a6f 	.word	0x08000a6f
 8000a14:	08000ab1 	.word	0x08000ab1
 8000a18:	08000ab7 	.word	0x08000ab7
 8000a1c:	08000ab7 	.word	0x08000ab7
 8000a20:	08000ab7 	.word	0x08000ab7
 8000a24:	08000ab7 	.word	0x08000ab7
 8000a28:	08000ab7 	.word	0x08000ab7
 8000a2c:	08000ab7 	.word	0x08000ab7
 8000a30:	08000ab7 	.word	0x08000ab7
 8000a34:	08000ab7 	.word	0x08000ab7
 8000a38:	08000ab7 	.word	0x08000ab7
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000ab7 	.word	0x08000ab7
 8000a44:	08000ab7 	.word	0x08000ab7
 8000a48:	08000ab7 	.word	0x08000ab7
 8000a4c:	08000a65 	.word	0x08000a65
 8000a50:	08000a79 	.word	0x08000a79
 8000a54:	4a79      	ldr	r2, [pc, #484]	; (8000c3c <HAL_GPIO_Init+0x2b4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a5a:	e02c      	b.n	8000ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e029      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e024      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	3308      	adds	r3, #8
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e01f      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	330c      	adds	r3, #12
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e01a      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	623b      	str	r3, [r7, #32]
          break;
 8000a8e:	e013      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d105      	bne.n	8000aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	611a      	str	r2, [r3, #16]
          break;
 8000aa2:	e009      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	615a      	str	r2, [r3, #20]
          break;
 8000aae:	e003      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e000      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          break;
 8000ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	2bff      	cmp	r3, #255	; 0xff
 8000abc:	d801      	bhi.n	8000ac2 <HAL_GPIO_Init+0x13a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	e001      	b.n	8000ac6 <HAL_GPIO_Init+0x13e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2bff      	cmp	r3, #255	; 0xff
 8000acc:	d802      	bhi.n	8000ad4 <HAL_GPIO_Init+0x14c>
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	e002      	b.n	8000ada <HAL_GPIO_Init+0x152>
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	3b08      	subs	r3, #8
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	401a      	ands	r2, r3
 8000aec:	6a39      	ldr	r1, [r7, #32]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	431a      	orrs	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 80b1 	beq.w	8000c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b08:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b20:	4a48      	ldr	r2, [pc, #288]	; (8000c44 <HAL_GPIO_Init+0x2bc>)
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220f      	movs	r2, #15
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <HAL_GPIO_Init+0x2c0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d013      	beq.n	8000b74 <HAL_GPIO_Init+0x1ec>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3f      	ldr	r2, [pc, #252]	; (8000c4c <HAL_GPIO_Init+0x2c4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1e8>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <HAL_GPIO_Init+0x2c8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1e4>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <HAL_GPIO_Init+0x2cc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1e0>
 8000b64:	2303      	movs	r3, #3
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e004      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b74:	2300      	movs	r3, #0
 8000b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b78:	f002 0203 	and.w	r2, r2, #3
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	4093      	lsls	r3, r2
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b86:	492f      	ldr	r1, [pc, #188]	; (8000c44 <HAL_GPIO_Init+0x2bc>)
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	492c      	ldr	r1, [pc, #176]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	608b      	str	r3, [r1, #8]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4928      	ldr	r1, [pc, #160]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	4922      	ldr	r1, [pc, #136]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60cb      	str	r3, [r1, #12]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	491e      	ldr	r1, [pc, #120]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4918      	ldr	r1, [pc, #96]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4914      	ldr	r1, [pc, #80]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d021      	beq.n	8000c5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	490e      	ldr	r1, [pc, #56]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
 8000c24:	e021      	b.n	8000c6a <HAL_GPIO_Init+0x2e2>
 8000c26:	bf00      	nop
 8000c28:	10320000 	.word	0x10320000
 8000c2c:	10310000 	.word	0x10310000
 8000c30:	10220000 	.word	0x10220000
 8000c34:	10210000 	.word	0x10210000
 8000c38:	10120000 	.word	0x10120000
 8000c3c:	10110000 	.word	0x10110000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	40011000 	.word	0x40011000
 8000c54:	40011400 	.word	0x40011400
 8000c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_GPIO_Init+0x304>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4909      	ldr	r1, [pc, #36]	; (8000c8c <HAL_GPIO_Init+0x304>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f47f ae8e 	bne.w	800099c <HAL_GPIO_Init+0x14>
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	372c      	adds	r7, #44	; 0x2c
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca0:	787b      	ldrb	r3, [r7, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cac:	e003      	b.n	8000cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	611a      	str	r2, [r3, #16]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e272      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8087 	beq.w	8000dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce0:	4b92      	ldr	r3, [pc, #584]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d00c      	beq.n	8000d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cec:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d112      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
 8000cf8:	4b8c      	ldr	r3, [pc, #560]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d04:	d10b      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	4b89      	ldr	r3, [pc, #548]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d06c      	beq.n	8000dec <HAL_RCC_OscConfig+0x12c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d168      	bne.n	8000dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e24c      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d26:	d106      	bne.n	8000d36 <HAL_RCC_OscConfig+0x76>
 8000d28:	4b80      	ldr	r3, [pc, #512]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a7f      	ldr	r2, [pc, #508]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e02e      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a7a      	ldr	r2, [pc, #488]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b78      	ldr	r3, [pc, #480]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a77      	ldr	r2, [pc, #476]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e01d      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0xbc>
 8000d62:	4b72      	ldr	r3, [pc, #456]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a71      	ldr	r2, [pc, #452]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6e      	ldr	r2, [pc, #440]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e00b      	b.n	8000d94 <HAL_RCC_OscConfig+0xd4>
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a6a      	ldr	r2, [pc, #424]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b68      	ldr	r3, [pc, #416]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a67      	ldr	r2, [pc, #412]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc2a 	bl	80005f4 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fc26 	bl	80005f4 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e200      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0xe4>
 8000dc2:	e014      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fc16 	bl	80005f4 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fc12 	bl	80005f4 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1ec      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x10c>
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d063      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d11c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
 8000e12:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e1c0      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4939      	ldr	r1, [pc, #228]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	e03a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fbcb 	bl	80005f4 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fbc7 	bl	80005f4 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1a1      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4927      	ldr	r1, [pc, #156]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
 8000e94:	e015      	b.n	8000ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_RCC_OscConfig+0x270>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fbaa 	bl	80005f4 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fba6 	bl	80005f4 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e180      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03a      	beq.n	8000f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000edc:	f7ff fb8a 	bl	80005f4 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fb86 	bl	80005f4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e160      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 face 	bl	80014a4 <RCC_Delay>
 8000f08:	e01c      	b.n	8000f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fb70 	bl	80005f4 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f16:	e00f      	b.n	8000f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fb6c 	bl	80005f4 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d908      	bls.n	8000f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e146      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	42420000 	.word	0x42420000
 8000f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b92      	ldr	r3, [pc, #584]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e9      	bne.n	8000f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80a6 	beq.w	800109e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b8b      	ldr	r3, [pc, #556]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10d      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b88      	ldr	r3, [pc, #544]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a87      	ldr	r2, [pc, #540]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b85      	ldr	r3, [pc, #532]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b82      	ldr	r3, [pc, #520]	; (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d118      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	; (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a7e      	ldr	r2, [pc, #504]	; (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fb2d 	bl	80005f4 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f9e:	f7ff fb29 	bl	80005f4 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	; 0x64
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e103      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <HAL_RCC_OscConfig+0x4c8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x312>
 8000fc4:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a6e      	ldr	r2, [pc, #440]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e02d      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x334>
 8000fda:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a69      	ldr	r2, [pc, #420]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	4b67      	ldr	r3, [pc, #412]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a66      	ldr	r2, [pc, #408]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6213      	str	r3, [r2, #32]
 8000ff2:	e01c      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x356>
 8000ffc:	4b61      	ldr	r3, [pc, #388]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a60      	ldr	r2, [pc, #384]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	4b5e      	ldr	r3, [pc, #376]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a5d      	ldr	r2, [pc, #372]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6213      	str	r3, [r2, #32]
 8001014:	e00b      	b.n	800102e <HAL_RCC_OscConfig+0x36e>
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a5a      	ldr	r2, [pc, #360]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a57      	ldr	r2, [pc, #348]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fadd 	bl	80005f4 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fad9 	bl	80005f4 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	; 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e0b1      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ee      	beq.n	800103e <HAL_RCC_OscConfig+0x37e>
 8001060:	e014      	b.n	800108c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fac7 	bl	80005f4 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fac3 	bl	80005f4 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	; 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e09b      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	4b40      	ldr	r3, [pc, #256]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ee      	bne.n	800106a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d105      	bne.n	800109e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a3b      	ldr	r2, [pc, #236]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8087 	beq.w	80011b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d061      	beq.n	8001178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d146      	bne.n	800114a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_RCC_OscConfig+0x4cc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fa97 	bl	80005f4 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fa93 	bl	80005f4 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e06d      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4921      	ldr	r1, [pc, #132]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a19      	ldr	r1, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	430b      	orrs	r3, r1
 8001116:	491b      	ldr	r1, [pc, #108]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_RCC_OscConfig+0x4cc>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fa67 	bl	80005f4 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fa63 	bl	80005f4 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e03d      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x46a>
 8001148:	e035      	b.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_RCC_OscConfig+0x4cc>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fa50 	bl	80005f4 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fa4c 	bl	80005f4 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e026      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x498>
 8001176:	e01e      	b.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d107      	bne.n	8001190 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e019      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
 8001184:	40021000 	.word	0x40021000
 8001188:	40007000 	.word	0x40007000
 800118c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_RCC_OscConfig+0x500>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0d0      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d8:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d910      	bls.n	8001208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b67      	ldr	r3, [pc, #412]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0207 	bic.w	r2, r3, #7
 80011ee:	4965      	ldr	r1, [pc, #404]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b63      	ldr	r3, [pc, #396]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0b8      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001220:	4b59      	ldr	r3, [pc, #356]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a58      	ldr	r2, [pc, #352]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800122a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	4b50      	ldr	r3, [pc, #320]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	494d      	ldr	r1, [pc, #308]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d040      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d115      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07f      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e073      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06b      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f023 0203 	bic.w	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4936      	ldr	r1, [pc, #216]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b4:	f7ff f99e 	bl	80005f4 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012bc:	f7ff f99a 	bl	80005f4 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e053      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 020c 	and.w	r2, r3, #12
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1eb      	bne.n	80012bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d210      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 0207 	bic.w	r2, r3, #7
 80012fa:	4922      	ldr	r1, [pc, #136]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e032      	b.n	800137a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4916      	ldr	r1, [pc, #88]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	490e      	ldr	r1, [pc, #56]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001352:	f000 f821 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 8001356:	4602      	mov	r2, r0
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	490a      	ldr	r1, [pc, #40]	; (800138c <HAL_RCC_ClockConfig+0x1c8>)
 8001364:	5ccb      	ldrb	r3, [r1, r3]
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x1cc>)
 800136c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x1d0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8fc 	bl	8000570 <HAL_InitTick>

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000
 8001388:	40021000 	.word	0x40021000
 800138c:	080022ac 	.word	0x080022ac
 8001390:	20000000 	.word	0x20000000
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_GetSysClockFreq+0x94>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d002      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0x30>
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d003      	beq.n	80013ce <HAL_RCC_GetSysClockFreq+0x36>
 80013c6:	e027      	b.n	8001418 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ca:	613b      	str	r3, [r7, #16]
      break;
 80013cc:	e027      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	0c9b      	lsrs	r3, r3, #18
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_RCC_GetSysClockFreq+0x94>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	0c5b      	lsrs	r3, r3, #17
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	fbb2 f3f3 	udiv	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e004      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_RCC_GetSysClockFreq+0xa4>)
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	613b      	str	r3, [r7, #16]
      break;
 8001416:	e002      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetSysClockFreq+0x98>)
 800141a:	613b      	str	r3, [r7, #16]
      break;
 800141c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800141e:	693b      	ldr	r3, [r7, #16]
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	007a1200 	.word	0x007a1200
 8001434:	080022c4 	.word	0x080022c4
 8001438:	080022d4 	.word	0x080022d4
 800143c:	003d0900 	.word	0x003d0900

08001440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_RCC_GetHCLKFreq+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff2 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	080022bc 	.word	0x080022bc

0800147c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001480:	f7ff ffde 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0adb      	lsrs	r3, r3, #11
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	080022bc 	.word	0x080022bc

080014a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <RCC_Delay+0x34>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <RCC_Delay+0x38>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0a5b      	lsrs	r3, r3, #9
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014c0:	bf00      	nop
  }
  while (Delay --);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	60fa      	str	r2, [r7, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f9      	bne.n	80014c0 <RCC_Delay+0x1c>
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000000 	.word	0x20000000
 80014dc:	10624dd3 	.word	0x10624dd3

080014e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e042      	b.n	8001578 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7fe ff6a 	bl	80003e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2224      	movs	r2, #36	; 0x24
 8001510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fdfb 	bl	8002120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2220      	movs	r2, #32
 800156c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af02      	add	r7, sp, #8
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b20      	cmp	r3, #32
 800159e:	d16d      	bne.n	800167c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_UART_Transmit+0x2c>
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e066      	b.n	800167e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2221      	movs	r2, #33	; 0x21
 80015ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015be:	f7ff f819 	bl	80005f4 <HAL_GetTick>
 80015c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	88fa      	ldrh	r2, [r7, #6]
 80015ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d8:	d108      	bne.n	80015ec <HAL_UART_Transmit+0x6c>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d104      	bne.n	80015ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	e003      	b.n	80015f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80015f4:	e02a      	b.n	800164c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fb4a 	bl	8001c9a <UART_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e036      	b.n	800167e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10b      	bne.n	800162e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	3302      	adds	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	e007      	b.n	800163e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3301      	adds	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001642:	b29b      	uxth	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001650:	b29b      	uxth	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1cf      	bne.n	80015f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2200      	movs	r2, #0
 800165e:	2140      	movs	r1, #64	; 0x40
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fb1a 	bl	8001c9a <UART_WaitOnFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e006      	b.n	800167e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800167c:	2302      	movs	r3, #2
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b08c      	sub	sp, #48	; 0x30
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	4613      	mov	r3, r2
 8001692:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b20      	cmp	r3, #32
 800169e:	d14a      	bne.n	8001736 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e043      	b.n	8001738 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	461a      	mov	r2, r3
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fb57 	bl	8001d76 <UART_Start_Receive_IT>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80016ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d12c      	bne.n	8001730 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d125      	bne.n	800172a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	330c      	adds	r3, #12
 80016fa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	e853 3f00 	ldrex	r3, [r3]
 8001702:	617b      	str	r3, [r7, #20]
   return(result);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	330c      	adds	r3, #12
 8001712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001714:	627a      	str	r2, [r7, #36]	; 0x24
 8001716:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171c:	e841 2300 	strex	r3, r2, [r1]
 8001720:	61fb      	str	r3, [r7, #28]
   return(result);
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e5      	bne.n	80016f4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8001728:	e002      	b.n	8001730 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8001730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001734:	e000      	b.n	8001738 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8001736:	2302      	movs	r3, #2
  }
}
 8001738:	4618      	mov	r0, r3
 800173a:	3730      	adds	r7, #48	; 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ba      	sub	sp, #232	; 0xe8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800177e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10f      	bne.n	80017a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_UART_IRQHandler+0x66>
 8001792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fbff 	bl	8001fa2 <UART_Receive_IT>
      return;
 80017a4:	e25b      	b.n	8001c5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80017a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80de 	beq.w	800196c <HAL_UART_IRQHandler+0x22c>
 80017b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d106      	bne.n	80017ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80017c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80d1 	beq.w	800196c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_UART_IRQHandler+0xae>
 80017d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_UART_IRQHandler+0xd2>
 80017fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f043 0202 	orr.w	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_UART_IRQHandler+0xf6>
 800181e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f043 0204 	orr.w	r2, r3, #4
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d011      	beq.n	8001866 <HAL_UART_IRQHandler+0x126>
 8001842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800184e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f043 0208 	orr.w	r2, r3, #8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 81f2 	beq.w	8001c54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_UART_IRQHandler+0x14e>
 800187c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fb8a 	bl	8001fa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <HAL_UART_IRQHandler+0x17a>
 80018b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d04f      	beq.n	800195a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fa94 	bl	8001de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d041      	beq.n	8001952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3314      	adds	r3, #20
 80018d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018dc:	e853 3f00 	ldrex	r3, [r3]
 80018e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80018e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3314      	adds	r3, #20
 80018f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80018fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80018fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800190a:	e841 2300 	strex	r3, r2, [r1]
 800190e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1d9      	bne.n	80018ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	2b00      	cmp	r3, #0
 8001920:	d013      	beq.n	800194a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	4a7e      	ldr	r2, [pc, #504]	; (8001b20 <HAL_UART_IRQHandler+0x3e0>)
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe ffb2 	bl	8000898 <HAL_DMA_Abort_IT>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001944:	4610      	mov	r0, r2
 8001946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001948:	e00e      	b.n	8001968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f99c 	bl	8001c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001950:	e00a      	b.n	8001968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f998 	bl	8001c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001958:	e006      	b.n	8001968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f994 	bl	8001c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001966:	e175      	b.n	8001c54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001968:	bf00      	nop
    return;
 800196a:	e173      	b.n	8001c54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	2b01      	cmp	r3, #1
 8001972:	f040 814f 	bne.w	8001c14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8148 	beq.w	8001c14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8141 	beq.w	8001c14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80b6 	beq.w	8001b24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80019c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8145 	beq.w	8001c58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80019d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f080 813e 	bcs.w	8001c58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80019e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	f000 8088 	beq.w	8001b00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	330c      	adds	r3, #12
 80019f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019fe:	e853 3f00 	ldrex	r3, [r3]
 8001a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	330c      	adds	r3, #12
 8001a18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001a1c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001a20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a24:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001a28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a2c:	e841 2300 	strex	r3, r2, [r1]
 8001a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1d9      	bne.n	80019f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3314      	adds	r3, #20
 8001a42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a46:	e853 3f00 	ldrex	r3, [r3]
 8001a4a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a60:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001a64:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001a68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001a6c:	e841 2300 	strex	r3, r2, [r1]
 8001a70:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e1      	bne.n	8001a3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	3314      	adds	r3, #20
 8001a7e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a82:	e853 3f00 	ldrex	r3, [r3]
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3314      	adds	r3, #20
 8001a98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001a9c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001aa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001aa4:	e841 2300 	strex	r3, r2, [r1]
 8001aa8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e3      	bne.n	8001a78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	330c      	adds	r3, #12
 8001ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac8:	e853 3f00 	ldrex	r3, [r3]
 8001acc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad0:	f023 0310 	bic.w	r3, r3, #16
 8001ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	330c      	adds	r3, #12
 8001ade:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001ae2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ae4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001aea:	e841 2300 	strex	r3, r2, [r1]
 8001aee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e3      	bne.n	8001abe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fe91 	bl	8000822 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fb44 	bl	80001a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b1c:	e09c      	b.n	8001c58 <HAL_UART_IRQHandler+0x518>
 8001b1e:	bf00      	nop
 8001b20:	08001ead 	.word	0x08001ead
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 808e 	beq.w	8001c5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8089 	beq.w	8001c5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	e853 3f00 	ldrex	r3, [r3]
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8001b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b76:	e841 2300 	strex	r3, r2, [r1]
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e3      	bne.n	8001b4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3314      	adds	r3, #20
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	e853 3f00 	ldrex	r3, [r3]
 8001b90:	623b      	str	r3, [r7, #32]
   return(result);
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3314      	adds	r3, #20
 8001ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bae:	e841 2300 	strex	r3, r2, [r1]
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1e3      	bne.n	8001b82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	330c      	adds	r3, #12
 8001bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	e853 3f00 	ldrex	r3, [r3]
 8001bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f023 0310 	bic.w	r3, r3, #16
 8001bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	330c      	adds	r3, #12
 8001be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001bec:	61fa      	str	r2, [r7, #28]
 8001bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bf0:	69b9      	ldr	r1, [r7, #24]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	e841 2300 	strex	r3, r2, [r1]
 8001bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e3      	bne.n	8001bc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fac9 	bl	80001a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c12:	e023      	b.n	8001c5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d009      	beq.n	8001c34 <HAL_UART_IRQHandler+0x4f4>
 8001c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f951 	bl	8001ed4 <UART_Transmit_IT>
    return;
 8001c32:	e014      	b.n	8001c5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00e      	beq.n	8001c5e <HAL_UART_IRQHandler+0x51e>
 8001c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f990 	bl	8001f72 <UART_EndTransmit_IT>
    return;
 8001c52:	e004      	b.n	8001c5e <HAL_UART_IRQHandler+0x51e>
    return;
 8001c54:	bf00      	nop
 8001c56:	e002      	b.n	8001c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8001c58:	bf00      	nop
 8001c5a:	e000      	b.n	8001c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8001c5c:	bf00      	nop
  }
}
 8001c5e:	37e8      	adds	r7, #232	; 0xe8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b090      	sub	sp, #64	; 0x40
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001caa:	e050      	b.n	8001d4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb2:	d04c      	beq.n	8001d4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <UART_WaitOnFlagUntilTimeout+0x30>
 8001cba:	f7fe fc9b 	bl	80005f4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d241      	bcs.n	8001d4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	330c      	adds	r3, #12
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	e853 3f00 	ldrex	r3, [r3]
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	330c      	adds	r3, #12
 8001ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cea:	637a      	str	r2, [r7, #52]	; 0x34
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf2:	e841 2300 	strex	r3, r2, [r1]
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e5      	bne.n	8001cca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3314      	adds	r3, #20
 8001d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	e853 3f00 	ldrex	r3, [r3]
 8001d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3314      	adds	r3, #20
 8001d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d1e:	623a      	str	r2, [r7, #32]
 8001d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d22:	69f9      	ldr	r1, [r7, #28]
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	e841 2300 	strex	r3, r2, [r1]
 8001d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1e5      	bne.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e00f      	b.n	8001d6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4013      	ands	r3, r2
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	bf0c      	ite	eq
 8001d5e:	2301      	moveq	r3, #1
 8001d60:	2300      	movne	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d09f      	beq.n	8001cac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3740      	adds	r7, #64	; 0x40
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2222      	movs	r2, #34	; 0x22
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b095      	sub	sp, #84	; 0x54
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	330c      	adds	r3, #12
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfa:	e853 3f00 	ldrex	r3, [r3]
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e10:	643a      	str	r2, [r7, #64]	; 0x40
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e18:	e841 2300 	strex	r3, r2, [r1]
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e5      	bne.n	8001df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3314      	adds	r3, #20
 8001e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	e853 3f00 	ldrex	r3, [r3]
 8001e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3314      	adds	r3, #20
 8001e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e4c:	e841 2300 	strex	r3, r2, [r1]
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e5      	bne.n	8001e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d119      	bne.n	8001e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	330c      	adds	r3, #12
 8001e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	e853 3f00 	ldrex	r3, [r3]
 8001e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f023 0310 	bic.w	r3, r3, #16
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e80:	61ba      	str	r2, [r7, #24]
 8001e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	e841 2300 	strex	r3, r2, [r1]
 8001e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e5      	bne.n	8001e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ea2:	bf00      	nop
 8001ea4:	3754      	adds	r7, #84	; 0x54
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff fede 	bl	8001c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b21      	cmp	r3, #33	; 0x21
 8001ee6:	d13e      	bne.n	8001f66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	d114      	bne.n	8001f1c <UART_Transmit_IT+0x48>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d110      	bne.n	8001f1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	1c9a      	adds	r2, r3, #2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	621a      	str	r2, [r3, #32]
 8001f1a:	e008      	b.n	8001f2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	1c59      	adds	r1, r3, #1
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6211      	str	r1, [r2, #32]
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fe66 	bl	8001c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b08c      	sub	sp, #48	; 0x30
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b22      	cmp	r3, #34	; 0x22
 8001fb4:	f040 80ae 	bne.w	8002114 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc0:	d117      	bne.n	8001ff2 <UART_Receive_IT+0x50>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d113      	bne.n	8001ff2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	1c9a      	adds	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
 8001ff0:	e026      	b.n	8002040 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002004:	d007      	beq.n	8002016 <UART_Receive_IT+0x74>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <UART_Receive_IT+0x82>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	e008      	b.n	8002036 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002030:	b2da      	uxtb	r2, r3
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29b      	uxth	r3, r3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4619      	mov	r1, r3
 800204e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002050:	2b00      	cmp	r3, #0
 8002052:	d15d      	bne.n	8002110 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0220 	bic.w	r2, r2, #32
 8002062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	2b01      	cmp	r3, #1
 8002098:	d135      	bne.n	8002106 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	330c      	adds	r3, #12
 80020a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	e853 3f00 	ldrex	r3, [r3]
 80020ae:	613b      	str	r3, [r7, #16]
   return(result);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f023 0310 	bic.w	r3, r3, #16
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	623a      	str	r2, [r7, #32]
 80020c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c4:	69f9      	ldr	r1, [r7, #28]
 80020c6:	6a3a      	ldr	r2, [r7, #32]
 80020c8:	e841 2300 	strex	r3, r2, [r1]
 80020cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e5      	bne.n	80020a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d10a      	bne.n	80020f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe f850 	bl	80001a4 <HAL_UARTEx_RxEventCallback>
 8002104:	e002      	b.n	800210c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fdb5 	bl	8001c76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e002      	b.n	8002116 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3730      	adds	r7, #48	; 0x30
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800215a:	f023 030c 	bic.w	r3, r3, #12
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	430b      	orrs	r3, r1
 8002166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <UART_SetConfig+0x114>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002188:	f7ff f978 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	e002      	b.n	8002196 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002190:	f7ff f960 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 8002194:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <UART_SetConfig+0x118>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	0119      	lsls	r1, r3, #4
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <UART_SetConfig+0x118>)
 80021ce:	fba3 0302 	umull	r0, r3, r3, r2
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2064      	movs	r0, #100	; 0x64
 80021d6:	fb00 f303 	mul.w	r3, r0, r3
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	3332      	adds	r3, #50	; 0x32
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <UART_SetConfig+0x118>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ec:	4419      	add	r1, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fbb2 f2f3 	udiv	r2, r2, r3
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <UART_SetConfig+0x118>)
 8002206:	fba3 0302 	umull	r0, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2064      	movs	r0, #100	; 0x64
 800220e:	fb00 f303 	mul.w	r3, r0, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	3332      	adds	r3, #50	; 0x32
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <UART_SetConfig+0x118>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	440a      	add	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40013800 	.word	0x40013800
 8002238:	51eb851f 	.word	0x51eb851f

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	2600      	movs	r6, #0
 8002240:	4d0c      	ldr	r5, [pc, #48]	; (8002274 <__libc_init_array+0x38>)
 8002242:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002244:	1b64      	subs	r4, r4, r5
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	f000 f822 	bl	8002294 <_init>
 8002250:	2600      	movs	r6, #0
 8002252:	4d0a      	ldr	r5, [pc, #40]	; (800227c <__libc_init_array+0x40>)
 8002254:	4c0a      	ldr	r4, [pc, #40]	; (8002280 <__libc_init_array+0x44>)
 8002256:	1b64      	subs	r4, r4, r5
 8002258:	10a4      	asrs	r4, r4, #2
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	080022d8 	.word	0x080022d8
 8002278:	080022d8 	.word	0x080022d8
 800227c:	080022d8 	.word	0x080022d8
 8002280:	080022dc 	.word	0x080022dc

08002284 <memset>:
 8002284:	4603      	mov	r3, r0
 8002286:	4402      	add	r2, r0
 8002288:	4293      	cmp	r3, r2
 800228a:	d100      	bne.n	800228e <memset+0xa>
 800228c:	4770      	bx	lr
 800228e:	f803 1b01 	strb.w	r1, [r3], #1
 8002292:	e7f9      	b.n	8002288 <memset+0x4>

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
