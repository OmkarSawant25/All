
RGB_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005e38  08005e38  00015e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006040  08006040  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006040  08006040  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006040  08006040  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000009d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009e4  200009e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a759  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a30  00000000  00000000  0002a795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000980  00000000  00000000  0002cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d159  00000000  00000000  0002d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6e0  00000000  00000000  0004a6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1bc3  00000000  00000000  00056dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010898c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e68  00000000  00000000  001089dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e1c 	.word	0x08005e1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e1c 	.word	0x08005e1c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];
int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000bb0:	f002 ff7e 	bl	8003ab0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	200001f8 	.word	0x200001f8

08000bcc <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	b2d9      	uxtb	r1, r3
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <Set_LED+0x58>)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	b2d9      	uxtb	r1, r3
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <Set_LED+0x58>)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	b2d9      	uxtb	r1, r3
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <Set_LED+0x58>)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	460a      	mov	r2, r1
 8000c04:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2d9      	uxtb	r1, r3
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <Set_LED+0x58>)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	460a      	mov	r2, r1
 8000c14:	70da      	strb	r2, [r3, #3]

}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200000b8 	.word	0x200000b8

08000c28 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness) {
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b2d      	cmp	r3, #45	; 0x2d
 8000c34:	dd01      	ble.n	8000c3a <Set_Brightness+0x12>
		brightness = 45;
 8000c36:	232d      	movs	r3, #45	; 0x2d
 8000c38:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e060      	b.n	8000d02 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <Set_Brightness+0xf8>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000c48:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <Set_Brightness+0xfc>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8000c50:	2301      	movs	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	e04f      	b.n	8000cf6 <Set_Brightness+0xce>
			float angle = 90 - brightness;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000c5c:	ee07 3a90 	vmov	s15, r3
 8000c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c64:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * PI / 180;
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fc11 	bl	8000490 <__aeabi_f2d>
 8000c6e:	a32a      	add	r3, pc, #168	; (adr r3, 8000d18 <Set_Brightness+0xf0>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	f7ff fc64 	bl	8000540 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 0200 	mov.w	r2, #0
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <Set_Brightness+0x100>)
 8000c86:	f7ff fd85 	bl	8000794 <__aeabi_ddiv>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff ff37 	bl	8000b04 <__aeabi_d2f>
 8000c96:	4603      	mov	r3, r0
 8000c98:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <Set_Brightness+0xf8>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	441a      	add	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fbdf 	bl	800046c <__aeabi_i2d>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f7ff fbec 	bl	8000490 <__aeabi_f2d>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	ec43 2b10 	vmov	d0, r2, r3
 8000cc0:	f004 f802 	bl	8004cc8 <tan>
 8000cc4:	ec53 2b10 	vmov	r2, r3, d0
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	f7ff fd62 	bl	8000794 <__aeabi_ddiv>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fef4 	bl	8000ac4 <__aeabi_d2uiz>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b2d9      	uxtb	r1, r3
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <Set_Brightness+0xfc>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	441a      	add	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	460a      	mov	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	ddac      	ble.n	8000c56 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2b27      	cmp	r3, #39	; 0x27
 8000d06:	dd9b      	ble.n	8000c40 <Set_Brightness+0x18>
		}
	}
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	53c8d4f1 	.word	0x53c8d4f1
 8000d1c:	400921fb 	.word	0x400921fb
 8000d20:	200000b8 	.word	0x200000b8
 8000d24:	20000158 	.word	0x20000158
 8000d28:	40668000 	.word	0x40668000

08000d2c <WS2812_Send>:

uint16_t pwmData[(24 * MAX_LED) + 50];

void WS2812_Send(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e036      	b.n	8000daa <WS2812_Send+0x7e>
		color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	; (8000df8 <WS2812_Send+0xcc>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	041a      	lsls	r2, r3, #16
 8000d48:	492b      	ldr	r1, [pc, #172]	; (8000df8 <WS2812_Send+0xcc>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4928      	ldr	r1, [pc, #160]	; (8000df8 <WS2812_Send+0xcc>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--) {
 8000d64:	2317      	movs	r3, #23
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e019      	b.n	8000d9e <WS2812_Send+0x72>
			if (color & (1 << i)) {
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <WS2812_Send+0x5c>
				pwmData[indx] = 60; // 2/3 of 90%
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <WS2812_Send+0xd0>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	213c      	movs	r1, #60	; 0x3c
 8000d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d86:	e004      	b.n	8000d92 <WS2812_Send+0x66>
			} else
				pwmData[indx] = 30; // 1/3 of 90
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <WS2812_Send+0xd0>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	211e      	movs	r1, #30
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dae2      	bge.n	8000d6a <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	3301      	adds	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b27      	cmp	r3, #39	; 0x27
 8000dae:	ddc5      	ble.n	8000d3c <WS2812_Send+0x10>
		}
	}
	for (int i = 0; i < 50; i++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	e00a      	b.n	8000dcc <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <WS2812_Send+0xd0>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b31      	cmp	r3, #49	; 0x31
 8000dd0:	ddf1      	ble.n	8000db6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <WS2812_Send+0xd0>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <WS2812_Send+0xd4>)
 8000ddc:	f002 fc50 	bl	8003680 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8000de0:	bf00      	nop
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <WS2812_Send+0xd8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0fb      	beq.n	8000de2 <WS2812_Send+0xb6>
	};
	datasentflag = 0;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <WS2812_Send+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000158 	.word	0x20000158
 8000dfc:	200001fc 	.word	0x200001fc
 8000e00:	20000028 	.word	0x20000028
 8000e04:	200001f8 	.word	0x200001f8

08000e08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e0e:	f000 faa5 	bl	800135c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e12:	f000 f83d 	bl	8000e90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e16:	f000 f961 	bl	80010dc <MX_GPIO_Init>
	MX_DMA_Init();
 8000e1a:	f000 f941 	bl	80010a0 <MX_DMA_Init>
	MX_TIM1_Init();
 8000e1e:	f000 f893 	bl	8000f48 <MX_TIM1_Init>
//		Set_LED(i, 0,255, 0);
//	}
//	for(int i = 20;i<40;i++){
//			Set_LED(i,255,0, 0);
//		}
	for (int i = 0; i < 40; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e008      	b.n	8000e3a <main+0x32>
		Set_LED(i, 255, 0, 0);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	21ff      	movs	r1, #255	; 0xff
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff fecc 	bl	8000bcc <Set_LED>
	for (int i = 0; i < 40; i++) {
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b27      	cmp	r3, #39	; 0x27
 8000e3e:	ddf3      	ble.n	8000e28 <main+0x20>
	}

	Set_Brightness(45);
 8000e40:	202d      	movs	r0, #45	; 0x2d
 8000e42:	f7ff fef1 	bl	8000c28 <Set_Brightness>
	WS2812_Send();
 8000e46:	f7ff ff71 	bl	8000d2c <WS2812_Send>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		for (int i = 0; i < 46; i++) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	e00a      	b.n	8000e66 <main+0x5e>
			Set_Brightness(i);
 8000e50:	68b8      	ldr	r0, [r7, #8]
 8000e52:	f7ff fee9 	bl	8000c28 <Set_Brightness>
			WS2812_Send();
 8000e56:	f7ff ff69 	bl	8000d2c <WS2812_Send>
			HAL_Delay(50);
 8000e5a:	2032      	movs	r0, #50	; 0x32
 8000e5c:	f000 fae4 	bl	8001428 <HAL_Delay>
		for (int i = 0; i < 46; i++) {
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	2b2d      	cmp	r3, #45	; 0x2d
 8000e6a:	ddf1      	ble.n	8000e50 <main+0x48>
		}

		for (int i = 45; i >= 0; i--) {
 8000e6c:	232d      	movs	r3, #45	; 0x2d
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	e00a      	b.n	8000e88 <main+0x80>
			Set_Brightness(i);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fed8 	bl	8000c28 <Set_Brightness>
			WS2812_Send();
 8000e78:	f7ff ff58 	bl	8000d2c <WS2812_Send>
			HAL_Delay(50);
 8000e7c:	2032      	movs	r0, #50	; 0x32
 8000e7e:	f000 fad3 	bl	8001428 <HAL_Delay>
		for (int i = 45; i >= 0; i--) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	daf1      	bge.n	8000e72 <main+0x6a>
		for (int i = 0; i < 46; i++) {
 8000e8e:	e7dc      	b.n	8000e4a <main+0x42>

08000e90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09e      	sub	sp, #120	; 0x78
 8000e94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e9a:	2228      	movs	r2, #40	; 0x28
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 ff08 	bl	8004cb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ea4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	223c      	movs	r2, #60	; 0x3c
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fefa 	bl	8004cb4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ec4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ec8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eda:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000edc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ee2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 ff3e 	bl	8001d68 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x66>
		Error_Handler();
 8000ef2:	f000 f917 	bl	8001124 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2302      	movs	r3, #2
 8000efc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 ff66 	bl	8002de4 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x92>
		Error_Handler();
 8000f1e:	f000 f901 	bl	8001124 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 f93e 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xae>
		Error_Handler();
 8000f3a:	f000 f8f3 	bl	8001124 <Error_Handler>
	}
}
 8000f3e:	bf00      	nop
 8000f40:	3778      	adds	r7, #120	; 0x78
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09a      	sub	sp, #104	; 0x68
 8000f4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fe96 	bl	8004cb4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f8a:	4a44      	ldr	r2, [pc, #272]	; (800109c <MX_TIM1_Init+0x154>)
 8000f8c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 90 - 1;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_TIM1_Init+0x150>)
 8000f9c:	2259      	movs	r2, #89	; 0x59
 8000f9e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000fb2:	4839      	ldr	r0, [pc, #228]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fb4:	f002 faac 	bl	8003510 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8000fbe:	f000 f8b1 	bl	8001124 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000fc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4832      	ldr	r0, [pc, #200]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fd0:	f002 ff7a 	bl	8003ec8 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x96>
		Error_Handler();
 8000fda:	f000 f8a3 	bl	8001124 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000fde:	482e      	ldr	r0, [pc, #184]	; (8001098 <MX_TIM1_Init+0x150>)
 8000fe0:	f002 faed 	bl	80035be <HAL_TIM_PWM_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0xa6>
		Error_Handler();
 8000fea:	f000 f89b 	bl	8001124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000ffa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4825      	ldr	r0, [pc, #148]	; (8001098 <MX_TIM1_Init+0x150>)
 8001002:	f003 fd35 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 800100c:	f000 f88a 	bl	8001124 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001010:	2360      	movs	r3, #96	; 0x60
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800102c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	4818      	ldr	r0, [pc, #96]	; (8001098 <MX_TIM1_Init+0x150>)
 8001036:	f002 fe33 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8001040:	f000 f870 	bl	8001124 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM1_Init+0x150>)
 800107a:	f003 fd79 	bl	8004b70 <HAL_TIMEx_ConfigBreakDeadTime>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8001084:	f000 f84e 	bl	8001124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM1_Init+0x150>)
 800108a:	f000 f8bf 	bl	800120c <HAL_TIM_MspPostInit>

}
 800108e:	bf00      	nop
 8001090:	3768      	adds	r7, #104	; 0x68
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000028 	.word	0x20000028
 800109c:	40012c00 	.word	0x40012c00

080010a0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_DMA_Init+0x38>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <MX_DMA_Init+0x38>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_DMA_Init+0x38>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200c      	movs	r0, #12
 80010c4:	f000 faaf 	bl	8001626 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010c8:	200c      	movs	r0, #12
 80010ca:	f000 fac8 	bl	800165e <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_GPIO_Init+0x44>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <MX_GPIO_Init+0x44>)
 80010e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_GPIO_Init+0x44>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_GPIO_Init+0x44>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <MX_GPIO_Init+0x44>)
 8001100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001104:	6153      	str	r3, [r2, #20]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_GPIO_Init+0x44>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x44>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x44>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_MspInit+0x44>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x44>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001166:	2007      	movs	r0, #7
 8001168:	f000 fa52 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_TIM_Base_MspInit+0x84>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d133      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_TIM_Base_MspInit+0x88>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_TIM_Base_MspInit+0x88>)
 8001190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_TIM_Base_MspInit+0x88>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011a6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011aa:	2210      	movs	r2, #16
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011d8:	f000 fa5b 	bl	8001692 <HAL_DMA_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80011e2:	f7ff ff9f 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40021000 	.word	0x40021000
 8001204:	20000074 	.word	0x20000074
 8001208:	4002001c 	.word	0x4002001c

0800120c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_TIM_MspPostInit+0x64>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d11c      	bne.n	8001268 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_TIM_MspPostInit+0x68>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_TIM_MspPostInit+0x68>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_TIM_MspPostInit+0x68>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_TIM_MspPostInit+0x6c>)
 8001264:	f000 fc06 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40012c00 	.word	0x40012c00
 8001274:	40021000 	.word	0x40021000
 8001278:	48001000 	.word	0x48001000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f88e 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <DMA1_Channel2_IRQHandler+0x10>)
 80012d6:	f000 fac0 	bl	800185a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000074 	.word	0x20000074

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800130c:	f7ff ffea 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f003 fc99 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fd65 	bl	8000e08 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001340:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800134c:	08006048 	.word	0x08006048
  ldr r2, =_sbss
 8001350:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001354:	200009e4 	.word	0x200009e4

08001358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_2_IRQHandler>
	...

0800135c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x28>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x28>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 f94f 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff feda 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f967 	bl	800167a <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f92f 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	200009e0 	.word	0x200009e0

08001410 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;  
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200009e0 	.word	0x200009e0

08001428 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e037      	b.n	8001718 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f97e 	bl	80019fc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}  
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_DMA_Start_IT+0x20>
 800173c:	2302      	movs	r3, #2
 800173e:	e04a      	b.n	80017d6 <HAL_DMA_Start_IT+0xb6>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174e:	2b01      	cmp	r3, #1
 8001750:	d13a      	bne.n	80017c8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2202      	movs	r2, #2
 8001756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f912 	bl	80019a0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 020e 	orr.w	r2, r2, #14
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e00f      	b.n	80017b6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 020a 	orr.w	r2, r2, #10
 80017a4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0204 	bic.w	r2, r2, #4
 80017b4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e005      	b.n	80017d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
 80017d2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d005      	beq.n	8001800 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2204      	movs	r2, #4
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e027      	b.n	8001850 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
    } 
  }
  return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2204      	movs	r2, #4
 8001878:	409a      	lsls	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d024      	beq.n	80018cc <HAL_DMA_IRQHandler+0x72>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01f      	beq.n	80018cc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0204 	bic.w	r2, r2, #4
 80018a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	2104      	movs	r1, #4
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d06a      	beq.n	8001998 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018ca:	e065      	b.n	8001998 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2202      	movs	r2, #2
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d02c      	beq.n	8001936 <HAL_DMA_IRQHandler+0xdc>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d027      	beq.n	8001936 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10b      	bne.n	800190c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 020a 	bic.w	r2, r2, #10
 8001902:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	2102      	movs	r1, #2
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	d035      	beq.n	8001998 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001934:	e030      	b.n	8001998 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2208      	movs	r2, #8
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_DMA_IRQHandler+0x13e>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 020e 	bic.w	r2, r2, #14
 800195e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
    }
  }
}  
 8001996:	e7ff      	b.n	8001998 <HAL_DMA_IRQHandler+0x13e>
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d108      	bne.n	80019e0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019de:	e007      	b.n	80019f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <DMA_CalcBaseAndBitshift+0x60>)
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d80f      	bhi.n	8001a30 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <DMA_CalcBaseAndBitshift+0x64>)
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <DMA_CalcBaseAndBitshift+0x68>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	009a      	lsls	r2, r3, #2
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <DMA_CalcBaseAndBitshift+0x6c>)
 8001a2c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001a2e:	e00e      	b.n	8001a4e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <DMA_CalcBaseAndBitshift+0x70>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <DMA_CalcBaseAndBitshift+0x68>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <DMA_CalcBaseAndBitshift+0x74>)
 8001a4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40020407 	.word	0x40020407
 8001a60:	bffdfff8 	.word	0xbffdfff8
 8001a64:	cccccccd 	.word	0xcccccccd
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	bffdfbf8 	.word	0xbffdfbf8
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e154      	b.n	8001d2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8146 	beq.w	8001d28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x40>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d130      	bne.n	8001b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aea:	2201      	movs	r2, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 0201 	and.w	r2, r3, #1
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d017      	beq.n	8001b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d123      	bne.n	8001ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	6939      	ldr	r1, [r7, #16]
 8001ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0203 	and.w	r2, r3, #3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80a0 	beq.w	8001d28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_GPIO_Init+0x2d8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_GPIO_Init+0x2d8>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <HAL_GPIO_Init+0x2d8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c00:	4a53      	ldr	r2, [pc, #332]	; (8001d50 <HAL_GPIO_Init+0x2dc>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c2a:	d019      	beq.n	8001c60 <HAL_GPIO_Init+0x1ec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a49      	ldr	r2, [pc, #292]	; (8001d54 <HAL_GPIO_Init+0x2e0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_GPIO_Init+0x1e8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <HAL_GPIO_Init+0x2e4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00d      	beq.n	8001c58 <HAL_GPIO_Init+0x1e4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a47      	ldr	r2, [pc, #284]	; (8001d5c <HAL_GPIO_Init+0x2e8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0x1e0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <HAL_GPIO_Init+0x2ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_GPIO_Init+0x1dc>
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	e008      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c50:	2305      	movs	r3, #5
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e004      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c60:	2300      	movs	r3, #0
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c72:	4937      	ldr	r1, [pc, #220]	; (8001d50 <HAL_GPIO_Init+0x2dc>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ca4:	4a2f      	ldr	r2, [pc, #188]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cce:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f aea3 	bne.w	8001a84 <HAL_GPIO_Init+0x10>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	48000c00 	.word	0x48000c00
 8001d60:	48001000 	.word	0x48001000
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f001 b823 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 817d 	beq.w	800209e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001da4:	4bbc      	ldr	r3, [pc, #752]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d00c      	beq.n	8001dca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db0:	4bb9      	ldr	r3, [pc, #740]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d15c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x10e>
 8001dbc:	4bb6      	ldr	r3, [pc, #728]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d155      	bne.n	8001e76 <HAL_RCC_OscConfig+0x10e>
 8001dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0x94>
 8001df6:	4ba8      	ldr	r3, [pc, #672]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_OscConfig+0xc0>
 8001dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e24:	4b9c      	ldr	r3, [pc, #624]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 811f 	beq.w	800209c <HAL_RCC_OscConfig+0x334>
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8116 	bne.w	800209c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f000 bfaf 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12e>
 8001e88:	4b83      	ldr	r3, [pc, #524]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a82      	ldr	r2, [pc, #520]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e036      	b.n	8001f04 <HAL_RCC_OscConfig+0x19c>
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x158>
 8001ea6:	4b7c      	ldr	r3, [pc, #496]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7b      	ldr	r2, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b79      	ldr	r3, [pc, #484]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a78      	ldr	r2, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e021      	b.n	8001f04 <HAL_RCC_OscConfig+0x19c>
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x184>
 8001ed2:	4b71      	ldr	r3, [pc, #452]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a70      	ldr	r2, [pc, #448]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6d      	ldr	r2, [pc, #436]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x19c>
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a69      	ldr	r2, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f04:	4b64      	ldr	r3, [pc, #400]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	f023 020f 	bic.w	r2, r3, #15
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	495f      	ldr	r1, [pc, #380]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d059      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fa6f 	bl	8001410 <HAL_GetTick>
 8001f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fa6a 	bl	8001410 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d902      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	f000 bf43 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
 8001f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_OscConfig+0x218>
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e015      	b.n	8001fac <HAL_RCC_OscConfig+0x244>
 8001f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fb0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fb8:	fa92 f2a2 	rbit	r2, r2
 8001fbc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fc0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f042 0220 	orr.w	r2, r2, #32
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f002 021f 	and.w	r2, r2, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ab      	beq.n	8001f38 <HAL_RCC_OscConfig+0x1d0>
 8001fe0:	e05d      	b.n	800209e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fa15 	bl	8001410 <HAL_GetTick>
 8001fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fa10 	bl	8001410 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d902      	bls.n	8002002 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f000 bee9 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
 8002002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002006:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002016:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0x2cc>
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e015      	b.n	8002060 <HAL_RCC_OscConfig+0x2f8>
 8002034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002038:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002050:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_RCC_OscConfig+0x330>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002064:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002068:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800206c:	fa92 f2a2 	rbit	r2, r2
 8002070:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002074:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002078:	fab2 f282 	clz	r2, r2
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f042 0220 	orr.w	r2, r2, #32
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	f002 021f 	and.w	r2, r2, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f202 	lsl.w	r2, r1, r2
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ab      	bne.n	8001fec <HAL_RCC_OscConfig+0x284>
 8002094:	e003      	b.n	800209e <HAL_RCC_OscConfig+0x336>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 817d 	beq.w	80023ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020b4:	4ba6      	ldr	r3, [pc, #664]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020c0:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d172      	bne.n	80021b2 <HAL_RCC_OscConfig+0x44a>
 80020cc:	4ba0      	ldr	r3, [pc, #640]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d16c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x44a>
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x3a0>
 8002102:	4b93      	ldr	r3, [pc, #588]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e013      	b.n	8002130 <HAL_RCC_OscConfig+0x3c8>
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002120:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800212c:	4b88      	ldr	r3, [pc, #544]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2202      	movs	r2, #2
 8002132:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002136:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002142:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCC_OscConfig+0x410>
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d002      	beq.n	8002178 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	f000 be2e 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b75      	ldr	r3, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	21f8      	movs	r1, #248	; 0xf8
 800218e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002196:	fa91 f1a1 	rbit	r1, r1
 800219a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800219e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021a2:	fab1 f181 	clz	r1, r1
 80021a6:	b2c9      	uxtb	r1, r1
 80021a8:	408b      	lsls	r3, r1
 80021aa:	4969      	ldr	r1, [pc, #420]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b0:	e0fd      	b.n	80023ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8088 	beq.w	80022d4 <HAL_RCC_OscConfig+0x56c>
 80021c4:	2301      	movs	r3, #1
 80021c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	2301      	movs	r3, #1
 80021ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff f90e 	bl	8001410 <HAL_GetTick>
 80021f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fa:	f7ff f909 	bl	8001410 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d902      	bls.n	8002210 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	f000 bde2 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002222:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0x4d8>
 800223a:	4b45      	ldr	r3, [pc, #276]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x500>
 8002240:	2302      	movs	r3, #2
 8002242:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002252:	2302      	movs	r3, #2
 8002254:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002258:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2202      	movs	r2, #2
 800226a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800226e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002272:	fa92 f2a2 	rbit	r2, r2
 8002276:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800227a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f042 0220 	orr.w	r2, r2, #32
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f002 021f 	and.w	r2, r2, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0af      	beq.n	80021fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	21f8      	movs	r1, #248	; 0xf8
 80022b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022b8:	fa91 f1a1 	rbit	r1, r1
 80022bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022c4:	fab1 f181 	clz	r1, r1
 80022c8:	b2c9      	uxtb	r1, r1
 80022ca:	408b      	lsls	r3, r1
 80022cc:	4920      	ldr	r1, [pc, #128]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
 80022d2:	e06c      	b.n	80023ae <HAL_RCC_OscConfig+0x646>
 80022d4:	2301      	movs	r3, #1
 80022d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	461a      	mov	r2, r3
 80022fc:	2300      	movs	r3, #0
 80022fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff f886 	bl	8001410 <HAL_GetTick>
 8002304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff f881 	bl	8001410 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	f000 bd5a 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d104      	bne.n	8002354 <HAL_RCC_OscConfig+0x5ec>
 800234a:	4b01      	ldr	r3, [pc, #4]	; (8002350 <HAL_RCC_OscConfig+0x5e8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	e015      	b.n	800237c <HAL_RCC_OscConfig+0x614>
 8002350:	40021000 	.word	0x40021000
 8002354:	2302      	movs	r3, #2
 8002356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800236c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002378:	4bc8      	ldr	r3, [pc, #800]	; (800269c <HAL_RCC_OscConfig+0x934>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2202      	movs	r2, #2
 800237e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002382:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002386:	fa92 f2a2 	rbit	r2, r2
 800238a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800238e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f042 0220 	orr.w	r2, r2, #32
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f002 021f 	and.w	r2, r2, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ad      	bne.n	800230a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8110 	beq.w	80025e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d079      	beq.n	80024c8 <HAL_RCC_OscConfig+0x760>
 80023d4:	2301      	movs	r3, #1
 80023d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4bab      	ldr	r3, [pc, #684]	; (80026a0 <HAL_RCC_OscConfig+0x938>)
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	461a      	mov	r2, r3
 80023fa:	2301      	movs	r3, #1
 80023fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7ff f807 	bl	8001410 <HAL_GetTick>
 8002402:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002408:	f7ff f802 	bl	8001410 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d902      	bls.n	800241e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	f000 bcdb 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
 800241e:	2302      	movs	r3, #2
 8002420:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002438:	2202      	movs	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800245c:	2202      	movs	r2, #2
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002476:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002478:	4b88      	ldr	r3, [pc, #544]	; (800269c <HAL_RCC_OscConfig+0x934>)
 800247a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002484:	2102      	movs	r1, #2
 8002486:	6019      	str	r1, [r3, #0]
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f1a3 	rbit	r1, r3
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800249e:	6019      	str	r1, [r3, #0]
  return result;
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0a0      	beq.n	8002408 <HAL_RCC_OscConfig+0x6a0>
 80024c6:	e08d      	b.n	80025e4 <HAL_RCC_OscConfig+0x87c>
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024ea:	601a      	str	r2, [r3, #0]
  return result;
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <HAL_RCC_OscConfig+0x938>)
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	461a      	mov	r2, r3
 8002506:	2300      	movs	r3, #0
 8002508:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe ff81 	bl	8001410 <HAL_GetTick>
 800250e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002514:	f7fe ff7c 	bl	8001410 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d902      	bls.n	800252a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	f000 bc55 	b.w	8002dd4 <HAL_RCC_OscConfig+0x106c>
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800257a:	2202      	movs	r2, #2
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002594:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_OscConfig+0x934>)
 8002598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025a2:	2102      	movs	r1, #2
 80025a4:	6019      	str	r1, [r3, #0]
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f1a3 	rbit	r1, r3
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025bc:	6019      	str	r1, [r3, #0]
  return result;
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d197      	bne.n	8002514 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 81a1 	beq.w	800293c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002600:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_RCC_OscConfig+0x934>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d116      	bne.n	800263a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_RCC_OscConfig+0x934>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_RCC_OscConfig+0x934>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	61d3      	str	r3, [r2, #28]
 8002618:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_OscConfig+0x934>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002632:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_OscConfig+0x93c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11a      	bne.n	800267c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_RCC_OscConfig+0x93c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <HAL_RCC_OscConfig+0x93c>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe fedd 	bl	8001410 <HAL_GetTick>
 8002656:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	e009      	b.n	8002670 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7fe fed8 	bl	8001410 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	; 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e3b1      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_RCC_OscConfig+0x93c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ef      	beq.n	800265c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d10d      	bne.n	80026a8 <HAL_RCC_OscConfig+0x940>
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_OscConfig+0x934>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a02      	ldr	r2, [pc, #8]	; (800269c <HAL_RCC_OscConfig+0x934>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	e03c      	b.n	8002714 <HAL_RCC_OscConfig+0x9ac>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	10908120 	.word	0x10908120
 80026a4:	40007000 	.word	0x40007000
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x96a>
 80026b8:	4bc1      	ldr	r3, [pc, #772]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4ac0      	ldr	r2, [pc, #768]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6213      	str	r3, [r2, #32]
 80026c4:	4bbe      	ldr	r3, [pc, #760]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4abd      	ldr	r2, [pc, #756]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	6213      	str	r3, [r2, #32]
 80026d0:	e020      	b.n	8002714 <HAL_RCC_OscConfig+0x9ac>
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x994>
 80026e2:	4bb7      	ldr	r3, [pc, #732]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4ab6      	ldr	r2, [pc, #728]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4bb4      	ldr	r3, [pc, #720]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4ab3      	ldr	r2, [pc, #716]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x9ac>
 80026fc:	4bb0      	ldr	r3, [pc, #704]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4aaf      	ldr	r2, [pc, #700]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	4bad      	ldr	r3, [pc, #692]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4aac      	ldr	r2, [pc, #688]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8081 	beq.w	8002828 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7fe fe73 	bl	8001410 <HAL_GetTick>
 800272a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fe6e 	bl	8001410 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e345      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800278e:	601a      	str	r2, [r3, #0]
  return result;
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002798:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_OscConfig+0xa4c>
 80027ae:	4b84      	ldr	r3, [pc, #528]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	e013      	b.n	80027dc <HAL_RCC_OscConfig+0xa74>
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027bc:	2202      	movs	r2, #2
 80027be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4b79      	ldr	r3, [pc, #484]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027e4:	2102      	movs	r1, #2
 80027e6:	6011      	str	r1, [r2, #0]
 80027e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	fa92 f1a2 	rbit	r1, r2
 80027f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027fe:	6011      	str	r1, [r2, #0]
  return result;
 8002800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002804:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f002 021f 	and.w	r2, r2, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d084      	beq.n	8002730 <HAL_RCC_OscConfig+0x9c8>
 8002826:	e07f      	b.n	8002928 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7fe fdf2 	bl	8001410 <HAL_GetTick>
 800282c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fded 	bl	8001410 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e2c4      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002852:	2202      	movs	r2, #2
 8002854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fa93 f2a3 	rbit	r2, r3
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002876:	2202      	movs	r2, #2
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002890:	601a      	str	r2, [r3, #0]
  return result;
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800289a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_OscConfig+0xb4e>
 80028b0:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0xb76>
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028be:	2202      	movs	r2, #2
 80028c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028e6:	2102      	movs	r1, #2
 80028e8:	6011      	str	r1, [r2, #0]
 80028ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	fa92 f1a2 	rbit	r1, r2
 80028f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002900:	6011      	str	r1, [r2, #0]
  return result;
 8002902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002906:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f002 021f 	and.w	r2, r2, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d184      	bne.n	8002832 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002928:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 8002936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 8242 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_RCC_OscConfig+0xc58>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	f000 8213 	beq.w	8002d82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b02      	cmp	r3, #2
 800296a:	f040 8162 	bne.w	8002c32 <HAL_RCC_OscConfig+0xeca>
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002980:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002992:	601a      	str	r2, [r3, #0]
  return result;
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800299c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd2c 	bl	8001410 <HAL_GetTick>
 80029b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	e00c      	b.n	80029d8 <HAL_RCC_OscConfig+0xc70>
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fd24 	bl	8001410 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1fd      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029fc:	601a      	str	r2, [r3, #0]
  return result;
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_OscConfig+0xcba>
 8002a1c:	4bb0      	ldr	r3, [pc, #704]	; (8002ce0 <HAL_RCC_OscConfig+0xf78>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	e027      	b.n	8002a72 <HAL_RCC_OscConfig+0xd0a>
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	4b9c      	ldr	r3, [pc, #624]	; (8002ce0 <HAL_RCC_OscConfig+0xf78>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a76:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a7e:	6011      	str	r1, [r2, #0]
 8002a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a84:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	fa92 f1a2 	rbit	r1, r2
 8002a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a92:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a96:	6011      	str	r1, [r2, #0]
  return result;
 8002a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0220 	orr.w	r2, r2, #32
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d182      	bne.n	80029c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0xf78>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	497f      	ldr	r1, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0xf78>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002aee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b0a:	601a      	str	r2, [r3, #0]
  return result;
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	461a      	mov	r2, r3
 8002b28:	2301      	movs	r3, #1
 8002b2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fc70 	bl	8001410 <HAL_GetTick>
 8002b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b34:	e009      	b.n	8002b4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fc6b 	bl	8001410 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e144      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b6e:	601a      	str	r2, [r3, #0]
  return result;
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0xe2c>
 8002b8e:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <HAL_RCC_OscConfig+0xf78>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e027      	b.n	8002be4 <HAL_RCC_OscConfig+0xe7c>
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	fa93 f2a3 	rbit	r2, r3
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bcc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_RCC_OscConfig+0xf78>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bf0:	6011      	str	r1, [r2, #0]
 8002bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	fa92 f1a2 	rbit	r1, r2
 8002c00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c08:	6011      	str	r1, [r2, #0]
  return result;
 8002c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	fab2 f282 	clz	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f002 021f 	and.w	r2, r2, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d082      	beq.n	8002b36 <HAL_RCC_OscConfig+0xdce>
 8002c30:	e0cf      	b.n	8002dd2 <HAL_RCC_OscConfig+0x106a>
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c56:	601a      	str	r2, [r3, #0]
  return result;
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	461a      	mov	r2, r3
 8002c74:	2300      	movs	r3, #0
 8002c76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fbca 	bl	8001410 <HAL_GetTick>
 8002c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c80:	e009      	b.n	8002c96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe fbc5 	bl	8001410 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e09e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cba:	601a      	str	r2, [r3, #0]
  return result;
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d104      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xf7c>
 8002cda:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <HAL_RCC_OscConfig+0xf78>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	e029      	b.n	8002d34 <HAL_RCC_OscConfig+0xfcc>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_OscConfig+0x1078>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d40:	6011      	str	r1, [r2, #0]
 8002d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	fa92 f1a2 	rbit	r1, r2
 8002d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d58:	6011      	str	r1, [r2, #0]
  return result;
 8002d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	fab2 f282 	clz	r2, r2
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	f002 021f 	and.w	r2, r2, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d180      	bne.n	8002c82 <HAL_RCC_OscConfig+0xf1a>
 8002d80:	e027      	b.n	8002dd2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e01e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_OscConfig+0x1078>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002da2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d10b      	bne.n	8002dce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002db6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b09e      	sub	sp, #120	; 0x78
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e162      	b.n	80030c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b90      	ldr	r3, [pc, #576]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d910      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b8d      	ldr	r3, [pc, #564]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	498b      	ldr	r1, [pc, #556]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b89      	ldr	r3, [pc, #548]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e14a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b82      	ldr	r3, [pc, #520]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	497f      	ldr	r1, [pc, #508]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80dc 	beq.w	8003010 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d13c      	bne.n	8002eda <HAL_RCC_ClockConfig+0xf6>
 8002e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xa6>
 8002e84:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e00f      	b.n	8002eaa <HAL_RCC_ClockConfig+0xc6>
 8002e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	667b      	str	r3, [r7, #100]	; 0x64
 8002e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ea6:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eae:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb2:	fa92 f2a2 	rbit	r2, r2
 8002eb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002eb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eba:	fab2 f282 	clz	r2, r2
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	f042 0220 	orr.w	r2, r2, #32
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	f002 021f 	and.w	r2, r2, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d17b      	bne.n	8002fce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0f3      	b.n	80030c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d13c      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x178>
 8002ee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x128>
 8002f06:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCC_ClockConfig+0x148>
 8002f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f28:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f30:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f34:	fa92 f2a2 	rbit	r2, r2
 8002f38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d13a      	bne.n	8002fce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0b2      	b.n	80030c2 <HAL_RCC_ClockConfig+0x2de>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d102      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x1a0>
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	e00d      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1bc>
 8002f84:	2302      	movs	r3, #2
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	2302      	movs	r3, #2
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	61ba      	str	r2, [r7, #24]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	fa92 f2a2 	rbit	r2, r2
 8002faa:	617a      	str	r2, [r7, #20]
  return result;
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	fab2 f282 	clz	r2, r2
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f042 0220 	orr.w	r2, r2, #32
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	f002 021f 	and.w	r2, r2, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e079      	b.n	80030c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fce:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	491a      	ldr	r1, [pc, #104]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe fa16 	bl	8001410 <HAL_GetTick>
 8002fe4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe fa12 	bl	8001410 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e061      	b.n	80030c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_RCC_ClockConfig+0x260>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 020c 	and.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d1eb      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d214      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0207 	bic.w	r2, r3, #7
 8003026:	4906      	ldr	r1, [pc, #24]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_ClockConfig+0x25c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e040      	b.n	80030c2 <HAL_RCC_ClockConfig+0x2de>
 8003040:	40022000 	.word	0x40022000
 8003044:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_ClockConfig+0x2e8>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	491a      	ldr	r1, [pc, #104]	; (80030cc <HAL_RCC_ClockConfig+0x2e8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_RCC_ClockConfig+0x2e8>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4912      	ldr	r1, [pc, #72]	; (80030cc <HAL_RCC_ClockConfig+0x2e8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003086:	f000 f829 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800308a:	4601      	mov	r1, r0
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_ClockConfig+0x2e8>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003094:	22f0      	movs	r2, #240	; 0xf0
 8003096:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	fa92 f2a2 	rbit	r2, r2
 800309e:	60fa      	str	r2, [r7, #12]
  return result;
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	fab2 f282 	clz	r2, r2
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	40d3      	lsrs	r3, r2
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x2ec>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	fa21 f303 	lsr.w	r3, r1, r3
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <HAL_RCC_ClockConfig+0x2f0>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCC_ClockConfig+0x2f4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe f964 	bl	8001388 <HAL_InitTick>
  
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3778      	adds	r7, #120	; 0x78
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08005e38 	.word	0x08005e38
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b08b      	sub	sp, #44	; 0x2c
 80030e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d002      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x30>
 8003106:	2b08      	cmp	r3, #8
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x36>
 800310a:	e03c      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800310e:	623b      	str	r3, [r7, #32]
      break;
 8003110:	e03c      	b.n	800318c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003118:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800311c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	607a      	str	r2, [r7, #4]
  return result;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	220f      	movs	r2, #15
 8003140:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	fa92 f2a2 	rbit	r2, r2
 8003148:	60fa      	str	r2, [r7, #12]
  return result;
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	40d3      	lsrs	r3, r2
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003164:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	fbb2 f2f3 	udiv	r2, r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
 8003174:	e004      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	623b      	str	r3, [r7, #32]
      break;
 8003184:	e002      	b.n	800318c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003188:	623b      	str	r3, [r7, #32]
      break;
 800318a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318c:	6a3b      	ldr	r3, [r7, #32]
}
 800318e:	4618      	mov	r0, r3
 8003190:	372c      	adds	r7, #44	; 0x2c
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	007a1200 	.word	0x007a1200
 80031a4:	08005e48 	.word	0x08005e48
 80031a8:	08005e58 	.word	0x08005e58
 80031ac:	003d0900 	.word	0x003d0900

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b092      	sub	sp, #72	; 0x48
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80d4 	beq.w	800337c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10e      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	61d3      	str	r3, [r2, #28]
 80031ec:	4b48      	ldr	r3, [pc, #288]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b45      	ldr	r3, [pc, #276]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b42      	ldr	r3, [pc, #264]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a41      	ldr	r2, [pc, #260]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fe f8fb 	bl	8001410 <HAL_GetTick>
 800321a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe f8f7 	bl	8001410 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e169      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8084 	beq.w	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003258:	429a      	cmp	r2, r3
 800325a:	d07c      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325c:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	461a      	mov	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	461a      	mov	r2, r3
 80032aa:	2300      	movs	r3, #0
 80032ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04b      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe f8a7 	bl	8001410 <HAL_GetTick>
 80032c2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe f8a3 	bl	8001410 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e113      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	2302      	movs	r3, #2
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	61fb      	str	r3, [r7, #28]
  return result;
 80032f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d108      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800330a:	4b01      	ldr	r3, [pc, #4]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	e00d      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	10908100 	.word	0x10908100
 800331c:	2302      	movs	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	4b78      	ldr	r3, [pc, #480]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2202      	movs	r2, #2
 800332e:	613a      	str	r2, [r7, #16]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0b7      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003356:	4b6d      	ldr	r3, [pc, #436]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	496a      	ldr	r1, [pc, #424]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003364:	4313      	orrs	r3, r2
 8003366:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b66      	ldr	r3, [pc, #408]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4a65      	ldr	r2, [pc, #404]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003388:	4b60      	ldr	r3, [pc, #384]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f023 0203 	bic.w	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	495d      	ldr	r1, [pc, #372]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033a6:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4956      	ldr	r1, [pc, #344]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033c4:	4b51      	ldr	r3, [pc, #324]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	494e      	ldr	r1, [pc, #312]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033e2:	4b4a      	ldr	r3, [pc, #296]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f023 0210 	bic.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4947      	ldr	r1, [pc, #284]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003400:	4b42      	ldr	r3, [pc, #264]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	493f      	ldr	r1, [pc, #252]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f023 0220 	bic.w	r2, r3, #32
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4938      	ldr	r1, [pc, #224]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800343c:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	4930      	ldr	r1, [pc, #192]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800345a:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	4929      	ldr	r1, [pc, #164]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	4921      	ldr	r1, [pc, #132]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	491a      	ldr	r1, [pc, #104]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	490b      	ldr	r1, [pc, #44]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3748      	adds	r7, #72	; 0x48
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e049      	b.n	80035b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fe1e 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 fe68 	bl	8004224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e049      	b.n	8003664 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f841 	bl	800366c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f000 fe11 	bl	8004224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e03c      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d109      	bne.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e02f      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d109      	bne.n	80036e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e022      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d109      	bne.n	80036fa <HAL_TIM_PWM_Start_DMA+0x7a>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e015      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start_DMA+0x94>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e008      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	e1a6      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e03c      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d109      	bne.n	8003762 <HAL_TIM_PWM_Start_DMA+0xe2>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e02f      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d109      	bne.n	800377c <HAL_TIM_PWM_Start_DMA+0xfc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e022      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d109      	bne.n	8003796 <HAL_TIM_PWM_Start_DMA+0x116>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e015      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b10      	cmp	r3, #16
 800379a:	d109      	bne.n	80037b0 <HAL_TIM_PWM_Start_DMA+0x130>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e008      	b.n	80037c2 <HAL_TIM_PWM_Start_DMA+0x142>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d034      	beq.n	8003830 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_TIM_PWM_Start_DMA+0x152>
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e152      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start_DMA+0x166>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e4:	e026      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start_DMA+0x176>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f4:	e01e      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start_DMA+0x186>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003804:	e016      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start_DMA+0x196>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003814:	e00e      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b10      	cmp	r3, #16
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	e006      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382e:	e001      	b.n	8003834 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e123      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	f200 80ae 	bhi.w	8003998 <HAL_TIM_PWM_Start_DMA+0x318>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003879 	.word	0x08003879
 8003848:	08003999 	.word	0x08003999
 800384c:	08003999 	.word	0x08003999
 8003850:	08003999 	.word	0x08003999
 8003854:	080038c1 	.word	0x080038c1
 8003858:	08003999 	.word	0x08003999
 800385c:	08003999 	.word	0x08003999
 8003860:	08003999 	.word	0x08003999
 8003864:	08003909 	.word	0x08003909
 8003868:	08003999 	.word	0x08003999
 800386c:	08003999 	.word	0x08003999
 8003870:	08003999 	.word	0x08003999
 8003874:	08003951 	.word	0x08003951
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	4a81      	ldr	r2, [pc, #516]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x404>)
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	4a80      	ldr	r2, [pc, #512]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	4a7f      	ldr	r2, [pc, #508]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800388e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3334      	adds	r3, #52	; 0x34
 800389c:	461a      	mov	r2, r3
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	f7fd ff3e 	bl	8001720 <HAL_DMA_Start_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0e6      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	60da      	str	r2, [r3, #12]
      break;
 80038be:	e06e      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	4a6f      	ldr	r2, [pc, #444]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x404>)
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x408>)
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	4a6d      	ldr	r2, [pc, #436]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3338      	adds	r3, #56	; 0x38
 80038e4:	461a      	mov	r2, r3
 80038e6:	887b      	ldrh	r3, [r7, #2]
 80038e8:	f7fd ff1a 	bl	8001720 <HAL_DMA_Start_IT>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0c2      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003904:	60da      	str	r2, [r3, #12]
      break;
 8003906:	e04a      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4a5d      	ldr	r2, [pc, #372]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x404>)
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	4a5b      	ldr	r2, [pc, #364]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800391e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	333c      	adds	r3, #60	; 0x3c
 800392c:	461a      	mov	r2, r3
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	f7fd fef6 	bl	8001720 <HAL_DMA_Start_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e09e      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800394c:	60da      	str	r2, [r3, #12]
      break;
 800394e:	e026      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x408>)
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4a49      	ldr	r2, [pc, #292]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3340      	adds	r3, #64	; 0x40
 8003974:	461a      	mov	r2, r3
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	f7fd fed2 	bl	8001720 <HAL_DMA_Start_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07a      	b.n	8003a7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003994:	60da      	str	r2, [r3, #12]
      break;
 8003996:	e002      	b.n	800399e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      break;
 800399c:	bf00      	nop
  }

  if (status == HAL_OK)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d16a      	bne.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 f839 	bl	8004a24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a36      	ldr	r2, [pc, #216]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x410>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_TIM_PWM_Start_DMA+0x364>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_TIM_PWM_Start_DMA+0x414>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_TIM_PWM_Start_DMA+0x364>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <HAL_TIM_PWM_Start_DMA+0x418>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_TIM_PWM_Start_DMA+0x364>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a31      	ldr	r2, [pc, #196]	; (8003a9c <HAL_TIM_PWM_Start_DMA+0x41c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_TIM_PWM_Start_DMA+0x364>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_TIM_PWM_Start_DMA+0x420>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_PWM_Start_DMA+0x368>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0x36a>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d013      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d115      	bne.n	8003a66 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b06      	cmp	r3, #6
 8003a4a:	d015      	beq.n	8003a78 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d011      	beq.n	8003a78 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	e008      	b.n	8003a78 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e000      	b.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	08004115 	.word	0x08004115
 8003a88:	080041bd 	.word	0x080041bd
 8003a8c:	08004083 	.word	0x08004083
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40013400 	.word	0x40013400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	00010007 	.word	0x00010007

08003ab0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d855      	bhi.n	8003b70 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003ac4:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003b71 	.word	0x08003b71
 8003ad4:	08003b71 	.word	0x08003b71
 8003ad8:	08003b71 	.word	0x08003b71
 8003adc:	08003b1d 	.word	0x08003b1d
 8003ae0:	08003b71 	.word	0x08003b71
 8003ae4:	08003b71 	.word	0x08003b71
 8003ae8:	08003b71 	.word	0x08003b71
 8003aec:	08003b39 	.word	0x08003b39
 8003af0:	08003b71 	.word	0x08003b71
 8003af4:	08003b71 	.word	0x08003b71
 8003af8:	08003b71 	.word	0x08003b71
 8003afc:	08003b55 	.word	0x08003b55
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fd fe62 	bl	80017de <HAL_DMA_Abort_IT>
      break;
 8003b1a:	e02c      	b.n	8003b76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd fe54 	bl	80017de <HAL_DMA_Abort_IT>
      break;
 8003b36:	e01e      	b.n	8003b76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd fe46 	bl	80017de <HAL_DMA_Abort_IT>
      break;
 8003b52:	e010      	b.n	8003b76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fe38 	bl	80017de <HAL_DMA_Abort_IT>
      break;
 8003b6e:	e002      	b.n	8003b76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f040 8081 	bne.w	8003c80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ff4c 	bl	8004a24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a3d      	ldr	r2, [pc, #244]	; (8003c90 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a3b      	ldr	r2, [pc, #236]	; (8003c94 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3a      	ldr	r2, [pc, #232]	; (8003c98 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_Stop_DMA+0x112>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	f240 4344 	movw	r3, #1092	; 0x444
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	f240 4344 	movw	r3, #1092	; 0x444
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c36:	e023      	b.n	8003c80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d104      	bne.n	8003c48 <HAL_TIM_PWM_Stop_DMA+0x198>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c46:	e01b      	b.n	8003c80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d104      	bne.n	8003c58 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c56:	e013      	b.n	8003c80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	d104      	bne.n	8003c68 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c66:	e00b      	b.n	8003c80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d104      	bne.n	8003c78 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c76:	e003      	b.n	8003c80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0ff      	b.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b14      	cmp	r3, #20
 8003cca:	f200 80f0 	bhi.w	8003eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d29 	.word	0x08003d29
 8003cd8:	08003eaf 	.word	0x08003eaf
 8003cdc:	08003eaf 	.word	0x08003eaf
 8003ce0:	08003eaf 	.word	0x08003eaf
 8003ce4:	08003d69 	.word	0x08003d69
 8003ce8:	08003eaf 	.word	0x08003eaf
 8003cec:	08003eaf 	.word	0x08003eaf
 8003cf0:	08003eaf 	.word	0x08003eaf
 8003cf4:	08003dab 	.word	0x08003dab
 8003cf8:	08003eaf 	.word	0x08003eaf
 8003cfc:	08003eaf 	.word	0x08003eaf
 8003d00:	08003eaf 	.word	0x08003eaf
 8003d04:	08003deb 	.word	0x08003deb
 8003d08:	08003eaf 	.word	0x08003eaf
 8003d0c:	08003eaf 	.word	0x08003eaf
 8003d10:	08003eaf 	.word	0x08003eaf
 8003d14:	08003e2d 	.word	0x08003e2d
 8003d18:	08003eaf 	.word	0x08003eaf
 8003d1c:	08003eaf 	.word	0x08003eaf
 8003d20:	08003eaf 	.word	0x08003eaf
 8003d24:	08003e6d 	.word	0x08003e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fb08 	bl	8004344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
      break;
 8003d66:	e0a5      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fb78 	bl	8004464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6999      	ldr	r1, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
      break;
 8003da8:	e084      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fbe1 	bl	8004578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0208 	orr.w	r2, r2, #8
 8003dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0204 	bic.w	r2, r2, #4
 8003dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]
      break;
 8003de8:	e064      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fc49 	bl	8004688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	61da      	str	r2, [r3, #28]
      break;
 8003e2a:	e043      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fc92 	bl	800475c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e6a:	e023      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fcd6 	bl	8004824 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003eac:	e002      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0b6      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x18a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f20:	d03e      	beq.n	8003fa0 <HAL_TIM_ConfigClockSource+0xd8>
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	f200 8087 	bhi.w	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	f000 8086 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x176>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d87f      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f38:	2b70      	cmp	r3, #112	; 0x70
 8003f3a:	d01a      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0xaa>
 8003f3c:	2b70      	cmp	r3, #112	; 0x70
 8003f3e:	d87b      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f40:	2b60      	cmp	r3, #96	; 0x60
 8003f42:	d050      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x11e>
 8003f44:	2b60      	cmp	r3, #96	; 0x60
 8003f46:	d877      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f48:	2b50      	cmp	r3, #80	; 0x50
 8003f4a:	d03c      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0xfe>
 8003f4c:	2b50      	cmp	r3, #80	; 0x50
 8003f4e:	d873      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d058      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x13e>
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d86f      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	d064      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f5c:	2b30      	cmp	r3, #48	; 0x30
 8003f5e:	d86b      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d060      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d867      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05c      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d05a      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f70:	e062      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f000 fd2f 	bl	80049e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	609a      	str	r2, [r3, #8]
      break;
 8003f9e:	e04f      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6899      	ldr	r1, [r3, #8]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f000 fd18 	bl	80049e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fc2:	609a      	str	r2, [r3, #8]
      break;
 8003fc4:	e03c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f000 fc8c 	bl	80048f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2150      	movs	r1, #80	; 0x50
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fce5 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e02c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f000 fcab 	bl	800494e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2160      	movs	r1, #96	; 0x60
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fcd5 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 8004004:	e01c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	461a      	mov	r2, r3
 8004014:	f000 fc6c 	bl	80048f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2140      	movs	r1, #64	; 0x40
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fcc5 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 8004024:	e00c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f000 fcbc 	bl	80049ae <TIM_ITRx_SetConfig>
      break;
 8004036:	e003      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	e000      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800403e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d107      	bne.n	80040aa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	e02a      	b.n	8004100 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d107      	bne.n	80040c4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2202      	movs	r2, #2
 80040b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c2:	e01d      	b.n	8004100 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d107      	bne.n	80040de <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2204      	movs	r2, #4
 80040d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040dc:	e010      	b.n	8004100 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d107      	bne.n	80040f8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2208      	movs	r2, #8
 80040ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f6:	e003      	b.n	8004100 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff ffb4 	bl	800406e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d10b      	bne.n	8004144 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d136      	bne.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004142:	e031      	b.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d10b      	bne.n	8004166 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2202      	movs	r2, #2
 8004152:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d125      	bne.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	e020      	b.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d10b      	bne.n	8004188 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2204      	movs	r2, #4
 8004174:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d114      	bne.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004186:	e00f      	b.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	d10a      	bne.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2208      	movs	r2, #8
 8004196:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d103      	bne.n	80041a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7fc fcfb 	bl	8000ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d103      	bne.n	80041dc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	771a      	strb	r2, [r3, #28]
 80041da:	e019      	b.n	8004210 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d103      	bne.n	80041ee <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2202      	movs	r2, #2
 80041ea:	771a      	strb	r2, [r3, #28]
 80041ec:	e010      	b.n	8004210 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d103      	bne.n	8004200 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2204      	movs	r2, #4
 80041fc:	771a      	strb	r2, [r3, #28]
 80041fe:	e007      	b.n	8004210 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d102      	bne.n	8004210 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2208      	movs	r2, #8
 800420e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff ff22 	bl	800405a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <TIM_Base_SetConfig+0x104>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a39      	ldr	r2, [pc, #228]	; (800432c <TIM_Base_SetConfig+0x108>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a38      	ldr	r2, [pc, #224]	; (8004330 <TIM_Base_SetConfig+0x10c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a37      	ldr	r2, [pc, #220]	; (8004334 <TIM_Base_SetConfig+0x110>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2d      	ldr	r2, [pc, #180]	; (8004328 <TIM_Base_SetConfig+0x104>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01b      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d017      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2a      	ldr	r2, [pc, #168]	; (800432c <TIM_Base_SetConfig+0x108>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a29      	ldr	r2, [pc, #164]	; (8004330 <TIM_Base_SetConfig+0x10c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00f      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a28      	ldr	r2, [pc, #160]	; (8004334 <TIM_Base_SetConfig+0x110>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a27      	ldr	r2, [pc, #156]	; (8004338 <TIM_Base_SetConfig+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a26      	ldr	r2, [pc, #152]	; (800433c <TIM_Base_SetConfig+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a25      	ldr	r2, [pc, #148]	; (8004340 <TIM_Base_SetConfig+0x11c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d108      	bne.n	80042c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <TIM_Base_SetConfig+0x104>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a11      	ldr	r2, [pc, #68]	; (8004334 <TIM_Base_SetConfig+0x110>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a10      	ldr	r2, [pc, #64]	; (8004338 <TIM_Base_SetConfig+0x114>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a0f      	ldr	r2, [pc, #60]	; (800433c <TIM_Base_SetConfig+0x118>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <TIM_Base_SetConfig+0x11c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d103      	bne.n	8004314 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	615a      	str	r2, [r3, #20]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40013400 	.word	0x40013400
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800

08004344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f023 0302 	bic.w	r3, r3, #2
 8004390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a2c      	ldr	r2, [pc, #176]	; (8004450 <TIM_OC1_SetConfig+0x10c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00f      	beq.n	80043c4 <TIM_OC1_SetConfig+0x80>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <TIM_OC1_SetConfig+0x110>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <TIM_OC1_SetConfig+0x80>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <TIM_OC1_SetConfig+0x114>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d007      	beq.n	80043c4 <TIM_OC1_SetConfig+0x80>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a29      	ldr	r2, [pc, #164]	; (800445c <TIM_OC1_SetConfig+0x118>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_OC1_SetConfig+0x80>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a28      	ldr	r2, [pc, #160]	; (8004460 <TIM_OC1_SetConfig+0x11c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10c      	bne.n	80043de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0308 	bic.w	r3, r3, #8
 80043ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <TIM_OC1_SetConfig+0x10c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <TIM_OC1_SetConfig+0xc2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <TIM_OC1_SetConfig+0x110>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_OC1_SetConfig+0xc2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <TIM_OC1_SetConfig+0x114>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <TIM_OC1_SetConfig+0xc2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <TIM_OC1_SetConfig+0x118>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_OC1_SetConfig+0xc2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <TIM_OC1_SetConfig+0x11c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d111      	bne.n	800442a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800440c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	621a      	str	r2, [r3, #32]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40013400 	.word	0x40013400
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800

08004464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0320 	bic.w	r3, r3, #32
 80044b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a28      	ldr	r2, [pc, #160]	; (8004564 <TIM_OC2_SetConfig+0x100>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_OC2_SetConfig+0x6c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a27      	ldr	r2, [pc, #156]	; (8004568 <TIM_OC2_SetConfig+0x104>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10d      	bne.n	80044ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <TIM_OC2_SetConfig+0x100>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00f      	beq.n	8004514 <TIM_OC2_SetConfig+0xb0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <TIM_OC2_SetConfig+0x104>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00b      	beq.n	8004514 <TIM_OC2_SetConfig+0xb0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a1b      	ldr	r2, [pc, #108]	; (800456c <TIM_OC2_SetConfig+0x108>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <TIM_OC2_SetConfig+0xb0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <TIM_OC2_SetConfig+0x10c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_OC2_SetConfig+0xb0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a19      	ldr	r2, [pc, #100]	; (8004574 <TIM_OC2_SetConfig+0x110>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d113      	bne.n	800453c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004522:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a27      	ldr	r2, [pc, #156]	; (8004674 <TIM_OC3_SetConfig+0xfc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_OC3_SetConfig+0x6a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <TIM_OC3_SetConfig+0x100>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d10d      	bne.n	80045fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <TIM_OC3_SetConfig+0xfc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_OC3_SetConfig+0xae>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <TIM_OC3_SetConfig+0x100>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_OC3_SetConfig+0xae>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1a      	ldr	r2, [pc, #104]	; (800467c <TIM_OC3_SetConfig+0x104>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_OC3_SetConfig+0xae>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <TIM_OC3_SetConfig+0x108>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_OC3_SetConfig+0xae>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a18      	ldr	r2, [pc, #96]	; (8004684 <TIM_OC3_SetConfig+0x10c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d113      	bne.n	800464e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800462c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	031b      	lsls	r3, r3, #12
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a18      	ldr	r2, [pc, #96]	; (8004748 <TIM_OC4_SetConfig+0xc0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00f      	beq.n	800470c <TIM_OC4_SetConfig+0x84>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <TIM_OC4_SetConfig+0xc4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00b      	beq.n	800470c <TIM_OC4_SetConfig+0x84>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <TIM_OC4_SetConfig+0xc8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <TIM_OC4_SetConfig+0x84>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a15      	ldr	r2, [pc, #84]	; (8004754 <TIM_OC4_SetConfig+0xcc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_OC4_SetConfig+0x84>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a14      	ldr	r2, [pc, #80]	; (8004758 <TIM_OC4_SetConfig+0xd0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d109      	bne.n	8004720 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40013400 	.word	0x40013400
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <TIM_OC5_SetConfig+0xb4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00f      	beq.n	80047d6 <TIM_OC5_SetConfig+0x7a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <TIM_OC5_SetConfig+0xb8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_OC5_SetConfig+0x7a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a15      	ldr	r2, [pc, #84]	; (8004818 <TIM_OC5_SetConfig+0xbc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_OC5_SetConfig+0x7a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a14      	ldr	r2, [pc, #80]	; (800481c <TIM_OC5_SetConfig+0xc0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_OC5_SetConfig+0x7a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <TIM_OC5_SetConfig+0xc4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d109      	bne.n	80047ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	621a      	str	r2, [r3, #32]
}
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40013400 	.word	0x40013400
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800

08004824 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800486a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	051b      	lsls	r3, r3, #20
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <TIM_OC6_SetConfig+0xb8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00f      	beq.n	80048a0 <TIM_OC6_SetConfig+0x7c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a17      	ldr	r2, [pc, #92]	; (80048e0 <TIM_OC6_SetConfig+0xbc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00b      	beq.n	80048a0 <TIM_OC6_SetConfig+0x7c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a16      	ldr	r2, [pc, #88]	; (80048e4 <TIM_OC6_SetConfig+0xc0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_OC6_SetConfig+0x7c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <TIM_OC6_SetConfig+0xc4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_OC6_SetConfig+0x7c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a14      	ldr	r2, [pc, #80]	; (80048ec <TIM_OC6_SetConfig+0xc8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d109      	bne.n	80048b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	029b      	lsls	r3, r3, #10
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40013400 	.word	0x40013400
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800

080048f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 030a 	bic.w	r3, r3, #10
 800492c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b087      	sub	sp, #28
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f023 0210 	bic.w	r2, r3, #16
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	031b      	lsls	r3, r3, #12
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800498a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f043 0307 	orr.w	r3, r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	609a      	str	r2, [r3, #8]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	021a      	lsls	r2, r3, #8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2201      	movs	r2, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e063      	b.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d108      	bne.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ac2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d013      	beq.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d10c      	bne.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40013400 	.word	0x40013400
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40000800 	.word	0x40000800
 8004b6c:	40014000 	.word	0x40014000

08004b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e065      	b.n	8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d115      	bne.n	8004c46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	051b      	lsls	r3, r3, #20
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40013400 	.word	0x40013400

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ca4 <__libc_init_array+0x38>)
 8004c70:	4c0d      	ldr	r4, [pc, #52]	; (8004ca8 <__libc_init_array+0x3c>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	2600      	movs	r6, #0
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	4d0b      	ldr	r5, [pc, #44]	; (8004cac <__libc_init_array+0x40>)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	; (8004cb0 <__libc_init_array+0x44>)
 8004c80:	f001 f8cc 	bl	8005e1c <_init>
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	2600      	movs	r6, #0
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	08006040 	.word	0x08006040
 8004ca8:	08006040 	.word	0x08006040
 8004cac:	08006040 	.word	0x08006040
 8004cb0:	08006044 	.word	0x08006044

08004cb4 <memset>:
 8004cb4:	4402      	add	r2, r0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d100      	bne.n	8004cbe <memset+0xa>
 8004cbc:	4770      	bx	lr
 8004cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc2:	e7f9      	b.n	8004cb8 <memset+0x4>
 8004cc4:	0000      	movs	r0, r0
	...

08004cc8 <tan>:
 8004cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cca:	ec53 2b10 	vmov	r2, r3, d0
 8004cce:	4816      	ldr	r0, [pc, #88]	; (8004d28 <tan+0x60>)
 8004cd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cd4:	4281      	cmp	r1, r0
 8004cd6:	dc07      	bgt.n	8004ce8 <tan+0x20>
 8004cd8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8004d20 <tan+0x58>
 8004cdc:	2001      	movs	r0, #1
 8004cde:	b005      	add	sp, #20
 8004ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce4:	f000 bd80 	b.w	80057e8 <__kernel_tan>
 8004ce8:	4810      	ldr	r0, [pc, #64]	; (8004d2c <tan+0x64>)
 8004cea:	4281      	cmp	r1, r0
 8004cec:	dd09      	ble.n	8004d02 <tan+0x3a>
 8004cee:	ee10 0a10 	vmov	r0, s0
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f7fb fa6c 	bl	80001d0 <__aeabi_dsub>
 8004cf8:	ec41 0b10 	vmov	d0, r0, r1
 8004cfc:	b005      	add	sp, #20
 8004cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d02:	4668      	mov	r0, sp
 8004d04:	f000 f814 	bl	8004d30 <__ieee754_rem_pio2>
 8004d08:	0040      	lsls	r0, r0, #1
 8004d0a:	f000 0002 	and.w	r0, r0, #2
 8004d0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d12:	ed9d 0b00 	vldr	d0, [sp]
 8004d16:	f1c0 0001 	rsb	r0, r0, #1
 8004d1a:	f000 fd65 	bl	80057e8 <__kernel_tan>
 8004d1e:	e7ed      	b.n	8004cfc <tan+0x34>
	...
 8004d28:	3fe921fb 	.word	0x3fe921fb
 8004d2c:	7fefffff 	.word	0x7fefffff

08004d30 <__ieee754_rem_pio2>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	ed2d 8b02 	vpush	{d8}
 8004d38:	ec55 4b10 	vmov	r4, r5, d0
 8004d3c:	4bca      	ldr	r3, [pc, #808]	; (8005068 <__ieee754_rem_pio2+0x338>)
 8004d3e:	b08b      	sub	sp, #44	; 0x2c
 8004d40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004d44:	4598      	cmp	r8, r3
 8004d46:	4682      	mov	sl, r0
 8004d48:	9502      	str	r5, [sp, #8]
 8004d4a:	dc08      	bgt.n	8004d5e <__ieee754_rem_pio2+0x2e>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	ed80 0b00 	vstr	d0, [r0]
 8004d54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d58:	f04f 0b00 	mov.w	fp, #0
 8004d5c:	e028      	b.n	8004db0 <__ieee754_rem_pio2+0x80>
 8004d5e:	4bc3      	ldr	r3, [pc, #780]	; (800506c <__ieee754_rem_pio2+0x33c>)
 8004d60:	4598      	cmp	r8, r3
 8004d62:	dc78      	bgt.n	8004e56 <__ieee754_rem_pio2+0x126>
 8004d64:	9b02      	ldr	r3, [sp, #8]
 8004d66:	4ec2      	ldr	r6, [pc, #776]	; (8005070 <__ieee754_rem_pio2+0x340>)
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	ee10 0a10 	vmov	r0, s0
 8004d6e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005030 <__ieee754_rem_pio2+0x300>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	4629      	mov	r1, r5
 8004d76:	dd39      	ble.n	8004dec <__ieee754_rem_pio2+0xbc>
 8004d78:	f7fb fa2a 	bl	80001d0 <__aeabi_dsub>
 8004d7c:	45b0      	cmp	r8, r6
 8004d7e:	4604      	mov	r4, r0
 8004d80:	460d      	mov	r5, r1
 8004d82:	d01b      	beq.n	8004dbc <__ieee754_rem_pio2+0x8c>
 8004d84:	a3ac      	add	r3, pc, #688	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fa21 	bl	80001d0 <__aeabi_dsub>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	e9ca 2300 	strd	r2, r3, [sl]
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f7fb fa19 	bl	80001d0 <__aeabi_dsub>
 8004d9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fa14 	bl	80001d0 <__aeabi_dsub>
 8004da8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004dac:	f04f 0b01 	mov.w	fp, #1
 8004db0:	4658      	mov	r0, fp
 8004db2:	b00b      	add	sp, #44	; 0x2c
 8004db4:	ecbd 8b02 	vpop	{d8}
 8004db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005040 <__ieee754_rem_pio2+0x310>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fa05 	bl	80001d0 <__aeabi_dsub>
 8004dc6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	4604      	mov	r4, r0
 8004dce:	460d      	mov	r5, r1
 8004dd0:	f7fb f9fe 	bl	80001d0 <__aeabi_dsub>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	e9ca 2300 	strd	r2, r3, [sl]
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb f9f6 	bl	80001d0 <__aeabi_dsub>
 8004de4:	a398      	add	r3, pc, #608	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	e7db      	b.n	8004da4 <__ieee754_rem_pio2+0x74>
 8004dec:	f7fb f9f2 	bl	80001d4 <__adddf3>
 8004df0:	45b0      	cmp	r8, r6
 8004df2:	4604      	mov	r4, r0
 8004df4:	460d      	mov	r5, r1
 8004df6:	d016      	beq.n	8004e26 <__ieee754_rem_pio2+0xf6>
 8004df8:	a38f      	add	r3, pc, #572	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb f9e9 	bl	80001d4 <__adddf3>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	e9ca 2300 	strd	r2, r3, [sl]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb f9df 	bl	80001d0 <__aeabi_dsub>
 8004e12:	a389      	add	r3, pc, #548	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb f9dc 	bl	80001d4 <__adddf3>
 8004e1c:	f04f 3bff 	mov.w	fp, #4294967295
 8004e20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e24:	e7c4      	b.n	8004db0 <__ieee754_rem_pio2+0x80>
 8004e26:	a386      	add	r3, pc, #536	; (adr r3, 8005040 <__ieee754_rem_pio2+0x310>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f7fb f9d2 	bl	80001d4 <__adddf3>
 8004e30:	a385      	add	r3, pc, #532	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	4604      	mov	r4, r0
 8004e38:	460d      	mov	r5, r1
 8004e3a:	f7fb f9cb 	bl	80001d4 <__adddf3>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	e9ca 2300 	strd	r2, r3, [sl]
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f7fb f9c1 	bl	80001d0 <__aeabi_dsub>
 8004e4e:	a37e      	add	r3, pc, #504	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	e7e0      	b.n	8004e18 <__ieee754_rem_pio2+0xe8>
 8004e56:	4b87      	ldr	r3, [pc, #540]	; (8005074 <__ieee754_rem_pio2+0x344>)
 8004e58:	4598      	cmp	r8, r3
 8004e5a:	f300 80d9 	bgt.w	8005010 <__ieee754_rem_pio2+0x2e0>
 8004e5e:	f000 fecd 	bl	8005bfc <fabs>
 8004e62:	ec55 4b10 	vmov	r4, r5, d0
 8004e66:	ee10 0a10 	vmov	r0, s0
 8004e6a:	a379      	add	r3, pc, #484	; (adr r3, 8005050 <__ieee754_rem_pio2+0x320>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7fb fb65 	bl	8000540 <__aeabi_dmul>
 8004e76:	4b80      	ldr	r3, [pc, #512]	; (8005078 <__ieee754_rem_pio2+0x348>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f7fb f9ab 	bl	80001d4 <__adddf3>
 8004e7e:	f7fb fdf9 	bl	8000a74 <__aeabi_d2iz>
 8004e82:	4683      	mov	fp, r0
 8004e84:	f7fb faf2 	bl	800046c <__aeabi_i2d>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	ec43 2b18 	vmov	d8, r2, r3
 8004e90:	a367      	add	r3, pc, #412	; (adr r3, 8005030 <__ieee754_rem_pio2+0x300>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb fb53 	bl	8000540 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb f995 	bl	80001d0 <__aeabi_dsub>
 8004ea6:	a364      	add	r3, pc, #400	; (adr r3, 8005038 <__ieee754_rem_pio2+0x308>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	4606      	mov	r6, r0
 8004eae:	460f      	mov	r7, r1
 8004eb0:	ec51 0b18 	vmov	r0, r1, d8
 8004eb4:	f7fb fb44 	bl	8000540 <__aeabi_dmul>
 8004eb8:	f1bb 0f1f 	cmp.w	fp, #31
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	460d      	mov	r5, r1
 8004ec0:	dc0d      	bgt.n	8004ede <__ieee754_rem_pio2+0x1ae>
 8004ec2:	4b6e      	ldr	r3, [pc, #440]	; (800507c <__ieee754_rem_pio2+0x34c>)
 8004ec4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ecc:	4543      	cmp	r3, r8
 8004ece:	d006      	beq.n	8004ede <__ieee754_rem_pio2+0x1ae>
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	462b      	mov	r3, r5
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	f7fb f97a 	bl	80001d0 <__aeabi_dsub>
 8004edc:	e00f      	b.n	8004efe <__ieee754_rem_pio2+0x1ce>
 8004ede:	462b      	mov	r3, r5
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f7fb f973 	bl	80001d0 <__aeabi_dsub>
 8004eea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ef4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004ef8:	f1b8 0f10 	cmp.w	r8, #16
 8004efc:	dc02      	bgt.n	8004f04 <__ieee754_rem_pio2+0x1d4>
 8004efe:	e9ca 0100 	strd	r0, r1, [sl]
 8004f02:	e039      	b.n	8004f78 <__ieee754_rem_pio2+0x248>
 8004f04:	a34e      	add	r3, pc, #312	; (adr r3, 8005040 <__ieee754_rem_pio2+0x310>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	ec51 0b18 	vmov	r0, r1, d8
 8004f0e:	f7fb fb17 	bl	8000540 <__aeabi_dmul>
 8004f12:	4604      	mov	r4, r0
 8004f14:	460d      	mov	r5, r1
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb f957 	bl	80001d0 <__aeabi_dsub>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4680      	mov	r8, r0
 8004f28:	4689      	mov	r9, r1
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	f7fb f94f 	bl	80001d0 <__aeabi_dsub>
 8004f32:	4622      	mov	r2, r4
 8004f34:	462b      	mov	r3, r5
 8004f36:	f7fb f94b 	bl	80001d0 <__aeabi_dsub>
 8004f3a:	a343      	add	r3, pc, #268	; (adr r3, 8005048 <__ieee754_rem_pio2+0x318>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	4604      	mov	r4, r0
 8004f42:	460d      	mov	r5, r1
 8004f44:	ec51 0b18 	vmov	r0, r1, d8
 8004f48:	f7fb fafa 	bl	8000540 <__aeabi_dmul>
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	462b      	mov	r3, r5
 8004f50:	f7fb f93e 	bl	80001d0 <__aeabi_dsub>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4604      	mov	r4, r0
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4649      	mov	r1, r9
 8004f60:	f7fb f936 	bl	80001d0 <__aeabi_dsub>
 8004f64:	9a03      	ldr	r2, [sp, #12]
 8004f66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b31      	cmp	r3, #49	; 0x31
 8004f6e:	dc24      	bgt.n	8004fba <__ieee754_rem_pio2+0x28a>
 8004f70:	e9ca 0100 	strd	r0, r1, [sl]
 8004f74:	4646      	mov	r6, r8
 8004f76:	464f      	mov	r7, r9
 8004f78:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	4639      	mov	r1, r7
 8004f84:	f7fb f924 	bl	80001d0 <__aeabi_dsub>
 8004f88:	462b      	mov	r3, r5
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	f7fb f920 	bl	80001d0 <__aeabi_dsub>
 8004f90:	9b02      	ldr	r3, [sp, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f98:	f6bf af0a 	bge.w	8004db0 <__ieee754_rem_pio2+0x80>
 8004f9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004fa0:	f8ca 3004 	str.w	r3, [sl, #4]
 8004fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fa8:	f8ca 8000 	str.w	r8, [sl]
 8004fac:	f8ca 0008 	str.w	r0, [sl, #8]
 8004fb0:	f8ca 300c 	str.w	r3, [sl, #12]
 8004fb4:	f1cb 0b00 	rsb	fp, fp, #0
 8004fb8:	e6fa      	b.n	8004db0 <__ieee754_rem_pio2+0x80>
 8004fba:	a327      	add	r3, pc, #156	; (adr r3, 8005058 <__ieee754_rem_pio2+0x328>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	ec51 0b18 	vmov	r0, r1, d8
 8004fc4:	f7fb fabc 	bl	8000540 <__aeabi_dmul>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb f8fc 	bl	80001d0 <__aeabi_dsub>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb f8f4 	bl	80001d0 <__aeabi_dsub>
 8004fe8:	4622      	mov	r2, r4
 8004fea:	462b      	mov	r3, r5
 8004fec:	f7fb f8f0 	bl	80001d0 <__aeabi_dsub>
 8004ff0:	a31b      	add	r3, pc, #108	; (adr r3, 8005060 <__ieee754_rem_pio2+0x330>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	460d      	mov	r5, r1
 8004ffa:	ec51 0b18 	vmov	r0, r1, d8
 8004ffe:	f7fb fa9f 	bl	8000540 <__aeabi_dmul>
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	f7fb f8e3 	bl	80001d0 <__aeabi_dsub>
 800500a:	4604      	mov	r4, r0
 800500c:	460d      	mov	r5, r1
 800500e:	e75f      	b.n	8004ed0 <__ieee754_rem_pio2+0x1a0>
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <__ieee754_rem_pio2+0x350>)
 8005012:	4598      	cmp	r8, r3
 8005014:	dd36      	ble.n	8005084 <__ieee754_rem_pio2+0x354>
 8005016:	ee10 2a10 	vmov	r2, s0
 800501a:	462b      	mov	r3, r5
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb f8d6 	bl	80001d0 <__aeabi_dsub>
 8005024:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005028:	e9ca 0100 	strd	r0, r1, [sl]
 800502c:	e694      	b.n	8004d58 <__ieee754_rem_pio2+0x28>
 800502e:	bf00      	nop
 8005030:	54400000 	.word	0x54400000
 8005034:	3ff921fb 	.word	0x3ff921fb
 8005038:	1a626331 	.word	0x1a626331
 800503c:	3dd0b461 	.word	0x3dd0b461
 8005040:	1a600000 	.word	0x1a600000
 8005044:	3dd0b461 	.word	0x3dd0b461
 8005048:	2e037073 	.word	0x2e037073
 800504c:	3ba3198a 	.word	0x3ba3198a
 8005050:	6dc9c883 	.word	0x6dc9c883
 8005054:	3fe45f30 	.word	0x3fe45f30
 8005058:	2e000000 	.word	0x2e000000
 800505c:	3ba3198a 	.word	0x3ba3198a
 8005060:	252049c1 	.word	0x252049c1
 8005064:	397b839a 	.word	0x397b839a
 8005068:	3fe921fb 	.word	0x3fe921fb
 800506c:	4002d97b 	.word	0x4002d97b
 8005070:	3ff921fb 	.word	0x3ff921fb
 8005074:	413921fb 	.word	0x413921fb
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	08005e68 	.word	0x08005e68
 8005080:	7fefffff 	.word	0x7fefffff
 8005084:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005088:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800508c:	ee10 0a10 	vmov	r0, s0
 8005090:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005094:	ee10 6a10 	vmov	r6, s0
 8005098:	460f      	mov	r7, r1
 800509a:	f7fb fceb 	bl	8000a74 <__aeabi_d2iz>
 800509e:	f7fb f9e5 	bl	800046c <__aeabi_i2d>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4630      	mov	r0, r6
 80050a8:	4639      	mov	r1, r7
 80050aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050ae:	f7fb f88f 	bl	80001d0 <__aeabi_dsub>
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <__ieee754_rem_pio2+0x410>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	f7fb fa43 	bl	8000540 <__aeabi_dmul>
 80050ba:	460f      	mov	r7, r1
 80050bc:	4606      	mov	r6, r0
 80050be:	f7fb fcd9 	bl	8000a74 <__aeabi_d2iz>
 80050c2:	f7fb f9d3 	bl	800046c <__aeabi_i2d>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4630      	mov	r0, r6
 80050cc:	4639      	mov	r1, r7
 80050ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050d2:	f7fb f87d 	bl	80001d0 <__aeabi_dsub>
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <__ieee754_rem_pio2+0x410>)
 80050d8:	2200      	movs	r2, #0
 80050da:	f7fb fa31 	bl	8000540 <__aeabi_dmul>
 80050de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80050e2:	ad04      	add	r5, sp, #16
 80050e4:	f04f 0803 	mov.w	r8, #3
 80050e8:	46a9      	mov	r9, r5
 80050ea:	2600      	movs	r6, #0
 80050ec:	2700      	movs	r7, #0
 80050ee:	4632      	mov	r2, r6
 80050f0:	463b      	mov	r3, r7
 80050f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80050f6:	46c3      	mov	fp, r8
 80050f8:	3d08      	subs	r5, #8
 80050fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80050fe:	f7fb fc87 	bl	8000a10 <__aeabi_dcmpeq>
 8005102:	2800      	cmp	r0, #0
 8005104:	d1f3      	bne.n	80050ee <__ieee754_rem_pio2+0x3be>
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <__ieee754_rem_pio2+0x414>)
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	2302      	movs	r3, #2
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	4622      	mov	r2, r4
 8005110:	465b      	mov	r3, fp
 8005112:	4651      	mov	r1, sl
 8005114:	4648      	mov	r0, r9
 8005116:	f000 f817 	bl	8005148 <__kernel_rem_pio2>
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	4683      	mov	fp, r0
 8005120:	f6bf ae46 	bge.w	8004db0 <__ieee754_rem_pio2+0x80>
 8005124:	e9da 2100 	ldrd	r2, r1, [sl]
 8005128:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800512c:	e9ca 2300 	strd	r2, r3, [sl]
 8005130:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005138:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800513c:	e73a      	b.n	8004fb4 <__ieee754_rem_pio2+0x284>
 800513e:	bf00      	nop
 8005140:	41700000 	.word	0x41700000
 8005144:	08005ee8 	.word	0x08005ee8

08005148 <__kernel_rem_pio2>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	ed2d 8b02 	vpush	{d8}
 8005150:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005154:	f112 0f14 	cmn.w	r2, #20
 8005158:	9308      	str	r3, [sp, #32]
 800515a:	9101      	str	r1, [sp, #4]
 800515c:	4bc4      	ldr	r3, [pc, #784]	; (8005470 <__kernel_rem_pio2+0x328>)
 800515e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005160:	900b      	str	r0, [sp, #44]	; 0x2c
 8005162:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005166:	9302      	str	r3, [sp, #8]
 8005168:	9b08      	ldr	r3, [sp, #32]
 800516a:	f103 33ff 	add.w	r3, r3, #4294967295
 800516e:	bfa8      	it	ge
 8005170:	1ed4      	subge	r4, r2, #3
 8005172:	9306      	str	r3, [sp, #24]
 8005174:	bfb2      	itee	lt
 8005176:	2400      	movlt	r4, #0
 8005178:	2318      	movge	r3, #24
 800517a:	fb94 f4f3 	sdivge	r4, r4, r3
 800517e:	f06f 0317 	mvn.w	r3, #23
 8005182:	fb04 3303 	mla	r3, r4, r3, r3
 8005186:	eb03 0a02 	add.w	sl, r3, r2
 800518a:	9b02      	ldr	r3, [sp, #8]
 800518c:	9a06      	ldr	r2, [sp, #24]
 800518e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005460 <__kernel_rem_pio2+0x318>
 8005192:	eb03 0802 	add.w	r8, r3, r2
 8005196:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005198:	1aa7      	subs	r7, r4, r2
 800519a:	ae22      	add	r6, sp, #136	; 0x88
 800519c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80051a0:	2500      	movs	r5, #0
 80051a2:	4545      	cmp	r5, r8
 80051a4:	dd13      	ble.n	80051ce <__kernel_rem_pio2+0x86>
 80051a6:	9b08      	ldr	r3, [sp, #32]
 80051a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005460 <__kernel_rem_pio2+0x318>
 80051ac:	aa22      	add	r2, sp, #136	; 0x88
 80051ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80051b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80051b6:	f04f 0800 	mov.w	r8, #0
 80051ba:	9b02      	ldr	r3, [sp, #8]
 80051bc:	4598      	cmp	r8, r3
 80051be:	dc2f      	bgt.n	8005220 <__kernel_rem_pio2+0xd8>
 80051c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80051c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80051c8:	462f      	mov	r7, r5
 80051ca:	2600      	movs	r6, #0
 80051cc:	e01b      	b.n	8005206 <__kernel_rem_pio2+0xbe>
 80051ce:	42ef      	cmn	r7, r5
 80051d0:	d407      	bmi.n	80051e2 <__kernel_rem_pio2+0x9a>
 80051d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80051d6:	f7fb f949 	bl	800046c <__aeabi_i2d>
 80051da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80051de:	3501      	adds	r5, #1
 80051e0:	e7df      	b.n	80051a2 <__kernel_rem_pio2+0x5a>
 80051e2:	ec51 0b18 	vmov	r0, r1, d8
 80051e6:	e7f8      	b.n	80051da <__kernel_rem_pio2+0x92>
 80051e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80051f0:	f7fb f9a6 	bl	8000540 <__aeabi_dmul>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051fc:	f7fa ffea 	bl	80001d4 <__adddf3>
 8005200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005204:	3601      	adds	r6, #1
 8005206:	9b06      	ldr	r3, [sp, #24]
 8005208:	429e      	cmp	r6, r3
 800520a:	f1a7 0708 	sub.w	r7, r7, #8
 800520e:	ddeb      	ble.n	80051e8 <__kernel_rem_pio2+0xa0>
 8005210:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005214:	f108 0801 	add.w	r8, r8, #1
 8005218:	ecab 7b02 	vstmia	fp!, {d7}
 800521c:	3508      	adds	r5, #8
 800521e:	e7cc      	b.n	80051ba <__kernel_rem_pio2+0x72>
 8005220:	9b02      	ldr	r3, [sp, #8]
 8005222:	aa0e      	add	r2, sp, #56	; 0x38
 8005224:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005228:	930d      	str	r3, [sp, #52]	; 0x34
 800522a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800522c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005230:	9c02      	ldr	r4, [sp, #8]
 8005232:	930c      	str	r3, [sp, #48]	; 0x30
 8005234:	00e3      	lsls	r3, r4, #3
 8005236:	930a      	str	r3, [sp, #40]	; 0x28
 8005238:	ab9a      	add	r3, sp, #616	; 0x268
 800523a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800523e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005242:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005246:	ab72      	add	r3, sp, #456	; 0x1c8
 8005248:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800524c:	46c3      	mov	fp, r8
 800524e:	46a1      	mov	r9, r4
 8005250:	f1b9 0f00 	cmp.w	r9, #0
 8005254:	f1a5 0508 	sub.w	r5, r5, #8
 8005258:	dc77      	bgt.n	800534a <__kernel_rem_pio2+0x202>
 800525a:	ec47 6b10 	vmov	d0, r6, r7
 800525e:	4650      	mov	r0, sl
 8005260:	f000 fd56 	bl	8005d10 <scalbn>
 8005264:	ec57 6b10 	vmov	r6, r7, d0
 8005268:	2200      	movs	r2, #0
 800526a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800526e:	ee10 0a10 	vmov	r0, s0
 8005272:	4639      	mov	r1, r7
 8005274:	f7fb f964 	bl	8000540 <__aeabi_dmul>
 8005278:	ec41 0b10 	vmov	d0, r0, r1
 800527c:	f000 fcc8 	bl	8005c10 <floor>
 8005280:	4b7c      	ldr	r3, [pc, #496]	; (8005474 <__kernel_rem_pio2+0x32c>)
 8005282:	ec51 0b10 	vmov	r0, r1, d0
 8005286:	2200      	movs	r2, #0
 8005288:	f7fb f95a 	bl	8000540 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	f7fa ff9c 	bl	80001d0 <__aeabi_dsub>
 8005298:	460f      	mov	r7, r1
 800529a:	4606      	mov	r6, r0
 800529c:	f7fb fbea 	bl	8000a74 <__aeabi_d2iz>
 80052a0:	9004      	str	r0, [sp, #16]
 80052a2:	f7fb f8e3 	bl	800046c <__aeabi_i2d>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fa ff8f 	bl	80001d0 <__aeabi_dsub>
 80052b2:	f1ba 0f00 	cmp.w	sl, #0
 80052b6:	4606      	mov	r6, r0
 80052b8:	460f      	mov	r7, r1
 80052ba:	dd6d      	ble.n	8005398 <__kernel_rem_pio2+0x250>
 80052bc:	1e62      	subs	r2, r4, #1
 80052be:	ab0e      	add	r3, sp, #56	; 0x38
 80052c0:	9d04      	ldr	r5, [sp, #16]
 80052c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052c6:	f1ca 0118 	rsb	r1, sl, #24
 80052ca:	fa40 f301 	asr.w	r3, r0, r1
 80052ce:	441d      	add	r5, r3
 80052d0:	408b      	lsls	r3, r1
 80052d2:	1ac0      	subs	r0, r0, r3
 80052d4:	ab0e      	add	r3, sp, #56	; 0x38
 80052d6:	9504      	str	r5, [sp, #16]
 80052d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80052dc:	f1ca 0317 	rsb	r3, sl, #23
 80052e0:	fa40 fb03 	asr.w	fp, r0, r3
 80052e4:	f1bb 0f00 	cmp.w	fp, #0
 80052e8:	dd65      	ble.n	80053b6 <__kernel_rem_pio2+0x26e>
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	2200      	movs	r2, #0
 80052ee:	3301      	adds	r3, #1
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	4615      	mov	r5, r2
 80052f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80052f8:	4294      	cmp	r4, r2
 80052fa:	f300 809c 	bgt.w	8005436 <__kernel_rem_pio2+0x2ee>
 80052fe:	f1ba 0f00 	cmp.w	sl, #0
 8005302:	dd07      	ble.n	8005314 <__kernel_rem_pio2+0x1cc>
 8005304:	f1ba 0f01 	cmp.w	sl, #1
 8005308:	f000 80c0 	beq.w	800548c <__kernel_rem_pio2+0x344>
 800530c:	f1ba 0f02 	cmp.w	sl, #2
 8005310:	f000 80c6 	beq.w	80054a0 <__kernel_rem_pio2+0x358>
 8005314:	f1bb 0f02 	cmp.w	fp, #2
 8005318:	d14d      	bne.n	80053b6 <__kernel_rem_pio2+0x26e>
 800531a:	4632      	mov	r2, r6
 800531c:	463b      	mov	r3, r7
 800531e:	4956      	ldr	r1, [pc, #344]	; (8005478 <__kernel_rem_pio2+0x330>)
 8005320:	2000      	movs	r0, #0
 8005322:	f7fa ff55 	bl	80001d0 <__aeabi_dsub>
 8005326:	4606      	mov	r6, r0
 8005328:	460f      	mov	r7, r1
 800532a:	2d00      	cmp	r5, #0
 800532c:	d043      	beq.n	80053b6 <__kernel_rem_pio2+0x26e>
 800532e:	4650      	mov	r0, sl
 8005330:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005468 <__kernel_rem_pio2+0x320>
 8005334:	f000 fcec 	bl	8005d10 <scalbn>
 8005338:	4630      	mov	r0, r6
 800533a:	4639      	mov	r1, r7
 800533c:	ec53 2b10 	vmov	r2, r3, d0
 8005340:	f7fa ff46 	bl	80001d0 <__aeabi_dsub>
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	e035      	b.n	80053b6 <__kernel_rem_pio2+0x26e>
 800534a:	4b4c      	ldr	r3, [pc, #304]	; (800547c <__kernel_rem_pio2+0x334>)
 800534c:	2200      	movs	r2, #0
 800534e:	4630      	mov	r0, r6
 8005350:	4639      	mov	r1, r7
 8005352:	f7fb f8f5 	bl	8000540 <__aeabi_dmul>
 8005356:	f7fb fb8d 	bl	8000a74 <__aeabi_d2iz>
 800535a:	f7fb f887 	bl	800046c <__aeabi_i2d>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	ec43 2b18 	vmov	d8, r2, r3
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <__kernel_rem_pio2+0x338>)
 8005368:	2200      	movs	r2, #0
 800536a:	f7fb f8e9 	bl	8000540 <__aeabi_dmul>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fa ff2b 	bl	80001d0 <__aeabi_dsub>
 800537a:	f7fb fb7b 	bl	8000a74 <__aeabi_d2iz>
 800537e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005382:	f84b 0b04 	str.w	r0, [fp], #4
 8005386:	ec51 0b18 	vmov	r0, r1, d8
 800538a:	f7fa ff23 	bl	80001d4 <__adddf3>
 800538e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005392:	4606      	mov	r6, r0
 8005394:	460f      	mov	r7, r1
 8005396:	e75b      	b.n	8005250 <__kernel_rem_pio2+0x108>
 8005398:	d106      	bne.n	80053a8 <__kernel_rem_pio2+0x260>
 800539a:	1e63      	subs	r3, r4, #1
 800539c:	aa0e      	add	r2, sp, #56	; 0x38
 800539e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80053a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80053a6:	e79d      	b.n	80052e4 <__kernel_rem_pio2+0x19c>
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <__kernel_rem_pio2+0x33c>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	f7fb fb4e 	bl	8000a4c <__aeabi_dcmpge>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d13d      	bne.n	8005430 <__kernel_rem_pio2+0x2e8>
 80053b4:	4683      	mov	fp, r0
 80053b6:	2200      	movs	r2, #0
 80053b8:	2300      	movs	r3, #0
 80053ba:	4630      	mov	r0, r6
 80053bc:	4639      	mov	r1, r7
 80053be:	f7fb fb27 	bl	8000a10 <__aeabi_dcmpeq>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	f000 80c0 	beq.w	8005548 <__kernel_rem_pio2+0x400>
 80053c8:	1e65      	subs	r5, r4, #1
 80053ca:	462b      	mov	r3, r5
 80053cc:	2200      	movs	r2, #0
 80053ce:	9902      	ldr	r1, [sp, #8]
 80053d0:	428b      	cmp	r3, r1
 80053d2:	da6c      	bge.n	80054ae <__kernel_rem_pio2+0x366>
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	f000 8089 	beq.w	80054ec <__kernel_rem_pio2+0x3a4>
 80053da:	ab0e      	add	r3, sp, #56	; 0x38
 80053dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80053e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80ad 	beq.w	8005544 <__kernel_rem_pio2+0x3fc>
 80053ea:	4650      	mov	r0, sl
 80053ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005468 <__kernel_rem_pio2+0x320>
 80053f0:	f000 fc8e 	bl	8005d10 <scalbn>
 80053f4:	ab9a      	add	r3, sp, #616	; 0x268
 80053f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80053fa:	ec57 6b10 	vmov	r6, r7, d0
 80053fe:	00ec      	lsls	r4, r5, #3
 8005400:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005404:	46aa      	mov	sl, r5
 8005406:	f1ba 0f00 	cmp.w	sl, #0
 800540a:	f280 80d6 	bge.w	80055ba <__kernel_rem_pio2+0x472>
 800540e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005460 <__kernel_rem_pio2+0x318>
 8005412:	462e      	mov	r6, r5
 8005414:	2e00      	cmp	r6, #0
 8005416:	f2c0 8104 	blt.w	8005622 <__kernel_rem_pio2+0x4da>
 800541a:	ab72      	add	r3, sp, #456	; 0x1c8
 800541c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005420:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005488 <__kernel_rem_pio2+0x340>
 8005424:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005428:	f04f 0800 	mov.w	r8, #0
 800542c:	1baf      	subs	r7, r5, r6
 800542e:	e0ea      	b.n	8005606 <__kernel_rem_pio2+0x4be>
 8005430:	f04f 0b02 	mov.w	fp, #2
 8005434:	e759      	b.n	80052ea <__kernel_rem_pio2+0x1a2>
 8005436:	f8d8 3000 	ldr.w	r3, [r8]
 800543a:	b955      	cbnz	r5, 8005452 <__kernel_rem_pio2+0x30a>
 800543c:	b123      	cbz	r3, 8005448 <__kernel_rem_pio2+0x300>
 800543e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005442:	f8c8 3000 	str.w	r3, [r8]
 8005446:	2301      	movs	r3, #1
 8005448:	3201      	adds	r2, #1
 800544a:	f108 0804 	add.w	r8, r8, #4
 800544e:	461d      	mov	r5, r3
 8005450:	e752      	b.n	80052f8 <__kernel_rem_pio2+0x1b0>
 8005452:	1acb      	subs	r3, r1, r3
 8005454:	f8c8 3000 	str.w	r3, [r8]
 8005458:	462b      	mov	r3, r5
 800545a:	e7f5      	b.n	8005448 <__kernel_rem_pio2+0x300>
 800545c:	f3af 8000 	nop.w
	...
 800546c:	3ff00000 	.word	0x3ff00000
 8005470:	08006030 	.word	0x08006030
 8005474:	40200000 	.word	0x40200000
 8005478:	3ff00000 	.word	0x3ff00000
 800547c:	3e700000 	.word	0x3e700000
 8005480:	41700000 	.word	0x41700000
 8005484:	3fe00000 	.word	0x3fe00000
 8005488:	08005ff0 	.word	0x08005ff0
 800548c:	1e62      	subs	r2, r4, #1
 800548e:	ab0e      	add	r3, sp, #56	; 0x38
 8005490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005494:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005498:	a90e      	add	r1, sp, #56	; 0x38
 800549a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800549e:	e739      	b.n	8005314 <__kernel_rem_pio2+0x1cc>
 80054a0:	1e62      	subs	r2, r4, #1
 80054a2:	ab0e      	add	r3, sp, #56	; 0x38
 80054a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80054ac:	e7f4      	b.n	8005498 <__kernel_rem_pio2+0x350>
 80054ae:	a90e      	add	r1, sp, #56	; 0x38
 80054b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	430a      	orrs	r2, r1
 80054b8:	e789      	b.n	80053ce <__kernel_rem_pio2+0x286>
 80054ba:	3301      	adds	r3, #1
 80054bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80054c0:	2900      	cmp	r1, #0
 80054c2:	d0fa      	beq.n	80054ba <__kernel_rem_pio2+0x372>
 80054c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80054ca:	446a      	add	r2, sp
 80054cc:	3a98      	subs	r2, #152	; 0x98
 80054ce:	920a      	str	r2, [sp, #40]	; 0x28
 80054d0:	9a08      	ldr	r2, [sp, #32]
 80054d2:	18e3      	adds	r3, r4, r3
 80054d4:	18a5      	adds	r5, r4, r2
 80054d6:	aa22      	add	r2, sp, #136	; 0x88
 80054d8:	f104 0801 	add.w	r8, r4, #1
 80054dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	4543      	cmp	r3, r8
 80054e6:	da04      	bge.n	80054f2 <__kernel_rem_pio2+0x3aa>
 80054e8:	461c      	mov	r4, r3
 80054ea:	e6a3      	b.n	8005234 <__kernel_rem_pio2+0xec>
 80054ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7e4      	b.n	80054bc <__kernel_rem_pio2+0x374>
 80054f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80054f8:	f7fa ffb8 	bl	800046c <__aeabi_i2d>
 80054fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005502:	46ab      	mov	fp, r5
 8005504:	461c      	mov	r4, r3
 8005506:	f04f 0900 	mov.w	r9, #0
 800550a:	2600      	movs	r6, #0
 800550c:	2700      	movs	r7, #0
 800550e:	9b06      	ldr	r3, [sp, #24]
 8005510:	4599      	cmp	r9, r3
 8005512:	dd06      	ble.n	8005522 <__kernel_rem_pio2+0x3da>
 8005514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005516:	e8e3 6702 	strd	r6, r7, [r3], #8
 800551a:	f108 0801 	add.w	r8, r8, #1
 800551e:	930a      	str	r3, [sp, #40]	; 0x28
 8005520:	e7df      	b.n	80054e2 <__kernel_rem_pio2+0x39a>
 8005522:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005526:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800552a:	f7fb f809 	bl	8000540 <__aeabi_dmul>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4630      	mov	r0, r6
 8005534:	4639      	mov	r1, r7
 8005536:	f7fa fe4d 	bl	80001d4 <__adddf3>
 800553a:	f109 0901 	add.w	r9, r9, #1
 800553e:	4606      	mov	r6, r0
 8005540:	460f      	mov	r7, r1
 8005542:	e7e4      	b.n	800550e <__kernel_rem_pio2+0x3c6>
 8005544:	3d01      	subs	r5, #1
 8005546:	e748      	b.n	80053da <__kernel_rem_pio2+0x292>
 8005548:	ec47 6b10 	vmov	d0, r6, r7
 800554c:	f1ca 0000 	rsb	r0, sl, #0
 8005550:	f000 fbde 	bl	8005d10 <scalbn>
 8005554:	ec57 6b10 	vmov	r6, r7, d0
 8005558:	4ba0      	ldr	r3, [pc, #640]	; (80057dc <__kernel_rem_pio2+0x694>)
 800555a:	ee10 0a10 	vmov	r0, s0
 800555e:	2200      	movs	r2, #0
 8005560:	4639      	mov	r1, r7
 8005562:	f7fb fa73 	bl	8000a4c <__aeabi_dcmpge>
 8005566:	b1f8      	cbz	r0, 80055a8 <__kernel_rem_pio2+0x460>
 8005568:	4b9d      	ldr	r3, [pc, #628]	; (80057e0 <__kernel_rem_pio2+0x698>)
 800556a:	2200      	movs	r2, #0
 800556c:	4630      	mov	r0, r6
 800556e:	4639      	mov	r1, r7
 8005570:	f7fa ffe6 	bl	8000540 <__aeabi_dmul>
 8005574:	f7fb fa7e 	bl	8000a74 <__aeabi_d2iz>
 8005578:	4680      	mov	r8, r0
 800557a:	f7fa ff77 	bl	800046c <__aeabi_i2d>
 800557e:	4b97      	ldr	r3, [pc, #604]	; (80057dc <__kernel_rem_pio2+0x694>)
 8005580:	2200      	movs	r2, #0
 8005582:	f7fa ffdd 	bl	8000540 <__aeabi_dmul>
 8005586:	460b      	mov	r3, r1
 8005588:	4602      	mov	r2, r0
 800558a:	4639      	mov	r1, r7
 800558c:	4630      	mov	r0, r6
 800558e:	f7fa fe1f 	bl	80001d0 <__aeabi_dsub>
 8005592:	f7fb fa6f 	bl	8000a74 <__aeabi_d2iz>
 8005596:	1c65      	adds	r5, r4, #1
 8005598:	ab0e      	add	r3, sp, #56	; 0x38
 800559a:	f10a 0a18 	add.w	sl, sl, #24
 800559e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80055a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80055a6:	e720      	b.n	80053ea <__kernel_rem_pio2+0x2a2>
 80055a8:	4630      	mov	r0, r6
 80055aa:	4639      	mov	r1, r7
 80055ac:	f7fb fa62 	bl	8000a74 <__aeabi_d2iz>
 80055b0:	ab0e      	add	r3, sp, #56	; 0x38
 80055b2:	4625      	mov	r5, r4
 80055b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80055b8:	e717      	b.n	80053ea <__kernel_rem_pio2+0x2a2>
 80055ba:	ab0e      	add	r3, sp, #56	; 0x38
 80055bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80055c0:	f7fa ff54 	bl	800046c <__aeabi_i2d>
 80055c4:	4632      	mov	r2, r6
 80055c6:	463b      	mov	r3, r7
 80055c8:	f7fa ffba 	bl	8000540 <__aeabi_dmul>
 80055cc:	4b84      	ldr	r3, [pc, #528]	; (80057e0 <__kernel_rem_pio2+0x698>)
 80055ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80055d2:	2200      	movs	r2, #0
 80055d4:	4630      	mov	r0, r6
 80055d6:	4639      	mov	r1, r7
 80055d8:	f7fa ffb2 	bl	8000540 <__aeabi_dmul>
 80055dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e0:	4606      	mov	r6, r0
 80055e2:	460f      	mov	r7, r1
 80055e4:	e70f      	b.n	8005406 <__kernel_rem_pio2+0x2be>
 80055e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80055ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80055ee:	f7fa ffa7 	bl	8000540 <__aeabi_dmul>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055fa:	f7fa fdeb 	bl	80001d4 <__adddf3>
 80055fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	9b02      	ldr	r3, [sp, #8]
 8005608:	4598      	cmp	r8, r3
 800560a:	dc01      	bgt.n	8005610 <__kernel_rem_pio2+0x4c8>
 800560c:	45b8      	cmp	r8, r7
 800560e:	ddea      	ble.n	80055e6 <__kernel_rem_pio2+0x49e>
 8005610:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005614:	ab4a      	add	r3, sp, #296	; 0x128
 8005616:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800561a:	ed87 7b00 	vstr	d7, [r7]
 800561e:	3e01      	subs	r6, #1
 8005620:	e6f8      	b.n	8005414 <__kernel_rem_pio2+0x2cc>
 8005622:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005624:	2b02      	cmp	r3, #2
 8005626:	dc0b      	bgt.n	8005640 <__kernel_rem_pio2+0x4f8>
 8005628:	2b00      	cmp	r3, #0
 800562a:	dc35      	bgt.n	8005698 <__kernel_rem_pio2+0x550>
 800562c:	d059      	beq.n	80056e2 <__kernel_rem_pio2+0x59a>
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	f003 0007 	and.w	r0, r3, #7
 8005634:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005638:	ecbd 8b02 	vpop	{d8}
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005642:	2b03      	cmp	r3, #3
 8005644:	d1f3      	bne.n	800562e <__kernel_rem_pio2+0x4e6>
 8005646:	ab4a      	add	r3, sp, #296	; 0x128
 8005648:	4423      	add	r3, r4
 800564a:	9306      	str	r3, [sp, #24]
 800564c:	461c      	mov	r4, r3
 800564e:	469a      	mov	sl, r3
 8005650:	9502      	str	r5, [sp, #8]
 8005652:	9b02      	ldr	r3, [sp, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f1aa 0a08 	sub.w	sl, sl, #8
 800565a:	dc6b      	bgt.n	8005734 <__kernel_rem_pio2+0x5ec>
 800565c:	46aa      	mov	sl, r5
 800565e:	f1ba 0f01 	cmp.w	sl, #1
 8005662:	f1a4 0408 	sub.w	r4, r4, #8
 8005666:	f300 8085 	bgt.w	8005774 <__kernel_rem_pio2+0x62c>
 800566a:	9c06      	ldr	r4, [sp, #24]
 800566c:	2000      	movs	r0, #0
 800566e:	3408      	adds	r4, #8
 8005670:	2100      	movs	r1, #0
 8005672:	2d01      	cmp	r5, #1
 8005674:	f300 809d 	bgt.w	80057b2 <__kernel_rem_pio2+0x66a>
 8005678:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800567c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005680:	f1bb 0f00 	cmp.w	fp, #0
 8005684:	f040 809b 	bne.w	80057be <__kernel_rem_pio2+0x676>
 8005688:	9b01      	ldr	r3, [sp, #4]
 800568a:	e9c3 5600 	strd	r5, r6, [r3]
 800568e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005692:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005696:	e7ca      	b.n	800562e <__kernel_rem_pio2+0x4e6>
 8005698:	3408      	adds	r4, #8
 800569a:	ab4a      	add	r3, sp, #296	; 0x128
 800569c:	441c      	add	r4, r3
 800569e:	462e      	mov	r6, r5
 80056a0:	2000      	movs	r0, #0
 80056a2:	2100      	movs	r1, #0
 80056a4:	2e00      	cmp	r6, #0
 80056a6:	da36      	bge.n	8005716 <__kernel_rem_pio2+0x5ce>
 80056a8:	f1bb 0f00 	cmp.w	fp, #0
 80056ac:	d039      	beq.n	8005722 <__kernel_rem_pio2+0x5da>
 80056ae:	4602      	mov	r2, r0
 80056b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056b4:	9c01      	ldr	r4, [sp, #4]
 80056b6:	e9c4 2300 	strd	r2, r3, [r4]
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80056c2:	f7fa fd85 	bl	80001d0 <__aeabi_dsub>
 80056c6:	ae4c      	add	r6, sp, #304	; 0x130
 80056c8:	2401      	movs	r4, #1
 80056ca:	42a5      	cmp	r5, r4
 80056cc:	da2c      	bge.n	8005728 <__kernel_rem_pio2+0x5e0>
 80056ce:	f1bb 0f00 	cmp.w	fp, #0
 80056d2:	d002      	beq.n	80056da <__kernel_rem_pio2+0x592>
 80056d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056d8:	4619      	mov	r1, r3
 80056da:	9b01      	ldr	r3, [sp, #4]
 80056dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80056e0:	e7a5      	b.n	800562e <__kernel_rem_pio2+0x4e6>
 80056e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80056e6:	eb0d 0403 	add.w	r4, sp, r3
 80056ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80056ee:	2000      	movs	r0, #0
 80056f0:	2100      	movs	r1, #0
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	da09      	bge.n	800570a <__kernel_rem_pio2+0x5c2>
 80056f6:	f1bb 0f00 	cmp.w	fp, #0
 80056fa:	d002      	beq.n	8005702 <__kernel_rem_pio2+0x5ba>
 80056fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005700:	4619      	mov	r1, r3
 8005702:	9b01      	ldr	r3, [sp, #4]
 8005704:	e9c3 0100 	strd	r0, r1, [r3]
 8005708:	e791      	b.n	800562e <__kernel_rem_pio2+0x4e6>
 800570a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800570e:	f7fa fd61 	bl	80001d4 <__adddf3>
 8005712:	3d01      	subs	r5, #1
 8005714:	e7ed      	b.n	80056f2 <__kernel_rem_pio2+0x5aa>
 8005716:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800571a:	f7fa fd5b 	bl	80001d4 <__adddf3>
 800571e:	3e01      	subs	r6, #1
 8005720:	e7c0      	b.n	80056a4 <__kernel_rem_pio2+0x55c>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	e7c5      	b.n	80056b4 <__kernel_rem_pio2+0x56c>
 8005728:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800572c:	f7fa fd52 	bl	80001d4 <__adddf3>
 8005730:	3401      	adds	r4, #1
 8005732:	e7ca      	b.n	80056ca <__kernel_rem_pio2+0x582>
 8005734:	e9da 8900 	ldrd	r8, r9, [sl]
 8005738:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800573c:	9b02      	ldr	r3, [sp, #8]
 800573e:	3b01      	subs	r3, #1
 8005740:	9302      	str	r3, [sp, #8]
 8005742:	4632      	mov	r2, r6
 8005744:	463b      	mov	r3, r7
 8005746:	4640      	mov	r0, r8
 8005748:	4649      	mov	r1, r9
 800574a:	f7fa fd43 	bl	80001d4 <__adddf3>
 800574e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4640      	mov	r0, r8
 8005758:	4649      	mov	r1, r9
 800575a:	f7fa fd39 	bl	80001d0 <__aeabi_dsub>
 800575e:	4632      	mov	r2, r6
 8005760:	463b      	mov	r3, r7
 8005762:	f7fa fd37 	bl	80001d4 <__adddf3>
 8005766:	ed9d 7b08 	vldr	d7, [sp, #32]
 800576a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800576e:	ed8a 7b00 	vstr	d7, [sl]
 8005772:	e76e      	b.n	8005652 <__kernel_rem_pio2+0x50a>
 8005774:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005778:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800577c:	4640      	mov	r0, r8
 800577e:	4632      	mov	r2, r6
 8005780:	463b      	mov	r3, r7
 8005782:	4649      	mov	r1, r9
 8005784:	f7fa fd26 	bl	80001d4 <__adddf3>
 8005788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4640      	mov	r0, r8
 8005792:	4649      	mov	r1, r9
 8005794:	f7fa fd1c 	bl	80001d0 <__aeabi_dsub>
 8005798:	4632      	mov	r2, r6
 800579a:	463b      	mov	r3, r7
 800579c:	f7fa fd1a 	bl	80001d4 <__adddf3>
 80057a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80057a8:	ed84 7b00 	vstr	d7, [r4]
 80057ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057b0:	e755      	b.n	800565e <__kernel_rem_pio2+0x516>
 80057b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80057b6:	f7fa fd0d 	bl	80001d4 <__adddf3>
 80057ba:	3d01      	subs	r5, #1
 80057bc:	e759      	b.n	8005672 <__kernel_rem_pio2+0x52a>
 80057be:	9b01      	ldr	r3, [sp, #4]
 80057c0:	9a01      	ldr	r2, [sp, #4]
 80057c2:	601d      	str	r5, [r3, #0]
 80057c4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80057c8:	605c      	str	r4, [r3, #4]
 80057ca:	609f      	str	r7, [r3, #8]
 80057cc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80057d0:	60d3      	str	r3, [r2, #12]
 80057d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057d6:	6110      	str	r0, [r2, #16]
 80057d8:	6153      	str	r3, [r2, #20]
 80057da:	e728      	b.n	800562e <__kernel_rem_pio2+0x4e6>
 80057dc:	41700000 	.word	0x41700000
 80057e0:	3e700000 	.word	0x3e700000
 80057e4:	00000000 	.word	0x00000000

080057e8 <__kernel_tan>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	ed2d 8b06 	vpush	{d8-d10}
 80057f0:	ec5b ab10 	vmov	sl, fp, d0
 80057f4:	4be0      	ldr	r3, [pc, #896]	; (8005b78 <__kernel_tan+0x390>)
 80057f6:	b083      	sub	sp, #12
 80057f8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80057fc:	429f      	cmp	r7, r3
 80057fe:	ec59 8b11 	vmov	r8, r9, d1
 8005802:	4606      	mov	r6, r0
 8005804:	f8cd b000 	str.w	fp, [sp]
 8005808:	dc61      	bgt.n	80058ce <__kernel_tan+0xe6>
 800580a:	ee10 0a10 	vmov	r0, s0
 800580e:	4659      	mov	r1, fp
 8005810:	f7fb f930 	bl	8000a74 <__aeabi_d2iz>
 8005814:	4605      	mov	r5, r0
 8005816:	2800      	cmp	r0, #0
 8005818:	f040 8083 	bne.w	8005922 <__kernel_tan+0x13a>
 800581c:	1c73      	adds	r3, r6, #1
 800581e:	4652      	mov	r2, sl
 8005820:	4313      	orrs	r3, r2
 8005822:	433b      	orrs	r3, r7
 8005824:	d112      	bne.n	800584c <__kernel_tan+0x64>
 8005826:	ec4b ab10 	vmov	d0, sl, fp
 800582a:	f000 f9e7 	bl	8005bfc <fabs>
 800582e:	49d3      	ldr	r1, [pc, #844]	; (8005b7c <__kernel_tan+0x394>)
 8005830:	ec53 2b10 	vmov	r2, r3, d0
 8005834:	2000      	movs	r0, #0
 8005836:	f7fa ffad 	bl	8000794 <__aeabi_ddiv>
 800583a:	4682      	mov	sl, r0
 800583c:	468b      	mov	fp, r1
 800583e:	ec4b ab10 	vmov	d0, sl, fp
 8005842:	b003      	add	sp, #12
 8005844:	ecbd 8b06 	vpop	{d8-d10}
 8005848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584c:	2e01      	cmp	r6, #1
 800584e:	d0f6      	beq.n	800583e <__kernel_tan+0x56>
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	4650      	mov	r0, sl
 8005856:	4659      	mov	r1, fp
 8005858:	f7fa fcbc 	bl	80001d4 <__adddf3>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	460f      	mov	r7, r1
 8005862:	2000      	movs	r0, #0
 8005864:	49c6      	ldr	r1, [pc, #792]	; (8005b80 <__kernel_tan+0x398>)
 8005866:	f7fa ff95 	bl	8000794 <__aeabi_ddiv>
 800586a:	e9cd 0100 	strd	r0, r1, [sp]
 800586e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005872:	462e      	mov	r6, r5
 8005874:	4652      	mov	r2, sl
 8005876:	462c      	mov	r4, r5
 8005878:	4630      	mov	r0, r6
 800587a:	461d      	mov	r5, r3
 800587c:	4639      	mov	r1, r7
 800587e:	465b      	mov	r3, fp
 8005880:	f7fa fca6 	bl	80001d0 <__aeabi_dsub>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4640      	mov	r0, r8
 800588a:	4649      	mov	r1, r9
 800588c:	f7fa fca0 	bl	80001d0 <__aeabi_dsub>
 8005890:	4632      	mov	r2, r6
 8005892:	462b      	mov	r3, r5
 8005894:	f7fa fe54 	bl	8000540 <__aeabi_dmul>
 8005898:	4632      	mov	r2, r6
 800589a:	4680      	mov	r8, r0
 800589c:	4689      	mov	r9, r1
 800589e:	462b      	mov	r3, r5
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fa fe4c 	bl	8000540 <__aeabi_dmul>
 80058a8:	4bb4      	ldr	r3, [pc, #720]	; (8005b7c <__kernel_tan+0x394>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	f7fa fc92 	bl	80001d4 <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4640      	mov	r0, r8
 80058b6:	4649      	mov	r1, r9
 80058b8:	f7fa fc8c 	bl	80001d4 <__adddf3>
 80058bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058c0:	f7fa fe3e 	bl	8000540 <__aeabi_dmul>
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	f7fa fc84 	bl	80001d4 <__adddf3>
 80058cc:	e7b5      	b.n	800583a <__kernel_tan+0x52>
 80058ce:	4bad      	ldr	r3, [pc, #692]	; (8005b84 <__kernel_tan+0x39c>)
 80058d0:	429f      	cmp	r7, r3
 80058d2:	dd26      	ble.n	8005922 <__kernel_tan+0x13a>
 80058d4:	9b00      	ldr	r3, [sp, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da09      	bge.n	80058ee <__kernel_tan+0x106>
 80058da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058de:	469b      	mov	fp, r3
 80058e0:	ee10 aa10 	vmov	sl, s0
 80058e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058e8:	ee11 8a10 	vmov	r8, s2
 80058ec:	4699      	mov	r9, r3
 80058ee:	4652      	mov	r2, sl
 80058f0:	465b      	mov	r3, fp
 80058f2:	a183      	add	r1, pc, #524	; (adr r1, 8005b00 <__kernel_tan+0x318>)
 80058f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f8:	f7fa fc6a 	bl	80001d0 <__aeabi_dsub>
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	4604      	mov	r4, r0
 8005902:	460d      	mov	r5, r1
 8005904:	a180      	add	r1, pc, #512	; (adr r1, 8005b08 <__kernel_tan+0x320>)
 8005906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800590a:	f7fa fc61 	bl	80001d0 <__aeabi_dsub>
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	f7fa fc5f 	bl	80001d4 <__adddf3>
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	4682      	mov	sl, r0
 800591c:	468b      	mov	fp, r1
 800591e:	f04f 0900 	mov.w	r9, #0
 8005922:	4652      	mov	r2, sl
 8005924:	465b      	mov	r3, fp
 8005926:	4650      	mov	r0, sl
 8005928:	4659      	mov	r1, fp
 800592a:	f7fa fe09 	bl	8000540 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	ec43 2b18 	vmov	d8, r2, r3
 8005936:	f7fa fe03 	bl	8000540 <__aeabi_dmul>
 800593a:	ec53 2b18 	vmov	r2, r3, d8
 800593e:	4604      	mov	r4, r0
 8005940:	460d      	mov	r5, r1
 8005942:	4650      	mov	r0, sl
 8005944:	4659      	mov	r1, fp
 8005946:	f7fa fdfb 	bl	8000540 <__aeabi_dmul>
 800594a:	a371      	add	r3, pc, #452	; (adr r3, 8005b10 <__kernel_tan+0x328>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	ec41 0b19 	vmov	d9, r0, r1
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fa fdf2 	bl	8000540 <__aeabi_dmul>
 800595c:	a36e      	add	r3, pc, #440	; (adr r3, 8005b18 <__kernel_tan+0x330>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fc37 	bl	80001d4 <__adddf3>
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	f7fa fde9 	bl	8000540 <__aeabi_dmul>
 800596e:	a36c      	add	r3, pc, #432	; (adr r3, 8005b20 <__kernel_tan+0x338>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fa fc2e 	bl	80001d4 <__adddf3>
 8005978:	4622      	mov	r2, r4
 800597a:	462b      	mov	r3, r5
 800597c:	f7fa fde0 	bl	8000540 <__aeabi_dmul>
 8005980:	a369      	add	r3, pc, #420	; (adr r3, 8005b28 <__kernel_tan+0x340>)
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f7fa fc25 	bl	80001d4 <__adddf3>
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	f7fa fdd7 	bl	8000540 <__aeabi_dmul>
 8005992:	a367      	add	r3, pc, #412	; (adr r3, 8005b30 <__kernel_tan+0x348>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f7fa fc1c 	bl	80001d4 <__adddf3>
 800599c:	4622      	mov	r2, r4
 800599e:	462b      	mov	r3, r5
 80059a0:	f7fa fdce 	bl	8000540 <__aeabi_dmul>
 80059a4:	a364      	add	r3, pc, #400	; (adr r3, 8005b38 <__kernel_tan+0x350>)
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f7fa fc13 	bl	80001d4 <__adddf3>
 80059ae:	ec53 2b18 	vmov	r2, r3, d8
 80059b2:	f7fa fdc5 	bl	8000540 <__aeabi_dmul>
 80059b6:	a362      	add	r3, pc, #392	; (adr r3, 8005b40 <__kernel_tan+0x358>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	ec41 0b1a 	vmov	d10, r0, r1
 80059c0:	4620      	mov	r0, r4
 80059c2:	4629      	mov	r1, r5
 80059c4:	f7fa fdbc 	bl	8000540 <__aeabi_dmul>
 80059c8:	a35f      	add	r3, pc, #380	; (adr r3, 8005b48 <__kernel_tan+0x360>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa fc01 	bl	80001d4 <__adddf3>
 80059d2:	4622      	mov	r2, r4
 80059d4:	462b      	mov	r3, r5
 80059d6:	f7fa fdb3 	bl	8000540 <__aeabi_dmul>
 80059da:	a35d      	add	r3, pc, #372	; (adr r3, 8005b50 <__kernel_tan+0x368>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fbf8 	bl	80001d4 <__adddf3>
 80059e4:	4622      	mov	r2, r4
 80059e6:	462b      	mov	r3, r5
 80059e8:	f7fa fdaa 	bl	8000540 <__aeabi_dmul>
 80059ec:	a35a      	add	r3, pc, #360	; (adr r3, 8005b58 <__kernel_tan+0x370>)
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f7fa fbef 	bl	80001d4 <__adddf3>
 80059f6:	4622      	mov	r2, r4
 80059f8:	462b      	mov	r3, r5
 80059fa:	f7fa fda1 	bl	8000540 <__aeabi_dmul>
 80059fe:	a358      	add	r3, pc, #352	; (adr r3, 8005b60 <__kernel_tan+0x378>)
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fbe6 	bl	80001d4 <__adddf3>
 8005a08:	4622      	mov	r2, r4
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	f7fa fd98 	bl	8000540 <__aeabi_dmul>
 8005a10:	a355      	add	r3, pc, #340	; (adr r3, 8005b68 <__kernel_tan+0x380>)
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f7fa fbdd 	bl	80001d4 <__adddf3>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	ec51 0b1a 	vmov	r0, r1, d10
 8005a22:	f7fa fbd7 	bl	80001d4 <__adddf3>
 8005a26:	ec53 2b19 	vmov	r2, r3, d9
 8005a2a:	f7fa fd89 	bl	8000540 <__aeabi_dmul>
 8005a2e:	4642      	mov	r2, r8
 8005a30:	464b      	mov	r3, r9
 8005a32:	f7fa fbcf 	bl	80001d4 <__adddf3>
 8005a36:	ec53 2b18 	vmov	r2, r3, d8
 8005a3a:	f7fa fd81 	bl	8000540 <__aeabi_dmul>
 8005a3e:	4642      	mov	r2, r8
 8005a40:	464b      	mov	r3, r9
 8005a42:	f7fa fbc7 	bl	80001d4 <__adddf3>
 8005a46:	a34a      	add	r3, pc, #296	; (adr r3, 8005b70 <__kernel_tan+0x388>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	460d      	mov	r5, r1
 8005a50:	ec51 0b19 	vmov	r0, r1, d9
 8005a54:	f7fa fd74 	bl	8000540 <__aeabi_dmul>
 8005a58:	4622      	mov	r2, r4
 8005a5a:	462b      	mov	r3, r5
 8005a5c:	f7fa fbba 	bl	80001d4 <__adddf3>
 8005a60:	460b      	mov	r3, r1
 8005a62:	ec41 0b18 	vmov	d8, r0, r1
 8005a66:	4602      	mov	r2, r0
 8005a68:	4659      	mov	r1, fp
 8005a6a:	4650      	mov	r0, sl
 8005a6c:	f7fa fbb2 	bl	80001d4 <__adddf3>
 8005a70:	4b44      	ldr	r3, [pc, #272]	; (8005b84 <__kernel_tan+0x39c>)
 8005a72:	429f      	cmp	r7, r3
 8005a74:	4604      	mov	r4, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	f340 8086 	ble.w	8005b88 <__kernel_tan+0x3a0>
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f7fa fcf5 	bl	800046c <__aeabi_i2d>
 8005a82:	4622      	mov	r2, r4
 8005a84:	4680      	mov	r8, r0
 8005a86:	4689      	mov	r9, r1
 8005a88:	462b      	mov	r3, r5
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	f7fa fd57 	bl	8000540 <__aeabi_dmul>
 8005a92:	4642      	mov	r2, r8
 8005a94:	4606      	mov	r6, r0
 8005a96:	460f      	mov	r7, r1
 8005a98:	464b      	mov	r3, r9
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f7fa fb99 	bl	80001d4 <__adddf3>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	f7fa fe73 	bl	8000794 <__aeabi_ddiv>
 8005aae:	ec53 2b18 	vmov	r2, r3, d8
 8005ab2:	f7fa fb8d 	bl	80001d0 <__aeabi_dsub>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4650      	mov	r0, sl
 8005abc:	4659      	mov	r1, fp
 8005abe:	f7fa fb87 	bl	80001d0 <__aeabi_dsub>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	f7fa fb85 	bl	80001d4 <__adddf3>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fa fb7d 	bl	80001d0 <__aeabi_dsub>
 8005ad6:	9b00      	ldr	r3, [sp, #0]
 8005ad8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005adc:	f00a 0a02 	and.w	sl, sl, #2
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	f1ca 0001 	rsb	r0, sl, #1
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	f7fa fcc0 	bl	800046c <__aeabi_i2d>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4620      	mov	r0, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7fa fd24 	bl	8000540 <__aeabi_dmul>
 8005af8:	e69f      	b.n	800583a <__kernel_tan+0x52>
 8005afa:	bf00      	nop
 8005afc:	f3af 8000 	nop.w
 8005b00:	54442d18 	.word	0x54442d18
 8005b04:	3fe921fb 	.word	0x3fe921fb
 8005b08:	33145c07 	.word	0x33145c07
 8005b0c:	3c81a626 	.word	0x3c81a626
 8005b10:	74bf7ad4 	.word	0x74bf7ad4
 8005b14:	3efb2a70 	.word	0x3efb2a70
 8005b18:	32f0a7e9 	.word	0x32f0a7e9
 8005b1c:	3f12b80f 	.word	0x3f12b80f
 8005b20:	1a8d1068 	.word	0x1a8d1068
 8005b24:	3f3026f7 	.word	0x3f3026f7
 8005b28:	fee08315 	.word	0xfee08315
 8005b2c:	3f57dbc8 	.word	0x3f57dbc8
 8005b30:	e96e8493 	.word	0xe96e8493
 8005b34:	3f8226e3 	.word	0x3f8226e3
 8005b38:	1bb341fe 	.word	0x1bb341fe
 8005b3c:	3faba1ba 	.word	0x3faba1ba
 8005b40:	db605373 	.word	0xdb605373
 8005b44:	bef375cb 	.word	0xbef375cb
 8005b48:	a03792a6 	.word	0xa03792a6
 8005b4c:	3f147e88 	.word	0x3f147e88
 8005b50:	f2f26501 	.word	0xf2f26501
 8005b54:	3f4344d8 	.word	0x3f4344d8
 8005b58:	c9560328 	.word	0xc9560328
 8005b5c:	3f6d6d22 	.word	0x3f6d6d22
 8005b60:	8406d637 	.word	0x8406d637
 8005b64:	3f9664f4 	.word	0x3f9664f4
 8005b68:	1110fe7a 	.word	0x1110fe7a
 8005b6c:	3fc11111 	.word	0x3fc11111
 8005b70:	55555563 	.word	0x55555563
 8005b74:	3fd55555 	.word	0x3fd55555
 8005b78:	3e2fffff 	.word	0x3e2fffff
 8005b7c:	3ff00000 	.word	0x3ff00000
 8005b80:	bff00000 	.word	0xbff00000
 8005b84:	3fe59427 	.word	0x3fe59427
 8005b88:	2e01      	cmp	r6, #1
 8005b8a:	d02f      	beq.n	8005bec <__kernel_tan+0x404>
 8005b8c:	460f      	mov	r7, r1
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4689      	mov	r9, r1
 8005b94:	2000      	movs	r0, #0
 8005b96:	4917      	ldr	r1, [pc, #92]	; (8005bf4 <__kernel_tan+0x40c>)
 8005b98:	f7fa fdfc 	bl	8000794 <__aeabi_ddiv>
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	e9cd 0100 	strd	r0, r1, [sp]
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	465b      	mov	r3, fp
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	4639      	mov	r1, r7
 8005baa:	f7fa fb11 	bl	80001d0 <__aeabi_dsub>
 8005bae:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	ec51 0b18 	vmov	r0, r1, d8
 8005bba:	f7fa fb09 	bl	80001d0 <__aeabi_dsub>
 8005bbe:	4632      	mov	r2, r6
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f7fa fcbd 	bl	8000540 <__aeabi_dmul>
 8005bc6:	46b0      	mov	r8, r6
 8005bc8:	460f      	mov	r7, r1
 8005bca:	4642      	mov	r2, r8
 8005bcc:	462b      	mov	r3, r5
 8005bce:	4634      	mov	r4, r6
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	f7fa fcb3 	bl	8000540 <__aeabi_dmul>
 8005bda:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <__kernel_tan+0x410>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f7fa faf9 	bl	80001d4 <__adddf3>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	e665      	b.n	80058b8 <__kernel_tan+0xd0>
 8005bec:	4682      	mov	sl, r0
 8005bee:	468b      	mov	fp, r1
 8005bf0:	e625      	b.n	800583e <__kernel_tan+0x56>
 8005bf2:	bf00      	nop
 8005bf4:	bff00000 	.word	0xbff00000
 8005bf8:	3ff00000 	.word	0x3ff00000

08005bfc <fabs>:
 8005bfc:	ec51 0b10 	vmov	r0, r1, d0
 8005c00:	ee10 2a10 	vmov	r2, s0
 8005c04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c08:	ec43 2b10 	vmov	d0, r2, r3
 8005c0c:	4770      	bx	lr
	...

08005c10 <floor>:
 8005c10:	ec51 0b10 	vmov	r0, r1, d0
 8005c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005c1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005c20:	2e13      	cmp	r6, #19
 8005c22:	ee10 5a10 	vmov	r5, s0
 8005c26:	ee10 8a10 	vmov	r8, s0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	dc32      	bgt.n	8005c94 <floor+0x84>
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	da14      	bge.n	8005c5c <floor+0x4c>
 8005c32:	a333      	add	r3, pc, #204	; (adr r3, 8005d00 <floor+0xf0>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa facc 	bl	80001d4 <__adddf3>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f7fa ff0e 	bl	8000a60 <__aeabi_dcmpgt>
 8005c44:	b138      	cbz	r0, 8005c56 <floor+0x46>
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	da57      	bge.n	8005cfa <floor+0xea>
 8005c4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005c4e:	431d      	orrs	r5, r3
 8005c50:	d001      	beq.n	8005c56 <floor+0x46>
 8005c52:	4c2d      	ldr	r4, [pc, #180]	; (8005d08 <floor+0xf8>)
 8005c54:	2500      	movs	r5, #0
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	e025      	b.n	8005ca8 <floor+0x98>
 8005c5c:	4f2b      	ldr	r7, [pc, #172]	; (8005d0c <floor+0xfc>)
 8005c5e:	4137      	asrs	r7, r6
 8005c60:	ea01 0307 	and.w	r3, r1, r7
 8005c64:	4303      	orrs	r3, r0
 8005c66:	d01f      	beq.n	8005ca8 <floor+0x98>
 8005c68:	a325      	add	r3, pc, #148	; (adr r3, 8005d00 <floor+0xf0>)
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f7fa fab1 	bl	80001d4 <__adddf3>
 8005c72:	2200      	movs	r2, #0
 8005c74:	2300      	movs	r3, #0
 8005c76:	f7fa fef3 	bl	8000a60 <__aeabi_dcmpgt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d0eb      	beq.n	8005c56 <floor+0x46>
 8005c7e:	2c00      	cmp	r4, #0
 8005c80:	bfbe      	ittt	lt
 8005c82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005c86:	fa43 f606 	asrlt.w	r6, r3, r6
 8005c8a:	19a4      	addlt	r4, r4, r6
 8005c8c:	ea24 0407 	bic.w	r4, r4, r7
 8005c90:	2500      	movs	r5, #0
 8005c92:	e7e0      	b.n	8005c56 <floor+0x46>
 8005c94:	2e33      	cmp	r6, #51	; 0x33
 8005c96:	dd0b      	ble.n	8005cb0 <floor+0xa0>
 8005c98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005c9c:	d104      	bne.n	8005ca8 <floor+0x98>
 8005c9e:	ee10 2a10 	vmov	r2, s0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	f7fa fa96 	bl	80001d4 <__adddf3>
 8005ca8:	ec41 0b10 	vmov	d0, r0, r1
 8005cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb8:	fa23 f707 	lsr.w	r7, r3, r7
 8005cbc:	4207      	tst	r7, r0
 8005cbe:	d0f3      	beq.n	8005ca8 <floor+0x98>
 8005cc0:	a30f      	add	r3, pc, #60	; (adr r3, 8005d00 <floor+0xf0>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f7fa fa85 	bl	80001d4 <__adddf3>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f7fa fec7 	bl	8000a60 <__aeabi_dcmpgt>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d0bf      	beq.n	8005c56 <floor+0x46>
 8005cd6:	2c00      	cmp	r4, #0
 8005cd8:	da02      	bge.n	8005ce0 <floor+0xd0>
 8005cda:	2e14      	cmp	r6, #20
 8005cdc:	d103      	bne.n	8005ce6 <floor+0xd6>
 8005cde:	3401      	adds	r4, #1
 8005ce0:	ea25 0507 	bic.w	r5, r5, r7
 8005ce4:	e7b7      	b.n	8005c56 <floor+0x46>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005cec:	fa03 f606 	lsl.w	r6, r3, r6
 8005cf0:	4435      	add	r5, r6
 8005cf2:	4545      	cmp	r5, r8
 8005cf4:	bf38      	it	cc
 8005cf6:	18e4      	addcc	r4, r4, r3
 8005cf8:	e7f2      	b.n	8005ce0 <floor+0xd0>
 8005cfa:	2500      	movs	r5, #0
 8005cfc:	462c      	mov	r4, r5
 8005cfe:	e7aa      	b.n	8005c56 <floor+0x46>
 8005d00:	8800759c 	.word	0x8800759c
 8005d04:	7e37e43c 	.word	0x7e37e43c
 8005d08:	bff00000 	.word	0xbff00000
 8005d0c:	000fffff 	.word	0x000fffff

08005d10 <scalbn>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	ec55 4b10 	vmov	r4, r5, d0
 8005d16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	b99a      	cbnz	r2, 8005d48 <scalbn+0x38>
 8005d20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d24:	4323      	orrs	r3, r4
 8005d26:	d036      	beq.n	8005d96 <scalbn+0x86>
 8005d28:	4b39      	ldr	r3, [pc, #228]	; (8005e10 <scalbn+0x100>)
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	ee10 0a10 	vmov	r0, s0
 8005d30:	2200      	movs	r2, #0
 8005d32:	f7fa fc05 	bl	8000540 <__aeabi_dmul>
 8005d36:	4b37      	ldr	r3, [pc, #220]	; (8005e14 <scalbn+0x104>)
 8005d38:	429e      	cmp	r6, r3
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	da10      	bge.n	8005d62 <scalbn+0x52>
 8005d40:	a32b      	add	r3, pc, #172	; (adr r3, 8005df0 <scalbn+0xe0>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	e03a      	b.n	8005dbe <scalbn+0xae>
 8005d48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005d4c:	428a      	cmp	r2, r1
 8005d4e:	d10c      	bne.n	8005d6a <scalbn+0x5a>
 8005d50:	ee10 2a10 	vmov	r2, s0
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fa3c 	bl	80001d4 <__adddf3>
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	460d      	mov	r5, r1
 8005d60:	e019      	b.n	8005d96 <scalbn+0x86>
 8005d62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d66:	460b      	mov	r3, r1
 8005d68:	3a36      	subs	r2, #54	; 0x36
 8005d6a:	4432      	add	r2, r6
 8005d6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005d70:	428a      	cmp	r2, r1
 8005d72:	dd08      	ble.n	8005d86 <scalbn+0x76>
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	a120      	add	r1, pc, #128	; (adr r1, 8005df8 <scalbn+0xe8>)
 8005d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d7c:	da1c      	bge.n	8005db8 <scalbn+0xa8>
 8005d7e:	a120      	add	r1, pc, #128	; (adr r1, 8005e00 <scalbn+0xf0>)
 8005d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d84:	e018      	b.n	8005db8 <scalbn+0xa8>
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	dd08      	ble.n	8005d9c <scalbn+0x8c>
 8005d8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d96:	ec45 4b10 	vmov	d0, r4, r5
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005da0:	da19      	bge.n	8005dd6 <scalbn+0xc6>
 8005da2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005da6:	429e      	cmp	r6, r3
 8005da8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005dac:	dd0a      	ble.n	8005dc4 <scalbn+0xb4>
 8005dae:	a112      	add	r1, pc, #72	; (adr r1, 8005df8 <scalbn+0xe8>)
 8005db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e2      	bne.n	8005d7e <scalbn+0x6e>
 8005db8:	a30f      	add	r3, pc, #60	; (adr r3, 8005df8 <scalbn+0xe8>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fbbf 	bl	8000540 <__aeabi_dmul>
 8005dc2:	e7cb      	b.n	8005d5c <scalbn+0x4c>
 8005dc4:	a10a      	add	r1, pc, #40	; (adr r1, 8005df0 <scalbn+0xe0>)
 8005dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0b8      	beq.n	8005d40 <scalbn+0x30>
 8005dce:	a10e      	add	r1, pc, #56	; (adr r1, 8005e08 <scalbn+0xf8>)
 8005dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd4:	e7b4      	b.n	8005d40 <scalbn+0x30>
 8005dd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005dda:	3236      	adds	r2, #54	; 0x36
 8005ddc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005de0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005de4:	4620      	mov	r0, r4
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <scalbn+0x108>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	e7e8      	b.n	8005dbe <scalbn+0xae>
 8005dec:	f3af 8000 	nop.w
 8005df0:	c2f8f359 	.word	0xc2f8f359
 8005df4:	01a56e1f 	.word	0x01a56e1f
 8005df8:	8800759c 	.word	0x8800759c
 8005dfc:	7e37e43c 	.word	0x7e37e43c
 8005e00:	8800759c 	.word	0x8800759c
 8005e04:	fe37e43c 	.word	0xfe37e43c
 8005e08:	c2f8f359 	.word	0xc2f8f359
 8005e0c:	81a56e1f 	.word	0x81a56e1f
 8005e10:	43500000 	.word	0x43500000
 8005e14:	ffff3cb0 	.word	0xffff3cb0
 8005e18:	3c900000 	.word	0x3c900000

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
