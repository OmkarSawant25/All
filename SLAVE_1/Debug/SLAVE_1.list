
SLAVE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002a8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4f6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8a  00000000  00000000  0002b596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000700  00000000  00000000  0002d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5da  00000000  00000000  0002e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b403  00000000  00000000  0004a6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9717  00000000  00000000  00055ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ff1cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d88  00000000  00000000  000ff21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d20 	.word	0x08003d20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003d20 	.word	0x08003d20

080001c8 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
	if (RxData[0] == SLAVE_ID)
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <HAL_UARTEx_RxEventCallback+0x44>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b07      	cmp	r3, #7
 80001da:	d10c      	bne.n	80001f6 <HAL_UARTEx_RxEventCallback+0x2e>
	{
		switch (RxData[1]){
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <HAL_UARTEx_RxEventCallback+0x44>)
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	2b03      	cmp	r3, #3
 80001e2:	d002      	beq.n	80001ea <HAL_UARTEx_RxEventCallback+0x22>
 80001e4:	2b04      	cmp	r3, #4
 80001e6:	d003      	beq.n	80001f0 <HAL_UARTEx_RxEventCallback+0x28>
			break;
		case 0x04:
			readInputRegs();
			break;
		default:
			break;
 80001e8:	e006      	b.n	80001f8 <HAL_UARTEx_RxEventCallback+0x30>
			readHoldingRegs();
 80001ea:	f000 f929 	bl	8000440 <readHoldingRegs>
			break;
 80001ee:	e003      	b.n	80001f8 <HAL_UARTEx_RxEventCallback+0x30>
			readInputRegs();
 80001f0:	f000 f998 	bl	8000524 <readInputRegs>
			break;
 80001f4:	e000      	b.n	80001f8 <HAL_UARTEx_RxEventCallback+0x30>
		}
	}
 80001f6:	bf00      	nop

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 256);
 80001f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001fc:	4903      	ldr	r1, [pc, #12]	; (800020c <HAL_UARTEx_RxEventCallback+0x44>)
 80001fe:	4804      	ldr	r0, [pc, #16]	; (8000210 <HAL_UARTEx_RxEventCallback+0x48>)
 8000200:	f003 fd0e 	bl	8003c20 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	20000114 	.word	0x20000114
 8000210:	2000008c 	.word	0x2000008c

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fb0a 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f810 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f898 	bl	8000354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000224:	f000 f866 	bl	80002f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 256);
 8000228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800022c:	4902      	ldr	r1, [pc, #8]	; (8000238 <main+0x24>)
 800022e:	4803      	ldr	r0, [pc, #12]	; (800023c <main+0x28>)
 8000230:	f003 fcf6 	bl	8003c20 <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x20>
 8000236:	bf00      	nop
 8000238:	20000114 	.word	0x20000114
 800023c:	2000008c 	.word	0x2000008c

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b09e      	sub	sp, #120	; 0x78
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 fd5e 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	223c      	movs	r2, #60	; 0x3c
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fd50 	bl	8003d10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000270:	2301      	movs	r3, #1
 8000272:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000278:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000290:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000292:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fe32 	bl	8000f00 <HAL_RCC_OscConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002a2:	f000 f87b 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	230f      	movs	r3, #15
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002aa:	2302      	movs	r3, #2
 80002ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fe5a 	bl	8001f7c <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ce:	f000 f865 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002da:	463b      	mov	r3, r7
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 f883 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002e8:	f000 f858 	bl	800039c <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3778      	adds	r7, #120	; 0x78
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_USART2_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <MX_USART2_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000300:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART2_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000338:	f002 fa06 	bl	8002748 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f82b 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000008c 	.word	0x2000008c
 8000350:	40004400 	.word	0x40004400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_GPIO_Init+0x44>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <MX_GPIO_Init+0x44>)
 8000360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_GPIO_Init+0x44>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_GPIO_Init+0x44>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a08      	ldr	r2, [pc, #32]	; (8000398 <MX_GPIO_Init+0x44>)
 8000378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_GPIO_Init+0x44>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]

}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>
	...

080003a8 <sendData>:
extern uint8_t TxData[256];
extern UART_HandleTypeDef huart2;


void sendData (uint8_t *data, int size)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	4619      	mov	r1, r3
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 f925 	bl	8000608 <crc16>
 80003be:	4603      	mov	r3, r0
 80003c0:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4413      	add	r3, r2
 80003c8:	89fa      	ldrh	r2, [r7, #14]
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 80003ce:	89fb      	ldrh	r3, [r7, #14]
 80003d0:	0a1b      	lsrs	r3, r3, #8
 80003d2:	b299      	uxth	r1, r3
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	b2ca      	uxtb	r2, r1
 80003de:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, data, size+2, 1000);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	3302      	adds	r3, #2
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <sendData+0x54>)
 80003f0:	f002 f9f8 	bl	80027e4 <HAL_UART_Transmit>
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	2000008c 	.word	0x2000008c

08000400 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <modbusException+0x38>)
 800040c:	781a      	ldrb	r2, [r3, #0]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <modbusException+0x3c>)
 8000410:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <modbusException+0x38>)
 8000414:	785b      	ldrb	r3, [r3, #1]
 8000416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800041a:	b2da      	uxtb	r2, r3
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <modbusException+0x3c>)
 800041e:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <modbusException+0x3c>)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	7093      	strb	r3, [r2, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8000426:	2103      	movs	r1, #3
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <modbusException+0x3c>)
 800042a:	f7ff ffbd 	bl	80003a8 <sendData>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000114 	.word	0x20000114
 800043c:	20000214 	.word	0x20000214

08000440 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000446:	4b34      	ldr	r3, [pc, #208]	; (8000518 <readHoldingRegs+0xd8>)
 8000448:	789b      	ldrb	r3, [r3, #2]
 800044a:	021b      	lsls	r3, r3, #8
 800044c:	b21a      	sxth	r2, r3
 800044e:	4b32      	ldr	r3, [pc, #200]	; (8000518 <readHoldingRegs+0xd8>)
 8000450:	78db      	ldrb	r3, [r3, #3]
 8000452:	b21b      	sxth	r3, r3
 8000454:	4313      	orrs	r3, r2
 8000456:	b21b      	sxth	r3, r3
 8000458:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 800045a:	4b2f      	ldr	r3, [pc, #188]	; (8000518 <readHoldingRegs+0xd8>)
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	021b      	lsls	r3, r3, #8
 8000460:	b21a      	sxth	r2, r3
 8000462:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <readHoldingRegs+0xd8>)
 8000464:	795b      	ldrb	r3, [r3, #5]
 8000466:	b21b      	sxth	r3, r3
 8000468:	4313      	orrs	r3, r2
 800046a:	b21b      	sxth	r3, r3
 800046c:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 800046e:	887b      	ldrh	r3, [r7, #2]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d002      	beq.n	800047a <readHoldingRegs+0x3a>
 8000474:	887b      	ldrh	r3, [r7, #2]
 8000476:	2b7d      	cmp	r3, #125	; 0x7d
 8000478:	d904      	bls.n	8000484 <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 800047a:	2003      	movs	r0, #3
 800047c:	f7ff ffc0 	bl	8000400 <modbusException>
		return 0;
 8000480:	2300      	movs	r3, #0
 8000482:	e044      	b.n	800050e <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000484:	89fa      	ldrh	r2, [r7, #14]
 8000486:	887b      	ldrh	r3, [r7, #2]
 8000488:	4413      	add	r3, r2
 800048a:	b29b      	uxth	r3, r3
 800048c:	3b01      	subs	r3, #1
 800048e:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8000490:	883b      	ldrh	r3, [r7, #0]
 8000492:	2b31      	cmp	r3, #49	; 0x31
 8000494:	d904      	bls.n	80004a0 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff ffb2 	bl	8000400 <modbusException>
		return 0;
 800049c:	2300      	movs	r3, #0
 800049e:	e036      	b.n	800050e <readHoldingRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <readHoldingRegs+0xdc>)
 80004a2:	2207      	movs	r2, #7
 80004a4:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80004a6:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <readHoldingRegs+0xd8>)
 80004a8:	785a      	ldrb	r2, [r3, #1]
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <readHoldingRegs+0xdc>)
 80004ac:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 80004ae:	887b      	ldrh	r3, [r7, #2]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <readHoldingRegs+0xdc>)
 80004b8:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80004ba:	2303      	movs	r3, #3
 80004bc:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	e01b      	b.n	80004fc <readHoldingRegs+0xbc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80004c4:	89fb      	ldrh	r3, [r7, #14]
 80004c6:	4a16      	ldr	r2, [pc, #88]	; (8000520 <readHoldingRegs+0xe0>)
 80004c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004cc:	0a1b      	lsrs	r3, r3, #8
 80004ce:	b299      	uxth	r1, r3
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	60ba      	str	r2, [r7, #8]
 80004d6:	b2c9      	uxtb	r1, r1
 80004d8:	4a10      	ldr	r2, [pc, #64]	; (800051c <readHoldingRegs+0xdc>)
 80004da:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80004dc:	89fb      	ldrh	r3, [r7, #14]
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <readHoldingRegs+0xe0>)
 80004e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	60ba      	str	r2, [r7, #8]
 80004ea:	b2c9      	uxtb	r1, r1
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <readHoldingRegs+0xdc>)
 80004ee:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	3301      	adds	r3, #1
 80004f4:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbdf      	blt.n	80004c4 <readHoldingRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000504:	68b9      	ldr	r1, [r7, #8]
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <readHoldingRegs+0xdc>)
 8000508:	f7ff ff4e 	bl	80003a8 <sendData>
	return 1;   // success
 800050c:	2301      	movs	r3, #1
}
 800050e:	4618      	mov	r0, r3
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000114 	.word	0x20000114
 800051c:	20000214 	.word	0x20000214
 8000520:	20000000 	.word	0x20000000

08000524 <readInputRegs>:

uint8_t readInputRegs (void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800052a:	4b34      	ldr	r3, [pc, #208]	; (80005fc <readInputRegs+0xd8>)
 800052c:	789b      	ldrb	r3, [r3, #2]
 800052e:	021b      	lsls	r3, r3, #8
 8000530:	b21a      	sxth	r2, r3
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <readInputRegs+0xd8>)
 8000534:	78db      	ldrb	r3, [r3, #3]
 8000536:	b21b      	sxth	r3, r3
 8000538:	4313      	orrs	r3, r2
 800053a:	b21b      	sxth	r3, r3
 800053c:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <readInputRegs+0xd8>)
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	b21a      	sxth	r2, r3
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <readInputRegs+0xd8>)
 8000548:	795b      	ldrb	r3, [r3, #5]
 800054a:	b21b      	sxth	r3, r3
 800054c:	4313      	orrs	r3, r2
 800054e:	b21b      	sxth	r3, r3
 8000550:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <readInputRegs+0x3a>
 8000558:	887b      	ldrh	r3, [r7, #2]
 800055a:	2b7d      	cmp	r3, #125	; 0x7d
 800055c:	d904      	bls.n	8000568 <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 800055e:	2003      	movs	r0, #3
 8000560:	f7ff ff4e 	bl	8000400 <modbusException>
		return 0;
 8000564:	2300      	movs	r3, #0
 8000566:	e044      	b.n	80005f2 <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000568:	89fa      	ldrh	r2, [r7, #14]
 800056a:	887b      	ldrh	r3, [r7, #2]
 800056c:	4413      	add	r3, r2
 800056e:	b29b      	uxth	r3, r3
 8000570:	3b01      	subs	r3, #1
 8000572:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8000574:	883b      	ldrh	r3, [r7, #0]
 8000576:	2b31      	cmp	r3, #49	; 0x31
 8000578:	d904      	bls.n	8000584 <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800057a:	2002      	movs	r0, #2
 800057c:	f7ff ff40 	bl	8000400 <modbusException>
		return 0;
 8000580:	2300      	movs	r3, #0
 8000582:	e036      	b.n	80005f2 <readInputRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <readInputRegs+0xdc>)
 8000586:	2207      	movs	r2, #7
 8000588:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <readInputRegs+0xd8>)
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <readInputRegs+0xdc>)
 8000590:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <readInputRegs+0xdc>)
 800059c:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 800059e:	2303      	movs	r3, #3
 80005a0:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e01b      	b.n	80005e0 <readInputRegs+0xbc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <readInputRegs+0xe0>)
 80005ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	b299      	uxth	r1, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	60ba      	str	r2, [r7, #8]
 80005ba:	b2c9      	uxtb	r1, r1
 80005bc:	4a10      	ldr	r2, [pc, #64]	; (8000600 <readInputRegs+0xdc>)
 80005be:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80005c0:	89fb      	ldrh	r3, [r7, #14]
 80005c2:	4a10      	ldr	r2, [pc, #64]	; (8000604 <readInputRegs+0xe0>)
 80005c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	b2c9      	uxtb	r1, r1
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <readInputRegs+0xdc>)
 80005d2:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	3301      	adds	r3, #1
 80005d8:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbdf      	blt.n	80005a8 <readInputRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <readInputRegs+0xdc>)
 80005ec:	f7ff fedc 	bl	80003a8 <sendData>
	return 1;   // success
 80005f0:	2301      	movs	r3, #1
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000114 	.word	0x20000114
 8000600:	20000214 	.word	0x20000214
 8000604:	08003d38 	.word	0x08003d38

08000608 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000614:	23ff      	movs	r3, #255	; 0xff
 8000616:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000618:	23ff      	movs	r3, #255	; 0xff
 800061a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 800061c:	e013      	b.n	8000646 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	4053      	eors	r3, r2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <crc16+0x64>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4413      	add	r3, r2
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4053      	eors	r3, r2
 800063a:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <crc16+0x68>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	4413      	add	r3, r2
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	807a      	strh	r2, [r7, #2]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1e6      	bne.n	800061e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b21a      	sxth	r2, r3
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	08003d9c 	.word	0x08003d9c
 8000670:	08003e9c 	.word	0x08003e9c

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x44>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_MspInit+0x44>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x44>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_MspInit+0x44>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_MspInit+0x44>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_MspInit+0x44>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006aa:	2007      	movs	r0, #7
 80006ac:	f000 f9f6 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <HAL_UART_MspInit+0x8c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d130      	bne.n	8000740 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <HAL_UART_MspInit+0x90>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a1a      	ldr	r2, [pc, #104]	; (800074c <HAL_UART_MspInit+0x90>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_UART_MspInit+0x90>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_UART_MspInit+0x90>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_UART_MspInit+0x90>)
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_UART_MspInit+0x90>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800070e:	230c      	movs	r3, #12
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800071e:	2307      	movs	r3, #7
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 fa6e 	bl	8000c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2026      	movs	r0, #38	; 0x26
 8000736:	f000 f9bc 	bl	8000ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800073a:	2026      	movs	r0, #38	; 0x26
 800073c:	f000 f9d5 	bl	8000aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40004400 	.word	0x40004400
 800074c:	40021000 	.word	0x40021000

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <UsageFault_Handler+0x4>

0800076e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f88e 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <USART2_IRQHandler+0x10>)
 80007aa:	f002 f8a5 	bl	80028f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000008c 	.word	0x2000008c

080007b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <SystemInit+0x20>)
 80007be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <SystemInit+0x20>)
 80007c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000814 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e0:	f7ff ffea 	bl	80007b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490d      	ldr	r1, [pc, #52]	; (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0a      	ldr	r4, [pc, #40]	; (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080a:	f003 fa5d 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080e:	f7ff fd01 	bl	8000214 <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000814:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000820:	08003fdc 	.word	0x08003fdc
  ldr r2, =_sbss
 8000824:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000828:	20000318 	.word	0x20000318

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f92b 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff ff12 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f943 	bl	8000b06 <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 f90b 	bl	8000ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000064 	.word	0x20000064
 80008b4:	2000006c 	.word	0x2000006c
 80008b8:	20000068 	.word	0x20000068

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2000006c 	.word	0x2000006c
 80008e0:	20000314 	.word	0x20000314

080008e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000314 	.word	0x20000314

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db0b      	blt.n	800098a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 021f 	and.w	r2, r3, #31
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <__NVIC_EnableIRQ+0x38>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a68:	d301      	bcc.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00f      	b.n	8000a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <SysTick_Config+0x40>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	210f      	movs	r1, #15
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f7ff ff8e 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SysTick_Config+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SysTick_Config+0x40>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff29 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff3e 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ff8e 	bl	80009f0 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff5d 	bl	800099c <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff31 	bl	8000960 <__NVIC_EnableIRQ>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffa2 	bl	8000a58 <SysTick_Config>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d008      	beq.n	8000b42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2204      	movs	r2, #4
 8000b34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e020      	b.n	8000b84 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 020e 	bic.w	r2, r2, #14
 8000b50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d005      	beq.n	8000bb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2204      	movs	r2, #4
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e027      	b.n	8000c02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 020e 	bic.w	r2, r2, #14
 8000bc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0201 	bic.w	r2, r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	4798      	blx	r3
    } 
  }
  return status;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	e154      	b.n	8000ec6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 8146 	beq.w	8000ec0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d005      	beq.n	8000c4c <HAL_GPIO_Init+0x40>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d130      	bne.n	8000cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c82:	2201      	movs	r2, #1
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	f003 0201 	and.w	r2, r3, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d017      	beq.n	8000cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d123      	bne.n	8000d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	6939      	ldr	r1, [r7, #16]
 8000d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0203 	and.w	r2, r3, #3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80a0 	beq.w	8000ec0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d80:	4b58      	ldr	r3, [pc, #352]	; (8000ee4 <HAL_GPIO_Init+0x2d8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a57      	ldr	r2, [pc, #348]	; (8000ee4 <HAL_GPIO_Init+0x2d8>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b55      	ldr	r3, [pc, #340]	; (8000ee4 <HAL_GPIO_Init+0x2d8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d98:	4a53      	ldr	r2, [pc, #332]	; (8000ee8 <HAL_GPIO_Init+0x2dc>)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dc2:	d019      	beq.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a49      	ldr	r2, [pc, #292]	; (8000eec <HAL_GPIO_Init+0x2e0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d013      	beq.n	8000df4 <HAL_GPIO_Init+0x1e8>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a48      	ldr	r2, [pc, #288]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d00d      	beq.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a47      	ldr	r2, [pc, #284]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d007      	beq.n	8000dec <HAL_GPIO_Init+0x1e0>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a46      	ldr	r2, [pc, #280]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d101      	bne.n	8000de8 <HAL_GPIO_Init+0x1dc>
 8000de4:	2304      	movs	r3, #4
 8000de6:	e008      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000de8:	2305      	movs	r3, #5
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000dec:	2303      	movs	r3, #3
 8000dee:	e004      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	f002 0203 	and.w	r2, r2, #3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4093      	lsls	r3, r2
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e0a:	4937      	ldr	r1, [pc, #220]	; (8000ee8 <HAL_GPIO_Init+0x2dc>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e18:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e3c:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e66:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e90:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f aea3 	bne.w	8000c1c <HAL_GPIO_Init+0x10>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	48000c00 	.word	0x48000c00
 8000ef8:	48001000 	.word	0x48001000
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f001 b823 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 817d 	beq.w	8001236 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f3c:	4bbc      	ldr	r3, [pc, #752]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d00c      	beq.n	8000f62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f48:	4bb9      	ldr	r3, [pc, #740]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d15c      	bne.n	800100e <HAL_RCC_OscConfig+0x10e>
 8000f54:	4bb6      	ldr	r3, [pc, #728]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d155      	bne.n	800100e <HAL_RCC_OscConfig+0x10e>
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	095b      	lsrs	r3, r3, #5
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <HAL_RCC_OscConfig+0x94>
 8000f8e:	4ba8      	ldr	r3, [pc, #672]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e015      	b.n	8000fc0 <HAL_RCC_OscConfig+0xc0>
 8000f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f98:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fb0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000fbc:	4b9c      	ldr	r3, [pc, #624]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000fc8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000fd4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fd8:	fab2 f282 	clz	r2, r2
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	f042 0220 	orr.w	r2, r2, #32
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	f002 021f 	and.w	r2, r2, #31
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f202 	lsl.w	r2, r1, r2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 811f 	beq.w	8001234 <HAL_RCC_OscConfig+0x334>
 8000ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 8116 	bne.w	8001234 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	f000 bfaf 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101e:	d106      	bne.n	800102e <HAL_RCC_OscConfig+0x12e>
 8001020:	4b83      	ldr	r3, [pc, #524]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a82      	ldr	r2, [pc, #520]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e036      	b.n	800109c <HAL_RCC_OscConfig+0x19c>
 800102e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x158>
 800103e:	4b7c      	ldr	r3, [pc, #496]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a7b      	ldr	r2, [pc, #492]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b79      	ldr	r3, [pc, #484]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a78      	ldr	r2, [pc, #480]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e021      	b.n	800109c <HAL_RCC_OscConfig+0x19c>
 8001058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800105c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x184>
 800106a:	4b71      	ldr	r3, [pc, #452]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a70      	ldr	r2, [pc, #448]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6e      	ldr	r3, [pc, #440]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6d      	ldr	r2, [pc, #436]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0x19c>
 8001084:	4b6a      	ldr	r3, [pc, #424]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a69      	ldr	r2, [pc, #420]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b67      	ldr	r3, [pc, #412]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a66      	ldr	r2, [pc, #408]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800109c:	4b64      	ldr	r3, [pc, #400]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	f023 020f 	bic.w	r2, r3, #15
 80010a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	495f      	ldr	r1, [pc, #380]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d059      	beq.n	800117a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fc0d 	bl	80008e4 <HAL_GetTick>
 80010ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	e00a      	b.n	80010e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fc08 	bl	80008e4 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b64      	cmp	r3, #100	; 0x64
 80010de:	d902      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f000 bf43 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80010e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	095b      	lsrs	r3, r3, #5
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <HAL_RCC_OscConfig+0x218>
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	e015      	b.n	8001144 <HAL_RCC_OscConfig+0x244>
 8001118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800112c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001130:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001134:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001148:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800114c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001150:	fa92 f2a2 	rbit	r2, r2
 8001154:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001158:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	f002 021f 	and.w	r2, r2, #31
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0ab      	beq.n	80010d0 <HAL_RCC_OscConfig+0x1d0>
 8001178:	e05d      	b.n	8001236 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fbb3 	bl	80008e4 <HAL_GetTick>
 800117e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e00a      	b.n	800119a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fbae 	bl	80008e4 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d902      	bls.n	800119a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	f000 bee9 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 800119a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	095b      	lsrs	r3, r3, #5
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <HAL_RCC_OscConfig+0x2cc>
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	e015      	b.n	80011f8 <HAL_RCC_OscConfig+0x2f8>
 80011cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_RCC_OscConfig+0x330>)
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001200:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001204:	fa92 f2a2 	rbit	r2, r2
 8001208:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800120c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001210:	fab2 f282 	clz	r2, r2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f042 0220 	orr.w	r2, r2, #32
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	f002 021f 	and.w	r2, r2, #31
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ab      	bne.n	8001184 <HAL_RCC_OscConfig+0x284>
 800122c:	e003      	b.n	8001236 <HAL_RCC_OscConfig+0x336>
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 817d 	beq.w	8001546 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800124c:	4ba6      	ldr	r3, [pc, #664]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001258:	4ba3      	ldr	r3, [pc, #652]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b08      	cmp	r3, #8
 8001262:	d172      	bne.n	800134a <HAL_RCC_OscConfig+0x44a>
 8001264:	4ba0      	ldr	r3, [pc, #640]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d16c      	bne.n	800134a <HAL_RCC_OscConfig+0x44a>
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001282:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	095b      	lsrs	r3, r3, #5
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d102      	bne.n	80012a0 <HAL_RCC_OscConfig+0x3a0>
 800129a:	4b93      	ldr	r3, [pc, #588]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	e013      	b.n	80012c8 <HAL_RCC_OscConfig+0x3c8>
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012c4:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2202      	movs	r2, #2
 80012ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80012ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012d2:	fa92 f2a2 	rbit	r2, r2
 80012d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012de:	fab2 f282 	clz	r2, r2
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f042 0220 	orr.w	r2, r2, #32
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f002 021f 	and.w	r2, r2, #31
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f202 	lsl.w	r2, r1, r2
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <HAL_RCC_OscConfig+0x410>
 80012fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d002      	beq.n	8001310 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f000 be2e 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	21f8      	movs	r1, #248	; 0xf8
 8001326:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800132e:	fa91 f1a1 	rbit	r1, r1
 8001332:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001336:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800133a:	fab1 f181 	clz	r1, r1
 800133e:	b2c9      	uxtb	r1, r1
 8001340:	408b      	lsls	r3, r1
 8001342:	4969      	ldr	r1, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001348:	e0fd      	b.n	8001546 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8088 	beq.w	800146c <HAL_RCC_OscConfig+0x56c>
 800135c:	2301      	movs	r3, #1
 800135e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800136e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	461a      	mov	r2, r3
 8001384:	2301      	movs	r3, #1
 8001386:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff faac 	bl	80008e4 <HAL_GetTick>
 800138c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff faa7 	bl	80008e4 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d902      	bls.n	80013a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f000 bde2 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4d8>
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	e013      	b.n	8001400 <HAL_RCC_OscConfig+0x500>
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013fc:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	2202      	movs	r2, #2
 8001402:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001406:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800140a:	fa92 f2a2 	rbit	r2, r2
 800140e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001412:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001416:	fab2 f282 	clz	r2, r2
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	f002 021f 	and.w	r2, r2, #31
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0af      	beq.n	8001392 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	21f8      	movs	r1, #248	; 0xf8
 8001448:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001450:	fa91 f1a1 	rbit	r1, r1
 8001454:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001458:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800145c:	fab1 f181 	clz	r1, r1
 8001460:	b2c9      	uxtb	r1, r1
 8001462:	408b      	lsls	r3, r1
 8001464:	4920      	ldr	r1, [pc, #128]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e06c      	b.n	8001546 <HAL_RCC_OscConfig+0x646>
 800146c:	2301      	movs	r3, #1
 800146e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800147e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800148c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	461a      	mov	r2, r3
 8001494:	2300      	movs	r3, #0
 8001496:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fa24 	bl	80008e4 <HAL_GetTick>
 800149c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a2:	f7ff fa1f 	bl	80008e4 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d902      	bls.n	80014b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f000 bd5a 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	fab3 f383 	clz	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	095b      	lsrs	r3, r3, #5
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d104      	bne.n	80014ec <HAL_RCC_OscConfig+0x5ec>
 80014e2:	4b01      	ldr	r3, [pc, #4]	; (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	e015      	b.n	8001514 <HAL_RCC_OscConfig+0x614>
 80014e8:	40021000 	.word	0x40021000
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001504:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001510:	4bc8      	ldr	r3, [pc, #800]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	2202      	movs	r2, #2
 8001516:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800151a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001526:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ad      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8110 	beq.w	800177c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d079      	beq.n	8001660 <HAL_RCC_OscConfig+0x760>
 800156c:	2301      	movs	r3, #1
 800156e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800157e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4bab      	ldr	r3, [pc, #684]	; (8001838 <HAL_RCC_OscConfig+0x938>)
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	461a      	mov	r2, r3
 8001592:	2301      	movs	r3, #1
 8001594:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001596:	f7ff f9a5 	bl	80008e4 <HAL_GetTick>
 800159a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff f9a0 	bl	80008e4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d902      	bls.n	80015b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f000 bcdb 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800160e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001610:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 8001612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800161c:	2102      	movs	r1, #2
 800161e:	6019      	str	r1, [r3, #0]
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f1a3 	rbit	r1, r3
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001636:	6019      	str	r1, [r3, #0]
  return result;
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0a0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x6a0>
 800165e:	e08d      	b.n	800177c <HAL_RCC_OscConfig+0x87c>
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001682:	601a      	str	r2, [r3, #0]
  return result;
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800168c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x938>)
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	461a      	mov	r2, r3
 800169e:	2300      	movs	r3, #0
 80016a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f91f 	bl	80008e4 <HAL_GetTick>
 80016a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff f91a 	bl	80008e4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d902      	bls.n	80016c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	f000 bc55 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016ca:	2202      	movs	r2, #2
 80016cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	fa93 f2a3 	rbit	r2, r3
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800172c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 8001730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800173a:	2102      	movs	r1, #2
 800173c:	6019      	str	r1, [r3, #0]
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f1a3 	rbit	r1, r3
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001754:	6019      	str	r1, [r3, #0]
  return result;
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d197      	bne.n	80016ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 81a1 	beq.w	8001ad4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d116      	bne.n	80017d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	4a22      	ldr	r2, [pc, #136]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ae:	61d3      	str	r3, [r2, #28]
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_RCC_OscConfig+0x93c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d11a      	bne.n	8001814 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_RCC_OscConfig+0x93c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_RCC_OscConfig+0x93c>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff f87b 	bl	80008e4 <HAL_GetTick>
 80017ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	e009      	b.n	8001808 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f4:	f7ff f876 	bl	80008e4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e3b1      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_RCC_OscConfig+0x93c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_OscConfig+0x940>
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a02      	ldr	r2, [pc, #8]	; (8001834 <HAL_RCC_OscConfig+0x934>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e03c      	b.n	80018ac <HAL_RCC_OscConfig+0x9ac>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	10908120 	.word	0x10908120
 800183c:	40007000 	.word	0x40007000
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x96a>
 8001850:	4bc1      	ldr	r3, [pc, #772]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4ac0      	ldr	r2, [pc, #768]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	4bbe      	ldr	r3, [pc, #760]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4abd      	ldr	r2, [pc, #756]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001862:	f023 0304 	bic.w	r3, r3, #4
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	e020      	b.n	80018ac <HAL_RCC_OscConfig+0x9ac>
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x994>
 800187a:	4bb7      	ldr	r3, [pc, #732]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4ab6      	ldr	r2, [pc, #728]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4bb4      	ldr	r3, [pc, #720]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4ab3      	ldr	r2, [pc, #716]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x9ac>
 8001894:	4bb0      	ldr	r3, [pc, #704]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4aaf      	ldr	r2, [pc, #700]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	4bad      	ldr	r3, [pc, #692]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4aac      	ldr	r2, [pc, #688]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 80018a6:	f023 0304 	bic.w	r3, r3, #4
 80018aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8081 	beq.w	80019c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff f811 	bl	80008e4 <HAL_GetTick>
 80018c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff f80c 	bl	80008e4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e345      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800190c:	2202      	movs	r2, #2
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001926:	601a      	str	r2, [r3, #0]
  return result;
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001930:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d102      	bne.n	800194c <HAL_RCC_OscConfig+0xa4c>
 8001946:	4b84      	ldr	r3, [pc, #528]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	e013      	b.n	8001974 <HAL_RCC_OscConfig+0xa74>
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001954:	2202      	movs	r2, #2
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	4b79      	ldr	r3, [pc, #484]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001978:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800197c:	2102      	movs	r1, #2
 800197e:	6011      	str	r1, [r2, #0]
 8001980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001984:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	fa92 f1a2 	rbit	r1, r2
 800198e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001992:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001996:	6011      	str	r1, [r2, #0]
  return result;
 8001998:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d084      	beq.n	80018c8 <HAL_RCC_OscConfig+0x9c8>
 80019be:	e07f      	b.n	8001ac0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7fe ff90 	bl	80008e4 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7fe ff8b 	bl	80008e4 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2c4      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a0e:	2202      	movs	r2, #2
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a28:	601a      	str	r2, [r3, #0]
  return result;
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d102      	bne.n	8001a4e <HAL_RCC_OscConfig+0xb4e>
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	e013      	b.n	8001a76 <HAL_RCC_OscConfig+0xb76>
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a56:	2202      	movs	r2, #2
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a7e:	2102      	movs	r1, #2
 8001a80:	6011      	str	r1, [r2, #0]
 8001a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	fa92 f1a2 	rbit	r1, r2
 8001a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a98:	6011      	str	r1, [r2, #0]
  return result;
 8001a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	fab2 f282 	clz	r2, r2
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f002 021f 	and.w	r2, r2, #31
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d184      	bne.n	80019ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8242 	beq.w	8001f6a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	f000 8213 	beq.w	8001f1a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	f040 8162 	bne.w	8001dca <HAL_RCC_OscConfig+0xeca>
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b2a:	601a      	str	r2, [r3, #0]
  return result;
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7fe feca 	bl	80008e4 <HAL_GetTick>
 8001b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	e00c      	b.n	8001b70 <HAL_RCC_OscConfig+0xc70>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7fe fec2 	bl	80008e4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1fd      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b94:	601a      	str	r2, [r3, #0]
  return result;
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_OscConfig+0xcba>
 8001bb4:	4bb0      	ldr	r3, [pc, #704]	; (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	e027      	b.n	8001c0a <HAL_RCC_OscConfig+0xd0a>
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fa93 f2a3 	rbit	r2, r3
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	4b9c      	ldr	r3, [pc, #624]	; (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c16:	6011      	str	r1, [r2, #0]
 8001c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	fa92 f1a2 	rbit	r1, r2
 8001c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c2e:	6011      	str	r1, [r2, #0]
  return result;
 8001c30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	fab2 f282 	clz	r2, r2
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f042 0220 	orr.w	r2, r2, #32
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f002 021f 	and.w	r2, r2, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d182      	bne.n	8001b5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	430b      	orrs	r3, r1
 8001c78:	497f      	ldr	r1, [pc, #508]	; (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fe0e 	bl	80008e4 <HAL_GetTick>
 8001cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	e009      	b.n	8001ce2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe fe09 	bl	80008e4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e144      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d06:	601a      	str	r2, [r3, #0]
  return result;
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0xe2c>
 8001d26:	4b54      	ldr	r3, [pc, #336]	; (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e027      	b.n	8001d7c <HAL_RCC_OscConfig+0xe7c>
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d88:	6011      	str	r1, [r2, #0]
 8001d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001da0:	6011      	str	r1, [r2, #0]
  return result;
 8001da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f002 021f 	and.w	r2, r2, #31
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d082      	beq.n	8001cce <HAL_RCC_OscConfig+0xdce>
 8001dc8:	e0cf      	b.n	8001f6a <HAL_RCC_OscConfig+0x106a>
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001dd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	fa93 f2a3 	rbit	r2, r3
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dee:	601a      	str	r2, [r3, #0]
  return result;
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001df8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fd68 	bl	80008e4 <HAL_GetTick>
 8001e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fd63 	bl	80008e4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e09e      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d104      	bne.n	8001e7c <HAL_RCC_OscConfig+0xf7c>
 8001e72:	4b01      	ldr	r3, [pc, #4]	; (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e029      	b.n	8001ecc <HAL_RCC_OscConfig+0xfcc>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_RCC_OscConfig+0x1078>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ed4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ede:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	fa92 f1a2 	rbit	r1, r2
 8001ee8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ef0:	6011      	str	r1, [r2, #0]
  return result;
 8001ef2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f002 021f 	and.w	r2, r2, #31
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d180      	bne.n	8001e1a <HAL_RCC_OscConfig+0xf1a>
 8001f18:	e027      	b.n	8001f6a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e01e      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_OscConfig+0x1078>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f3a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d10b      	bne.n	8001f66 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b09e      	sub	sp, #120	; 0x78
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e162      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	498b      	ldr	r1, [pc, #556]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e14a      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	497f      	ldr	r1, [pc, #508]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80dc 	beq.w	80021a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d13c      	bne.n	8002072 <HAL_RCC_ClockConfig+0xf6>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_RCC_ClockConfig+0xa6>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e00f      	b.n	8002042 <HAL_RCC_ClockConfig+0xc6>
 8002022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	667b      	str	r3, [r7, #100]	; 0x64
 8002030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002034:	663b      	str	r3, [r7, #96]	; 0x60
 8002036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002046:	65ba      	str	r2, [r7, #88]	; 0x58
 8002048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f042 0220 	orr.w	r2, r2, #32
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f002 021f 	and.w	r2, r2, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d17b      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0f3      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d13c      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x178>
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x128>
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_ClockConfig+0x148>
 80020a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
 80020b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b6:	643b      	str	r3, [r7, #64]	; 0x40
 80020b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80020ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13a      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b2      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80020f4:	2302      	movs	r3, #2
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e00d      	b.n	8002138 <HAL_RCC_ClockConfig+0x1bc>
 800211c:	2302      	movs	r3, #2
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2202      	movs	r2, #2
 800213a:	61ba      	str	r2, [r7, #24]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	617a      	str	r2, [r7, #20]
  return result;
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e079      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002178:	f7fe fbb4 	bl	80008e4 <HAL_GetTick>
 800217c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fbb0 	bl	80008e4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e061      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d214      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 0207 	bic.w	r2, r3, #7
 80021be:	4906      	ldr	r1, [pc, #24]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e040      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4912      	ldr	r1, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800221e:	f000 f829 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002222:	4601      	mov	r1, r0
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222c:	22f0      	movs	r2, #240	; 0xf0
 800222e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	60fa      	str	r2, [r7, #12]
  return result;
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	40d3      	lsrs	r3, r2
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x2ec>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	fa21 f303 	lsr.w	r3, r1, r3
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_RCC_ClockConfig+0x2f0>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCC_ClockConfig+0x2f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fb02 	bl	800085c <HAL_InitTick>
  
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3778      	adds	r7, #120	; 0x78
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	08003f9c 	.word	0x08003f9c
 800226c:	20000064 	.word	0x20000064
 8002270:	20000068 	.word	0x20000068

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b08b      	sub	sp, #44	; 0x2c
 8002278:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e03c      	b.n	800231e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e03c      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	607a      	str	r2, [r7, #4]
  return result;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	40d3      	lsrs	r3, r2
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	220f      	movs	r2, #15
 80022d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	fa92 f2a2 	rbit	r2, r2
 80022e0:	60fa      	str	r2, [r7, #12]
  return result;
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	40d3      	lsrs	r3, r2
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	fbb2 f2f3 	udiv	r2, r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e004      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	623b      	str	r3, [r7, #32]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002320:	623b      	str	r3, [r7, #32]
      break;
 8002322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002324:	6a3b      	ldr	r3, [r7, #32]
}
 8002326:	4618      	mov	r0, r3
 8002328:	372c      	adds	r7, #44	; 0x2c
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	007a1200 	.word	0x007a1200
 800233c:	08003fb4 	.word	0x08003fb4
 8002340:	08003fc4 	.word	0x08003fc4
 8002344:	003d0900 	.word	0x003d0900

08002348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000064 	.word	0x20000064

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002366:	f7ff ffef 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002374:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002378:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	603a      	str	r2, [r7, #0]
  return result;
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	08003fac 	.word	0x08003fac

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023aa:	f7ff ffcd 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08003fac 	.word	0x08003fac

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b092      	sub	sp, #72	; 0x48
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80d4 	beq.w	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240c:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10e      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a4a      	ldr	r2, [pc, #296]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	61d3      	str	r3, [r2, #28]
 8002424:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b42      	ldr	r3, [pc, #264]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a41      	ldr	r2, [pc, #260]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe fa49 	bl	80008e4 <HAL_GetTick>
 8002452:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe fa45 	bl	80008e4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e169      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b38      	ldr	r3, [pc, #224]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8084 	beq.w	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002490:	429a      	cmp	r2, r3
 8002492:	d07c      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002494:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	2301      	movs	r3, #1
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	461a      	mov	r2, r3
 80024e2:	2300      	movs	r3, #0
 80024e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04b      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe f9f5 	bl	80008e4 <HAL_GetTick>
 80024fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe f9f1 	bl	80008e4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e113      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002514:	2302      	movs	r3, #2
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	2302      	movs	r3, #2
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	61fb      	str	r3, [r7, #28]
  return result;
 800252c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d108      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002542:	4b01      	ldr	r3, [pc, #4]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	e00d      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
 8002550:	10908100 	.word	0x10908100
 8002554:	2302      	movs	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	4b78      	ldr	r3, [pc, #480]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	613a      	str	r2, [r7, #16]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	fa92 f2a2 	rbit	r2, r2
 800256e:	60fa      	str	r2, [r7, #12]
  return result;
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f002 021f 	and.w	r2, r2, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0b7      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800258e:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	496a      	ldr	r1, [pc, #424]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800259c:	4313      	orrs	r3, r2
 800259e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c0:	4b60      	ldr	r3, [pc, #384]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f023 0203 	bic.w	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	495d      	ldr	r1, [pc, #372]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025de:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4956      	ldr	r1, [pc, #344]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025fc:	4b51      	ldr	r3, [pc, #324]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	494e      	ldr	r1, [pc, #312]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800260a:	4313      	orrs	r3, r2
 800260c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f023 0210 	bic.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4947      	ldr	r1, [pc, #284]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	493f      	ldr	r1, [pc, #252]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f023 0220 	bic.w	r2, r3, #32
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4938      	ldr	r1, [pc, #224]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002664:	4313      	orrs	r3, r2
 8002666:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	4930      	ldr	r1, [pc, #192]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002682:	4313      	orrs	r3, r2
 8002684:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002692:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	4929      	ldr	r1, [pc, #164]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	4921      	ldr	r1, [pc, #132]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	491a      	ldr	r1, [pc, #104]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	4912      	ldr	r1, [pc, #72]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	490b      	ldr	r1, [pc, #44]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	4903      	ldr	r1, [pc, #12]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002736:	4313      	orrs	r3, r2
 8002738:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3748      	adds	r7, #72	; 0x48
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000

08002748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e040      	b.n	80027dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fd ffa6 	bl	80006bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0201 	bic.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fbba 	bl	8002f00 <UART_SetConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e022      	b.n	80027dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fd82 	bl	80032a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fe09 	bl	80033ec <UART_CheckIdleState>
 80027da:	4603      	mov	r3, r0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d178      	bne.n	80028ee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_UART_Transmit+0x24>
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e071      	b.n	80028f0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2221      	movs	r2, #33	; 0x21
 8002818:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281a:	f7fe f863 	bl	80008e4 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	d108      	bne.n	800284c <HAL_UART_Transmit+0x68>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e003      	b.n	8002854 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002854:	e030      	b.n	80028b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fe6b 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e03c      	b.n	80028f0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002888:	b292      	uxth	r2, r2
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	3302      	adds	r3, #2
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e008      	b.n	80028a6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b292      	uxth	r2, r2
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1c8      	bne.n	8002856 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2200      	movs	r2, #0
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fe34 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e005      	b.n	80028f0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0ba      	sub	sp, #232	; 0xe8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800291e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002922:	f640 030f 	movw	r3, #2063	; 0x80f
 8002926:	4013      	ands	r3, r2
 8002928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800292c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d115      	bne.n	8002960 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00f      	beq.n	8002960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 82ab 	beq.w	8002eac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
      }
      return;
 800295e:	e2a5      	b.n	8002eac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8117 	beq.w	8002b98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800296a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800297a:	4b85      	ldr	r3, [pc, #532]	; (8002b90 <HAL_UART_IRQHandler+0x298>)
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 810a 	beq.w	8002b98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d011      	beq.n	80029b4 <HAL_UART_IRQHandler+0xbc>
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d011      	beq.n	80029e4 <HAL_UART_IRQHandler+0xec>
 80029c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2202      	movs	r2, #2
 80029d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029da:	f043 0204 	orr.w	r2, r3, #4
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_UART_IRQHandler+0x11c>
 80029f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2204      	movs	r2, #4
 8002a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0a:	f043 0202 	orr.w	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	f043 0208 	orr.w	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_UART_IRQHandler+0x18a>
 8002a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8211 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d005      	beq.n	8002ada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04f      	beq.n	8002b7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fe4a 	bl	8003774 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d141      	bne.n	8002b72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3308      	adds	r3, #8
 8002af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3308      	adds	r3, #8
 8002b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1d9      	bne.n	8002aee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_UART_IRQHandler+0x29c>)
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f81e 	bl	8000b90 <HAL_DMA_Abort_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00f      	b.n	8002b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9be 	bl	8002eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00b      	b.n	8002b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f9ba 	bl	8002eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e007      	b.n	8002b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f9b6 	bl	8002eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002b88:	e192      	b.n	8002eb0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8a:	bf00      	nop
    return;
 8002b8c:	e190      	b.n	8002eb0 <HAL_UART_IRQHandler+0x5b8>
 8002b8e:	bf00      	nop
 8002b90:	04000120 	.word	0x04000120
 8002b94:	0800383d 	.word	0x0800383d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f040 814b 	bne.w	8002e38 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8144 	beq.w	8002e38 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 813d 	beq.w	8002e38 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	f040 80b5 	bne.w	8002d40 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8164 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f080 815c 	bcs.w	8002eb4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	f000 8086 	beq.w	8002d1e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1da      	bne.n	8002c12 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3308      	adds	r3, #8
 8002c62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c66:	e853 3f00 	ldrex	r3, [r3]
 8002c6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c8c:	e841 2300 	strex	r3, r2, [r1]
 8002c90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e1      	bne.n	8002c5c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e3      	bne.n	8002c98 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e4      	bne.n	8002cde <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd ff00 	bl	8000b1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fd fa45 	bl	80001c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d3e:	e0b9      	b.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80ab 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002d62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80a6 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e4      	bne.n	8002d6c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3308      	adds	r3, #8
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	623b      	str	r3, [r7, #32]
   return(result);
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e3      	bne.n	8002da2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0310 	bic.w	r3, r3, #16
 8002e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e4      	bne.n	8002dee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd f9c9 	bl	80001c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e36:	e03f      	b.n	8002eb8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <HAL_UART_IRQHandler+0x56a>
 8002e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fed6 	bl	8003c0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e60:	e02d      	b.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00e      	beq.n	8002e8c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01c      	beq.n	8002ebc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
    }
    return;
 8002e8a:	e017      	b.n	8002ebc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d012      	beq.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00c      	beq.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fcdf 	bl	8003868 <UART_EndTransmit_IT>
    return;
 8002eaa:	e008      	b.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
      return;
 8002eac:	bf00      	nop
 8002eae:	e006      	b.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
    return;
 8002eb0:	bf00      	nop
 8002eb2:	e004      	b.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
      return;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
      return;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <HAL_UART_IRQHandler+0x5c6>
    return;
 8002ebc:	bf00      	nop
  }

}
 8002ebe:	37e8      	adds	r7, #232	; 0xe8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f2e:	f023 030c 	bic.w	r3, r3, #12
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6979      	ldr	r1, [r7, #20]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4aa7      	ldr	r2, [pc, #668]	; (8003218 <UART_SetConfig+0x318>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d120      	bne.n	8002fc2 <UART_SetConfig+0xc2>
 8002f80:	4ba6      	ldr	r3, [pc, #664]	; (800321c <UART_SetConfig+0x31c>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d817      	bhi.n	8002fbc <UART_SetConfig+0xbc>
 8002f8c:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <UART_SetConfig+0x94>)
 8002f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f92:	bf00      	nop
 8002f94:	08002fa5 	.word	0x08002fa5
 8002f98:	08002fb1 	.word	0x08002fb1
 8002f9c:	08002fb7 	.word	0x08002fb7
 8002fa0:	08002fab 	.word	0x08002fab
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0b5      	b.n	8003116 <UART_SetConfig+0x216>
 8002faa:	2302      	movs	r3, #2
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e0b2      	b.n	8003116 <UART_SetConfig+0x216>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0af      	b.n	8003116 <UART_SetConfig+0x216>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e0ac      	b.n	8003116 <UART_SetConfig+0x216>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e0a9      	b.n	8003116 <UART_SetConfig+0x216>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a96      	ldr	r2, [pc, #600]	; (8003220 <UART_SetConfig+0x320>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d124      	bne.n	8003016 <UART_SetConfig+0x116>
 8002fcc:	4b93      	ldr	r3, [pc, #588]	; (800321c <UART_SetConfig+0x31c>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fd8:	d011      	beq.n	8002ffe <UART_SetConfig+0xfe>
 8002fda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fde:	d817      	bhi.n	8003010 <UART_SetConfig+0x110>
 8002fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe4:	d011      	beq.n	800300a <UART_SetConfig+0x10a>
 8002fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fea:	d811      	bhi.n	8003010 <UART_SetConfig+0x110>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <UART_SetConfig+0xf8>
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff4:	d006      	beq.n	8003004 <UART_SetConfig+0x104>
 8002ff6:	e00b      	b.n	8003010 <UART_SetConfig+0x110>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e08b      	b.n	8003116 <UART_SetConfig+0x216>
 8002ffe:	2302      	movs	r3, #2
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e088      	b.n	8003116 <UART_SetConfig+0x216>
 8003004:	2304      	movs	r3, #4
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e085      	b.n	8003116 <UART_SetConfig+0x216>
 800300a:	2308      	movs	r3, #8
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e082      	b.n	8003116 <UART_SetConfig+0x216>
 8003010:	2310      	movs	r3, #16
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e07f      	b.n	8003116 <UART_SetConfig+0x216>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a82      	ldr	r2, [pc, #520]	; (8003224 <UART_SetConfig+0x324>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d124      	bne.n	800306a <UART_SetConfig+0x16a>
 8003020:	4b7e      	ldr	r3, [pc, #504]	; (800321c <UART_SetConfig+0x31c>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003028:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800302c:	d011      	beq.n	8003052 <UART_SetConfig+0x152>
 800302e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003032:	d817      	bhi.n	8003064 <UART_SetConfig+0x164>
 8003034:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003038:	d011      	beq.n	800305e <UART_SetConfig+0x15e>
 800303a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800303e:	d811      	bhi.n	8003064 <UART_SetConfig+0x164>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <UART_SetConfig+0x14c>
 8003044:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003048:	d006      	beq.n	8003058 <UART_SetConfig+0x158>
 800304a:	e00b      	b.n	8003064 <UART_SetConfig+0x164>
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e061      	b.n	8003116 <UART_SetConfig+0x216>
 8003052:	2302      	movs	r3, #2
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e05e      	b.n	8003116 <UART_SetConfig+0x216>
 8003058:	2304      	movs	r3, #4
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e05b      	b.n	8003116 <UART_SetConfig+0x216>
 800305e:	2308      	movs	r3, #8
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e058      	b.n	8003116 <UART_SetConfig+0x216>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e055      	b.n	8003116 <UART_SetConfig+0x216>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <UART_SetConfig+0x328>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d124      	bne.n	80030be <UART_SetConfig+0x1be>
 8003074:	4b69      	ldr	r3, [pc, #420]	; (800321c <UART_SetConfig+0x31c>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800307c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003080:	d011      	beq.n	80030a6 <UART_SetConfig+0x1a6>
 8003082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003086:	d817      	bhi.n	80030b8 <UART_SetConfig+0x1b8>
 8003088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800308c:	d011      	beq.n	80030b2 <UART_SetConfig+0x1b2>
 800308e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003092:	d811      	bhi.n	80030b8 <UART_SetConfig+0x1b8>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <UART_SetConfig+0x1a0>
 8003098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800309c:	d006      	beq.n	80030ac <UART_SetConfig+0x1ac>
 800309e:	e00b      	b.n	80030b8 <UART_SetConfig+0x1b8>
 80030a0:	2300      	movs	r3, #0
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e037      	b.n	8003116 <UART_SetConfig+0x216>
 80030a6:	2302      	movs	r3, #2
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e034      	b.n	8003116 <UART_SetConfig+0x216>
 80030ac:	2304      	movs	r3, #4
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e031      	b.n	8003116 <UART_SetConfig+0x216>
 80030b2:	2308      	movs	r3, #8
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e02e      	b.n	8003116 <UART_SetConfig+0x216>
 80030b8:	2310      	movs	r3, #16
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e02b      	b.n	8003116 <UART_SetConfig+0x216>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5a      	ldr	r2, [pc, #360]	; (800322c <UART_SetConfig+0x32c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d124      	bne.n	8003112 <UART_SetConfig+0x212>
 80030c8:	4b54      	ldr	r3, [pc, #336]	; (800321c <UART_SetConfig+0x31c>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80030d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d4:	d011      	beq.n	80030fa <UART_SetConfig+0x1fa>
 80030d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030da:	d817      	bhi.n	800310c <UART_SetConfig+0x20c>
 80030dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e0:	d011      	beq.n	8003106 <UART_SetConfig+0x206>
 80030e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e6:	d811      	bhi.n	800310c <UART_SetConfig+0x20c>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <UART_SetConfig+0x1f4>
 80030ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f0:	d006      	beq.n	8003100 <UART_SetConfig+0x200>
 80030f2:	e00b      	b.n	800310c <UART_SetConfig+0x20c>
 80030f4:	2300      	movs	r3, #0
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e00d      	b.n	8003116 <UART_SetConfig+0x216>
 80030fa:	2302      	movs	r3, #2
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e00a      	b.n	8003116 <UART_SetConfig+0x216>
 8003100:	2304      	movs	r3, #4
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e007      	b.n	8003116 <UART_SetConfig+0x216>
 8003106:	2308      	movs	r3, #8
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e004      	b.n	8003116 <UART_SetConfig+0x216>
 800310c:	2310      	movs	r3, #16
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e001      	b.n	8003116 <UART_SetConfig+0x216>
 8003112:	2310      	movs	r3, #16
 8003114:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800311e:	d15b      	bne.n	80031d8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003120:	7ffb      	ldrb	r3, [r7, #31]
 8003122:	2b08      	cmp	r3, #8
 8003124:	d827      	bhi.n	8003176 <UART_SetConfig+0x276>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <UART_SetConfig+0x22c>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003151 	.word	0x08003151
 8003130:	08003159 	.word	0x08003159
 8003134:	08003161 	.word	0x08003161
 8003138:	08003177 	.word	0x08003177
 800313c:	08003167 	.word	0x08003167
 8003140:	08003177 	.word	0x08003177
 8003144:	08003177 	.word	0x08003177
 8003148:	08003177 	.word	0x08003177
 800314c:	0800316f 	.word	0x0800316f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003150:	f7ff f906 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003154:	61b8      	str	r0, [r7, #24]
        break;
 8003156:	e013      	b.n	8003180 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003158:	f7ff f924 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 800315c:	61b8      	str	r0, [r7, #24]
        break;
 800315e:	e00f      	b.n	8003180 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003160:	4b33      	ldr	r3, [pc, #204]	; (8003230 <UART_SetConfig+0x330>)
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e00c      	b.n	8003180 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003166:	f7ff f885 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 800316a:	61b8      	str	r0, [r7, #24]
        break;
 800316c:	e008      	b.n	8003180 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003172:	61bb      	str	r3, [r7, #24]
        break;
 8003174:	e004      	b.n	8003180 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	77bb      	strb	r3, [r7, #30]
        break;
 800317e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8082 	beq.w	800328c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	005a      	lsls	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	441a      	add	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d916      	bls.n	80031d2 <UART_SetConfig+0x2d2>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031aa:	d212      	bcs.n	80031d2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f023 030f 	bic.w	r3, r3, #15
 80031b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	89fa      	ldrh	r2, [r7, #14]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	e05c      	b.n	800328c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	77bb      	strb	r3, [r7, #30]
 80031d6:	e059      	b.n	800328c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031d8:	7ffb      	ldrb	r3, [r7, #31]
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d835      	bhi.n	800324a <UART_SetConfig+0x34a>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x2e4>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003235 	.word	0x08003235
 80031f0:	0800324b 	.word	0x0800324b
 80031f4:	0800323b 	.word	0x0800323b
 80031f8:	0800324b 	.word	0x0800324b
 80031fc:	0800324b 	.word	0x0800324b
 8003200:	0800324b 	.word	0x0800324b
 8003204:	08003243 	.word	0x08003243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7ff f8aa 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 800320c:	61b8      	str	r0, [r7, #24]
        break;
 800320e:	e021      	b.n	8003254 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7ff f8c8 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e01d      	b.n	8003254 <UART_SetConfig+0x354>
 8003218:	40013800 	.word	0x40013800
 800321c:	40021000 	.word	0x40021000
 8003220:	40004400 	.word	0x40004400
 8003224:	40004800 	.word	0x40004800
 8003228:	40004c00 	.word	0x40004c00
 800322c:	40005000 	.word	0x40005000
 8003230:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <UART_SetConfig+0x3a4>)
 8003236:	61bb      	str	r3, [r7, #24]
        break;
 8003238:	e00c      	b.n	8003254 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323a:	f7ff f81b 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 800323e:	61b8      	str	r0, [r7, #24]
        break;
 8003240:	e008      	b.n	8003254 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003246:	61bb      	str	r3, [r7, #24]
        break;
 8003248:	e004      	b.n	8003254 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	77bb      	strb	r3, [r7, #30]
        break;
 8003252:	bf00      	nop
    }

    if (pclk != 0U)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	085a      	lsrs	r2, r3, #1
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b0f      	cmp	r3, #15
 8003272:	d909      	bls.n	8003288 <UART_SetConfig+0x388>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d205      	bcs.n	8003288 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e001      	b.n	800328c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003298:	7fbb      	ldrb	r3, [r7, #30]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	007a1200 	.word	0x007a1200

080032a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01a      	beq.n	80033be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a6:	d10a      	bne.n	80033be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b098      	sub	sp, #96	; 0x60
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033fc:	f7fd fa72 	bl	80008e4 <HAL_GetTick>
 8003400:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d12e      	bne.n	800346e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f88c 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d021      	beq.n	800346e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800343e:	653b      	str	r3, [r7, #80]	; 0x50
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
 800344a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800344e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e6      	bne.n	800342a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e062      	b.n	8003534 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d149      	bne.n	8003510 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f856 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d03c      	beq.n	8003510 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	623b      	str	r3, [r7, #32]
   return(result);
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
 80034b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e6      	bne.n	8003496 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3308      	adds	r3, #8
 80034ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3308      	adds	r3, #8
 80034e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034e8:	61fa      	str	r2, [r7, #28]
 80034ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	617b      	str	r3, [r7, #20]
   return(result);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e5      	bne.n	80034c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e011      	b.n	8003534 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3758      	adds	r7, #88	; 0x58
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354c:	e049      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d045      	beq.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fd f9c5 	bl	80008e4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <UART_WaitOnFlagUntilTimeout+0x30>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e048      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d031      	beq.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b08      	cmp	r3, #8
 800358a:	d110      	bne.n	80035ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2208      	movs	r2, #8
 8003592:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f8ed 	bl	8003774 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2208      	movs	r2, #8
 800359e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e029      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035bc:	d111      	bne.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f8d3 	bl	8003774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e00f      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	bf0c      	ite	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	2300      	movne	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d0a6      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b097      	sub	sp, #92	; 0x5c
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363e:	d10e      	bne.n	800365e <UART_Start_Receive_IT+0x52>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <UART_Start_Receive_IT+0x48>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800364e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003652:	e01a      	b.n	800368a <UART_Start_Receive_IT+0x7e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	22ff      	movs	r2, #255	; 0xff
 8003658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800365c:	e015      	b.n	800368a <UART_Start_Receive_IT+0x7e>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <UART_Start_Receive_IT+0x76>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <UART_Start_Receive_IT+0x6c>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003676:	e008      	b.n	800368a <UART_Start_Receive_IT+0x7e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	227f      	movs	r2, #127	; 0x7f
 800367c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003680:	e003      	b.n	800368a <UART_Start_Receive_IT+0x7e>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2222      	movs	r2, #34	; 0x22
 8003696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	657b      	str	r3, [r7, #84]	; 0x54
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3308      	adds	r3, #8
 80036b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d107      	bne.n	80036e8 <UART_Start_Receive_IT+0xdc>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a22      	ldr	r2, [pc, #136]	; (800376c <UART_Start_Receive_IT+0x160>)
 80036e4:	669a      	str	r2, [r3, #104]	; 0x68
 80036e6:	e002      	b.n	80036ee <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a21      	ldr	r2, [pc, #132]	; (8003770 <UART_Start_Receive_IT+0x164>)
 80036ec:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d019      	beq.n	800372a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e6      	bne.n	80036f6 <UART_Start_Receive_IT+0xea>
 8003728:	e018      	b.n	800375c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	613b      	str	r3, [r7, #16]
   return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f043 0320 	orr.w	r3, r3, #32
 800373e:	653b      	str	r3, [r7, #80]	; 0x50
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003748:	623b      	str	r3, [r7, #32]
 800374a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	69f9      	ldr	r1, [r7, #28]
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	61bb      	str	r3, [r7, #24]
   return(result);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e6      	bne.n	800372a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	375c      	adds	r7, #92	; 0x5c
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	08003a65 	.word	0x08003a65
 8003770:	080038bd 	.word	0x080038bd

08003774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003774:	b480      	push	{r7}
 8003776:	b095      	sub	sp, #84	; 0x54
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	643b      	str	r3, [r7, #64]	; 0x40
 800379c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e6      	bne.n	800377c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3308      	adds	r3, #8
 80037b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d118      	bne.n	800381c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	613b      	str	r3, [r7, #16]
   return(result);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e6      	bne.n	80037ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003830:	bf00      	nop
 8003832:	3754      	adds	r7, #84	; 0x54
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f7ff fb46 	bl	8002eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	60bb      	str	r3, [r7, #8]
   return(result);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6979      	ldr	r1, [r7, #20]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	613b      	str	r3, [r7, #16]
   return(result);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e6      	bne.n	8003870 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fb08 	bl	8002ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b09c      	sub	sp, #112	; 0x70
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d4:	2b22      	cmp	r3, #34	; 0x22
 80038d6:	f040 80b9 	bne.w	8003a4c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80038e8:	b2d9      	uxtb	r1, r3
 80038ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	400a      	ands	r2, r1
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 809c 	bne.w	8003a5c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003938:	66bb      	str	r3, [r7, #104]	; 0x68
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003942:	65bb      	str	r3, [r7, #88]	; 0x58
 8003944:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e6      	bne.n	8003924 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	667b      	str	r3, [r7, #100]	; 0x64
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003976:	647a      	str	r2, [r7, #68]	; 0x44
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800397c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e5      	bne.n	8003956 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d018      	beq.n	80039de <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	623b      	str	r3, [r7, #32]
   return(result);
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c0:	663b      	str	r3, [r7, #96]	; 0x60
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
 80039cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e6      	bne.n	80039ac <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d12e      	bne.n	8003a44 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	69b9      	ldr	r1, [r7, #24]
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	617b      	str	r3, [r7, #20]
   return(result);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e6      	bne.n	80039ec <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d103      	bne.n	8003a34 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2210      	movs	r2, #16
 8003a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fc fbc3 	bl	80001c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a42:	e00b      	b.n	8003a5c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fa47 	bl	8002ed8 <HAL_UART_RxCpltCallback>
}
 8003a4a:	e007      	b.n	8003a5c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	619a      	str	r2, [r3, #24]
}
 8003a5c:	bf00      	nop
 8003a5e:	3770      	adds	r7, #112	; 0x70
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b09c      	sub	sp, #112	; 0x70
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b22      	cmp	r3, #34	; 0x22
 8003a7e:	f040 80b9 	bne.w	8003bf4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003a96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aa0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 809c 	bne.w	8003c04 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aea:	657b      	str	r3, [r7, #84]	; 0x54
 8003aec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3308      	adds	r3, #8
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	663b      	str	r3, [r7, #96]	; 0x60
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b1e:	643a      	str	r2, [r7, #64]	; 0x40
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d018      	beq.n	8003b86 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b74:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e6      	bne.n	8003b54 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d12e      	bne.n	8003bec <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f023 0310 	bic.w	r3, r3, #16
 8003ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d103      	bne.n	8003bdc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2210      	movs	r2, #16
 8003bda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fc faef 	bl	80001c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bea:	e00b      	b.n	8003c04 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff f973 	bl	8002ed8 <HAL_UART_RxCpltCallback>
}
 8003bf2:	e007      	b.n	8003c04 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	619a      	str	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	3770      	adds	r7, #112	; 0x70
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d142      	bne.n	8003cbe <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e03b      	b.n	8003cc0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff fcd6 	bl	800360c <UART_Start_Receive_IT>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d124      	bne.n	8003cb8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d11d      	bne.n	8003cb2 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f043 0310 	orr.w	r3, r3, #16
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6a39      	ldr	r1, [r7, #32]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e6      	bne.n	8003c7e <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8003cb0:	e002      	b.n	8003cb8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cbc:	e000      	b.n	8003cc0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3730      	adds	r7, #48	; 0x30
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	4d0d      	ldr	r5, [pc, #52]	; (8003d00 <__libc_init_array+0x38>)
 8003ccc:	4c0d      	ldr	r4, [pc, #52]	; (8003d04 <__libc_init_array+0x3c>)
 8003cce:	1b64      	subs	r4, r4, r5
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	2600      	movs	r6, #0
 8003cd4:	42a6      	cmp	r6, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	4d0b      	ldr	r5, [pc, #44]	; (8003d08 <__libc_init_array+0x40>)
 8003cda:	4c0c      	ldr	r4, [pc, #48]	; (8003d0c <__libc_init_array+0x44>)
 8003cdc:	f000 f820 	bl	8003d20 <_init>
 8003ce0:	1b64      	subs	r4, r4, r5
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	2600      	movs	r6, #0
 8003ce6:	42a6      	cmp	r6, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf0:	4798      	blx	r3
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfa:	4798      	blx	r3
 8003cfc:	3601      	adds	r6, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	08003fd4 	.word	0x08003fd4
 8003d04:	08003fd4 	.word	0x08003fd4
 8003d08:	08003fd4 	.word	0x08003fd4
 8003d0c:	08003fd8 	.word	0x08003fd8

08003d10 <memset>:
 8003d10:	4402      	add	r2, r0
 8003d12:	4603      	mov	r3, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <_init>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr

08003d2c <_fini>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr
