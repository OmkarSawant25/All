
PWM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003890  08003890  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003890  08003890  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003890  08003890  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a470  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b4  00000000  00000000  0002a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000960  00000000  00000000  0002c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c834  00000000  00000000  0002d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3d9  00000000  00000000  00049a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae579  00000000  00000000  00055df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010436e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029e4  00000000  00000000  001043c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003848 	.word	0x08003848

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003848 	.word	0x08003848

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa6a 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f932 	bl	800043c <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f912 	bl	8000400 <MX_DMA_Init>
  MX_TIM1_Init();
 80001dc:	f000 f864 	bl	80002a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 50;
 80001e0:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <main+0x28>)
 80001e2:	2232      	movs	r2, #50	; 0x32
 80001e4:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001e6:	2100      	movs	r1, #0
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <main+0x2c>)
 80001ea:	f002 faff 	bl	80027ec <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ee:	e7fe      	b.n	80001ee <main+0x26>
 80001f0:	40012c00 	.word	0x40012c00
 80001f4:	20000028 	.word	0x20000028

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09e      	sub	sp, #120	; 0x78
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 fb16 	bl	8003838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	223c      	movs	r2, #60	; 0x3c
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fb08 	bl	8003838 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000228:	2302      	movs	r3, #2
 800022a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000230:	2310      	movs	r3, #16
 8000232:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000234:	2302      	movs	r3, #2
 8000236:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000238:	2300      	movs	r3, #0
 800023a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000240:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fe44 	bl	8000ed4 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000252:	f000 f90b 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800026c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000270:	2101      	movs	r1, #1
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fe6c 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800027e:	f000 f8f5 	bl	800046c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000286:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000288:	2300      	movs	r3, #0
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f002 f844 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800029a:	f000 f8e7 	bl	800046c <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3778      	adds	r7, #120	; 0x78
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b09a      	sub	sp, #104	; 0x68
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]
 80002da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	222c      	movs	r2, #44	; 0x2c
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 faa8 	bl	8003838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002e8:	4b43      	ldr	r3, [pc, #268]	; (80003f8 <MX_TIM1_Init+0x150>)
 80002ea:	4a44      	ldr	r2, [pc, #272]	; (80003fc <MX_TIM1_Init+0x154>)
 80002ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80002ee:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <MX_TIM1_Init+0x150>)
 80002f0:	2247      	movs	r2, #71	; 0x47
 80002f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f4:	4b40      	ldr	r3, [pc, #256]	; (80003f8 <MX_TIM1_Init+0x150>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80002fa:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <MX_TIM1_Init+0x150>)
 80002fc:	2263      	movs	r2, #99	; 0x63
 80002fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000300:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <MX_TIM1_Init+0x150>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000306:	4b3c      	ldr	r3, [pc, #240]	; (80003f8 <MX_TIM1_Init+0x150>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030c:	4b3a      	ldr	r3, [pc, #232]	; (80003f8 <MX_TIM1_Init+0x150>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000312:	4839      	ldr	r0, [pc, #228]	; (80003f8 <MX_TIM1_Init+0x150>)
 8000314:	f002 f9b2 	bl	800267c <HAL_TIM_Base_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800031e:	f000 f8a5 	bl	800046c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000326:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800032c:	4619      	mov	r1, r3
 800032e:	4832      	ldr	r0, [pc, #200]	; (80003f8 <MX_TIM1_Init+0x150>)
 8000330:	f002 fc70 	bl	8002c14 <HAL_TIM_ConfigClockSource>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800033a:	f000 f897 	bl	800046c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800033e:	482e      	ldr	r0, [pc, #184]	; (80003f8 <MX_TIM1_Init+0x150>)
 8000340:	f002 f9f3 	bl	800272a <HAL_TIM_PWM_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800034a:	f000 f88f 	bl	800046c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034e:	2300      	movs	r3, #0
 8000350:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800035a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800035e:	4619      	mov	r1, r3
 8000360:	4825      	ldr	r0, [pc, #148]	; (80003f8 <MX_TIM1_Init+0x150>)
 8000362:	f003 f947 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800036c:	f000 f87e 	bl	800046c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000370:	2360      	movs	r3, #96	; 0x60
 8000372:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000378:	2300      	movs	r3, #0
 800037a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800037c:	2300      	movs	r3, #0
 800037e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000384:	2300      	movs	r3, #0
 8000386:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800038c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000390:	2200      	movs	r2, #0
 8000392:	4619      	mov	r1, r3
 8000394:	4818      	ldr	r0, [pc, #96]	; (80003f8 <MX_TIM1_Init+0x150>)
 8000396:	f002 fb29 	bl	80029ec <HAL_TIM_PWM_ConfigChannel>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80003a0:	f000 f864 	bl	800046c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	4807      	ldr	r0, [pc, #28]	; (80003f8 <MX_TIM1_Init+0x150>)
 80003da:	f003 f98b 	bl	80036f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80003e4:	f000 f842 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <MX_TIM1_Init+0x150>)
 80003ea:	f000 f8b3 	bl	8000554 <HAL_TIM_MspPostInit>

}
 80003ee:	bf00      	nop
 80003f0:	3768      	adds	r7, #104	; 0x68
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000028 	.word	0x20000028
 80003fc:	40012c00 	.word	0x40012c00

08000400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_DMA_Init+0x38>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <MX_DMA_Init+0x38>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_DMA_Init+0x38>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	200c      	movs	r0, #12
 8000424:	f000 fa7f 	bl	8000926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000428:	200c      	movs	r0, #12
 800042a:	f000 fa98 	bl	800095e <HAL_NVIC_EnableIRQ>

}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_GPIO_Init+0x2c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <MX_GPIO_Init+0x2c>)
 8000448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_GPIO_Init+0x2c>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	e7fe      	b.n	8000474 <Error_Handler+0x8>
	...

08000478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ae:	2007      	movs	r0, #7
 80004b0:	f000 fa2e 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <HAL_TIM_Base_MspInit+0x84>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d133      	bne.n	800053a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004d2:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <HAL_TIM_Base_MspInit+0x88>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <HAL_TIM_Base_MspInit+0x88>)
 80004d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <HAL_TIM_Base_MspInit+0x88>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 80004ec:	4a18      	ldr	r2, [pc, #96]	; (8000550 <HAL_TIM_Base_MspInit+0x90>)
 80004ee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 80004f2:	2210      	movs	r2, #16
 80004f4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 8000504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000508:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 800050c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000510:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 8000520:	f000 fa37 	bl	8000992 <HAL_DMA_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800052a:	f7ff ff9f 	bl	800046c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a06      	ldr	r2, [pc, #24]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <HAL_TIM_Base_MspInit+0x8c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40012c00 	.word	0x40012c00
 8000548:	40021000 	.word	0x40021000
 800054c:	20000074 	.word	0x20000074
 8000550:	4002001c 	.word	0x4002001c

08000554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <HAL_TIM_MspPostInit+0x64>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d11c      	bne.n	80005b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <HAL_TIM_MspPostInit+0x68>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a10      	ldr	r2, [pc, #64]	; (80005bc <HAL_TIM_MspPostInit+0x68>)
 800057c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_TIM_MspPostInit+0x68>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800058e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <HAL_TIM_MspPostInit+0x6c>)
 80005ac:	f000 fb18 	bl	8000be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40012c00 	.word	0x40012c00
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48001000 	.word	0x48001000

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <MemManage_Handler+0x4>

080005d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 f88e 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <DMA1_Channel2_IRQHandler+0x10>)
 800061e:	f000 f9ff 	bl	8000a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000074 	.word	0x20000074

0800062c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <SystemInit+0x20>)
 8000632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <SystemInit+0x20>)
 8000638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800063c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000688 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000654:	f7ff ffea 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067e:	f003 f8b7 	bl	80037f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000682:	f7ff fda1 	bl	80001c8 <main>

08000686 <LoopForever>:

LoopForever:
    b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000694:	08003898 	.word	0x08003898
  ldr r2, =_sbss
 8000698:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800069c:	200000bc 	.word	0x200000bc

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f92b 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff feda 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f943 	bl	800097a <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f90b 	bl	8000926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_IncTick+0x20>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_IncTick+0x24>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_IncTick+0x24>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000008 	.word	0x20000008
 8000754:	200000b8 	.word	0x200000b8

08000758 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;  
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000b8 	.word	0x200000b8

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f7ff ff8e 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff29 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000938:	f7ff ff3e 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 800093c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f7ff ff8e 	bl	8000864 <NVIC_EncodePriority>
 8000948:	4602      	mov	r2, r0
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff5d 	bl	8000810 <__NVIC_SetPriority>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff31 	bl	80007d4 <__NVIC_EnableIRQ>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffa2 	bl	80008cc <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000992:	b580      	push	{r7, lr}
 8000994:	b084      	sub	sp, #16
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e037      	b.n	8000a18 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2202      	movs	r2, #2
 80009ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f8b4 	bl	8000b68 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}  
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d024      	beq.n	8000a92 <HAL_DMA_IRQHandler+0x72>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d01f      	beq.n	8000a92 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f003 0320 	and.w	r3, r3, #32
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d107      	bne.n	8000a70 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f022 0204 	bic.w	r2, r2, #4
 8000a6e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a78:	2104      	movs	r1, #4
 8000a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d06a      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000a90:	e065      	b.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	2202      	movs	r2, #2
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d02c      	beq.n	8000afc <HAL_DMA_IRQHandler+0xdc>
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d027      	beq.n	8000afc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 020a 	bic.w	r2, r2, #10
 8000ac8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2201      	movs	r2, #1
 8000ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ada:	2102      	movs	r1, #2
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d035      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000afa:	e030      	b.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	2208      	movs	r2, #8
 8000b02:	409a      	lsls	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d028      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d023      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 020e 	bic.w	r2, r2, #14
 8000b24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	4798      	blx	r3
    }
  }
}  
 8000b5c:	e7ff      	b.n	8000b5e <HAL_DMA_IRQHandler+0x13e>
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <DMA_CalcBaseAndBitshift+0x60>)
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d80f      	bhi.n	8000b9c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <DMA_CalcBaseAndBitshift+0x64>)
 8000b84:	4413      	add	r3, r2
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	009a      	lsls	r2, r3, #2
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <DMA_CalcBaseAndBitshift+0x6c>)
 8000b98:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000b9a:	e00e      	b.n	8000bba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <DMA_CalcBaseAndBitshift+0x70>)
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	009a      	lsls	r2, r3, #2
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <DMA_CalcBaseAndBitshift+0x74>)
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40020407 	.word	0x40020407
 8000bcc:	bffdfff8 	.word	0xbffdfff8
 8000bd0:	cccccccd 	.word	0xcccccccd
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	bffdfbf8 	.word	0xbffdfbf8
 8000bdc:	40020400 	.word	0x40020400

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bee:	e154      	b.n	8000e9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 8146 	beq.w	8000e94 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d005      	beq.n	8000c20 <HAL_GPIO_Init+0x40>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d130      	bne.n	8000c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c56:	2201      	movs	r2, #1
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	f003 0201 	and.w	r2, r3, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d017      	beq.n	8000cbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d123      	bne.n	8000d12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3208      	adds	r2, #8
 8000cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	691a      	ldr	r2, [r3, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	6939      	ldr	r1, [r7, #16]
 8000d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0203 	and.w	r2, r3, #3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 80a0 	beq.w	8000e94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d54:	4b58      	ldr	r3, [pc, #352]	; (8000eb8 <HAL_GPIO_Init+0x2d8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a57      	ldr	r2, [pc, #348]	; (8000eb8 <HAL_GPIO_Init+0x2d8>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b55      	ldr	r3, [pc, #340]	; (8000eb8 <HAL_GPIO_Init+0x2d8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d6c:	4a53      	ldr	r2, [pc, #332]	; (8000ebc <HAL_GPIO_Init+0x2dc>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d96:	d019      	beq.n	8000dcc <HAL_GPIO_Init+0x1ec>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a49      	ldr	r2, [pc, #292]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d013      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e8>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <HAL_GPIO_Init+0x2e4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d00d      	beq.n	8000dc4 <HAL_GPIO_Init+0x1e4>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <HAL_GPIO_Init+0x2e8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0x1e0>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a46      	ldr	r2, [pc, #280]	; (8000ecc <HAL_GPIO_Init+0x2ec>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d101      	bne.n	8000dbc <HAL_GPIO_Init+0x1dc>
 8000db8:	2304      	movs	r3, #4
 8000dba:	e008      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dbc:	2305      	movs	r3, #5
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_Init+0x1ee>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dde:	4937      	ldr	r1, [pc, #220]	; (8000ebc <HAL_GPIO_Init+0x2dc>)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dec:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e10:	4a2f      	ldr	r2, [pc, #188]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e3a:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e64:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_GPIO_Init+0x2f0>)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f aea3 	bne.w	8000bf0 <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	48001000 	.word	0x48001000
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f001 b823 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 817d 	beq.w	800120a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f10:	4bbc      	ldr	r3, [pc, #752]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d00c      	beq.n	8000f36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f1c:	4bb9      	ldr	r3, [pc, #740]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d15c      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x10e>
 8000f28:	4bb6      	ldr	r3, [pc, #728]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	d155      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x10e>
 8000f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <HAL_RCC_OscConfig+0x94>
 8000f62:	4ba8      	ldr	r3, [pc, #672]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	e015      	b.n	8000f94 <HAL_RCC_OscConfig+0xc0>
 8000f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f90:	4b9c      	ldr	r3, [pc, #624]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fa0:	fa92 f2a2 	rbit	r2, r2
 8000fa4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000fa8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fac:	fab2 f282 	clz	r2, r2
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	f042 0220 	orr.w	r2, r2, #32
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	f002 021f 	and.w	r2, r2, #31
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 811f 	beq.w	8001208 <HAL_RCC_OscConfig+0x334>
 8000fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f040 8116 	bne.w	8001208 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f000 bfaf 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff2:	d106      	bne.n	8001002 <HAL_RCC_OscConfig+0x12e>
 8000ff4:	4b83      	ldr	r3, [pc, #524]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a82      	ldr	r2, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e036      	b.n	8001070 <HAL_RCC_OscConfig+0x19c>
 8001002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x158>
 8001012:	4b7c      	ldr	r3, [pc, #496]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a7b      	ldr	r2, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b79      	ldr	r3, [pc, #484]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a78      	ldr	r2, [pc, #480]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e021      	b.n	8001070 <HAL_RCC_OscConfig+0x19c>
 800102c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x184>
 800103e:	4b71      	ldr	r3, [pc, #452]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a70      	ldr	r2, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a6d      	ldr	r2, [pc, #436]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e00b      	b.n	8001070 <HAL_RCC_OscConfig+0x19c>
 8001058:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a69      	ldr	r2, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 800105e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001070:	4b64      	ldr	r3, [pc, #400]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	f023 020f 	bic.w	r2, r3, #15
 8001078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	495f      	ldr	r1, [pc, #380]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001086:	4313      	orrs	r3, r2
 8001088:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d059      	beq.n	800114e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fb5d 	bl	8000758 <HAL_GetTick>
 800109e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	e00a      	b.n	80010ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fb58 	bl	8000758 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d902      	bls.n	80010ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	f000 bf43 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
 80010ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <HAL_RCC_OscConfig+0x218>
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	e015      	b.n	8001118 <HAL_RCC_OscConfig+0x244>
 80010ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001104:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001108:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001114:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001120:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001124:	fa92 f2a2 	rbit	r2, r2
 8001128:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800112c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f042 0220 	orr.w	r2, r2, #32
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f002 021f 	and.w	r2, r2, #31
 8001140:	2101      	movs	r1, #1
 8001142:	fa01 f202 	lsl.w	r2, r1, r2
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ab      	beq.n	80010a4 <HAL_RCC_OscConfig+0x1d0>
 800114c:	e05d      	b.n	800120a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb03 	bl	8000758 <HAL_GetTick>
 8001152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e00a      	b.n	800116e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fafe 	bl	8000758 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b64      	cmp	r3, #100	; 0x64
 8001166:	d902      	bls.n	800116e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	f000 bee9 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
 800116e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001172:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001182:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	095b      	lsrs	r3, r3, #5
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0x2cc>
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	e015      	b.n	80011cc <HAL_RCC_OscConfig+0x2f8>
 80011a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_RCC_OscConfig+0x330>)
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011d8:	fa92 f2a2 	rbit	r2, r2
 80011dc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011e4:	fab2 f282 	clz	r2, r2
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	f042 0220 	orr.w	r2, r2, #32
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	f002 021f 	and.w	r2, r2, #31
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f202 	lsl.w	r2, r1, r2
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ab      	bne.n	8001158 <HAL_RCC_OscConfig+0x284>
 8001200:	e003      	b.n	800120a <HAL_RCC_OscConfig+0x336>
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 817d 	beq.w	800151a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001220:	4ba6      	ldr	r3, [pc, #664]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800122c:	4ba3      	ldr	r3, [pc, #652]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d172      	bne.n	800131e <HAL_RCC_OscConfig+0x44a>
 8001238:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d16c      	bne.n	800131e <HAL_RCC_OscConfig+0x44a>
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001256:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	095b      	lsrs	r3, r3, #5
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <HAL_RCC_OscConfig+0x3a0>
 800126e:	4b93      	ldr	r3, [pc, #588]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	e013      	b.n	800129c <HAL_RCC_OscConfig+0x3c8>
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800128c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001298:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2202      	movs	r2, #2
 800129e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80012a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012a6:	fa92 f2a2 	rbit	r2, r2
 80012aa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	f002 021f 	and.w	r2, r2, #31
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <HAL_RCC_OscConfig+0x410>
 80012ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d002      	beq.n	80012e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	f000 be2e 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b75      	ldr	r3, [pc, #468]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	21f8      	movs	r1, #248	; 0xf8
 80012fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001302:	fa91 f1a1 	rbit	r1, r1
 8001306:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800130a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800130e:	fab1 f181 	clz	r1, r1
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	408b      	lsls	r3, r1
 8001316:	4969      	ldr	r1, [pc, #420]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131c:	e0fd      	b.n	800151a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8088 	beq.w	8001440 <HAL_RCC_OscConfig+0x56c>
 8001330:	2301      	movs	r3, #1
 8001332:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001342:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	461a      	mov	r2, r3
 8001358:	2301      	movs	r3, #1
 800135a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff f9fc 	bl	8000758 <HAL_GetTick>
 8001360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff f9f7 	bl	8000758 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d902      	bls.n	800137c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	f000 bde2 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800138e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d102      	bne.n	80013ac <HAL_RCC_OscConfig+0x4d8>
 80013a6:	4b45      	ldr	r3, [pc, #276]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	e013      	b.n	80013d4 <HAL_RCC_OscConfig+0x500>
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	2202      	movs	r2, #2
 80013d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013de:	fa92 f2a2 	rbit	r2, r2
 80013e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013ea:	fab2 f282 	clz	r2, r2
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	f042 0220 	orr.w	r2, r2, #32
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f002 021f 	and.w	r2, r2, #31
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0af      	beq.n	8001366 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	21f8      	movs	r1, #248	; 0xf8
 800141c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001424:	fa91 f1a1 	rbit	r1, r1
 8001428:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800142c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001430:	fab1 f181 	clz	r1, r1
 8001434:	b2c9      	uxtb	r1, r1
 8001436:	408b      	lsls	r3, r1
 8001438:	4920      	ldr	r1, [pc, #128]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
 800143e:	e06c      	b.n	800151a <HAL_RCC_OscConfig+0x646>
 8001440:	2301      	movs	r3, #1
 8001442:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001452:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	461a      	mov	r2, r3
 8001468:	2300      	movs	r3, #0
 800146a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff f974 	bl	8000758 <HAL_GetTick>
 8001470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff f96f 	bl	8000758 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d902      	bls.n	800148c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	f000 bd5a 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800149e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	095b      	lsrs	r3, r3, #5
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d104      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5ec>
 80014b6:	4b01      	ldr	r3, [pc, #4]	; (80014bc <HAL_RCC_OscConfig+0x5e8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	e015      	b.n	80014e8 <HAL_RCC_OscConfig+0x614>
 80014bc:	40021000 	.word	0x40021000
 80014c0:	2302      	movs	r3, #2
 80014c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014e4:	4bc8      	ldr	r3, [pc, #800]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	2202      	movs	r2, #2
 80014ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014f2:	fa92 f2a2 	rbit	r2, r2
 80014f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014fe:	fab2 f282 	clz	r2, r2
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f002 021f 	and.w	r2, r2, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ad      	bne.n	8001476 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8110 	beq.w	8001750 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d079      	beq.n	8001634 <HAL_RCC_OscConfig+0x760>
 8001540:	2301      	movs	r3, #1
 8001542:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	4bab      	ldr	r3, [pc, #684]	; (800180c <HAL_RCC_OscConfig+0x938>)
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	461a      	mov	r2, r3
 8001566:	2301      	movs	r3, #1
 8001568:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff f8f5 	bl	8000758 <HAL_GetTick>
 800156e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff f8f0 	bl	8000758 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d902      	bls.n	800158a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	f000 bcdb 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015a4:	2202      	movs	r2, #2
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fa93 f2a3 	rbit	r2, r3
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015c8:	2202      	movs	r2, #2
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fa93 f2a3 	rbit	r2, r3
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015f0:	2102      	movs	r1, #2
 80015f2:	6019      	str	r1, [r3, #0]
 80015f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	fa93 f1a3 	rbit	r1, r3
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800160a:	6019      	str	r1, [r3, #0]
  return result;
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0a0      	beq.n	8001574 <HAL_RCC_OscConfig+0x6a0>
 8001632:	e08d      	b.n	8001750 <HAL_RCC_OscConfig+0x87c>
 8001634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001638:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001656:	601a      	str	r2, [r3, #0]
  return result;
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001660:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x938>)
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	461a      	mov	r2, r3
 8001672:	2300      	movs	r3, #0
 8001674:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff f86f 	bl	8000758 <HAL_GetTick>
 800167a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff f86a 	bl	8000758 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d902      	bls.n	8001696 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	f000 bc55 	b.w	8001f40 <HAL_RCC_OscConfig+0x106c>
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016e6:	2202      	movs	r2, #2
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001700:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 8001704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800170e:	2102      	movs	r1, #2
 8001710:	6019      	str	r1, [r3, #0]
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f1a3 	rbit	r1, r3
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001728:	6019      	str	r1, [r3, #0]
  return result;
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d197      	bne.n	8001680 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 81a1 	beq.w	8001aa8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d116      	bne.n	80017a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	4a22      	ldr	r2, [pc, #136]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	61d3      	str	r3, [r2, #28]
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800179e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_RCC_OscConfig+0x93c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11a      	bne.n	80017e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_RCC_OscConfig+0x93c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_RCC_OscConfig+0x93c>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7fe ffcb 	bl	8000758 <HAL_GetTick>
 80017c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	e009      	b.n	80017dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c8:	f7fe ffc6 	bl	8000758 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e3b1      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_RCC_OscConfig+0x93c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ef      	beq.n	80017c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10d      	bne.n	8001814 <HAL_RCC_OscConfig+0x940>
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a02      	ldr	r2, [pc, #8]	; (8001808 <HAL_RCC_OscConfig+0x934>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e03c      	b.n	8001880 <HAL_RCC_OscConfig+0x9ac>
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	10908120 	.word	0x10908120
 8001810:	40007000 	.word	0x40007000
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x96a>
 8001824:	4bc1      	ldr	r3, [pc, #772]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4ac0      	ldr	r2, [pc, #768]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	4bbe      	ldr	r3, [pc, #760]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4abd      	ldr	r2, [pc, #756]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6213      	str	r3, [r2, #32]
 800183c:	e020      	b.n	8001880 <HAL_RCC_OscConfig+0x9ac>
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x994>
 800184e:	4bb7      	ldr	r3, [pc, #732]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4ab6      	ldr	r2, [pc, #728]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	4bb4      	ldr	r3, [pc, #720]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4ab3      	ldr	r2, [pc, #716]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0x9ac>
 8001868:	4bb0      	ldr	r3, [pc, #704]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4aaf      	ldr	r2, [pc, #700]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	6213      	str	r3, [r2, #32]
 8001874:	4bad      	ldr	r3, [pc, #692]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4aac      	ldr	r2, [pc, #688]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 800187a:	f023 0304 	bic.w	r3, r3, #4
 800187e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8081 	beq.w	8001994 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7fe ff61 	bl	8000758 <HAL_GetTick>
 8001896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7fe ff5c 	bl	8000758 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e345      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018e0:	2202      	movs	r2, #2
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001904:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	095b      	lsrs	r3, r3, #5
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0xa4c>
 800191a:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	e013      	b.n	8001948 <HAL_RCC_OscConfig+0xa74>
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001928:	2202      	movs	r2, #2
 800192a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001950:	2102      	movs	r1, #2
 8001952:	6011      	str	r1, [r2, #0]
 8001954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001958:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	fa92 f1a2 	rbit	r1, r2
 8001962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001966:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800196a:	6011      	str	r1, [r2, #0]
  return result;
 800196c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001970:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	fab2 f282 	clz	r2, r2
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	f002 021f 	and.w	r2, r2, #31
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d084      	beq.n	800189c <HAL_RCC_OscConfig+0x9c8>
 8001992:	e07f      	b.n	8001a94 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7fe fee0 	bl	8000758 <HAL_GetTick>
 8001998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7fe fedb 	bl	8000758 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e2c4      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019be:	2202      	movs	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019fc:	601a      	str	r2, [r3, #0]
  return result;
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0xb4e>
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	e013      	b.n	8001a4a <HAL_RCC_OscConfig+0xb76>
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a52:	2102      	movs	r1, #2
 8001a54:	6011      	str	r1, [r2, #0]
 8001a56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	fa92 f1a2 	rbit	r1, r2
 8001a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a68:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a6c:	6011      	str	r1, [r2, #0]
  return result;
 8001a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a72:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f002 021f 	and.w	r2, r2, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d184      	bne.n	800199e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8242 	beq.w	8001f3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_RCC_OscConfig+0xc58>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	f000 8213 	beq.w	8001eee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	f040 8162 	bne.w	8001d9e <HAL_RCC_OscConfig+0xeca>
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ae2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001afe:	601a      	str	r2, [r3, #0]
  return result;
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7fe fe1a 	bl	8000758 <HAL_GetTick>
 8001b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	e00c      	b.n	8001b44 <HAL_RCC_OscConfig+0xc70>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe fe12 	bl	8000758 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1fd      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b68:	601a      	str	r2, [r3, #0]
  return result;
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d102      	bne.n	8001b8e <HAL_RCC_OscConfig+0xcba>
 8001b88:	4bb0      	ldr	r3, [pc, #704]	; (8001e4c <HAL_RCC_OscConfig+0xf78>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	e027      	b.n	8001bde <HAL_RCC_OscConfig+0xd0a>
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	4b9c      	ldr	r3, [pc, #624]	; (8001e4c <HAL_RCC_OscConfig+0xf78>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001be6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bea:	6011      	str	r1, [r2, #0]
 8001bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	fa92 f1a2 	rbit	r1, r2
 8001bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c02:	6011      	str	r1, [r2, #0]
  return result;
 8001c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c08:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f042 0220 	orr.w	r2, r2, #32
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f002 021f 	and.w	r2, r2, #31
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d182      	bne.n	8001b30 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2a:	4b88      	ldr	r3, [pc, #544]	; (8001e4c <HAL_RCC_OscConfig+0xf78>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	497f      	ldr	r1, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0xf78>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c76:	601a      	str	r2, [r3, #0]
  return result;
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	461a      	mov	r2, r3
 8001c94:	2301      	movs	r3, #1
 8001c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe fd5e 	bl	8000758 <HAL_GetTick>
 8001c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca0:	e009      	b.n	8001cb6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7fe fd59 	bl	8000758 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e144      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cda:	601a      	str	r2, [r3, #0]
  return result;
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ce4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_OscConfig+0xe2c>
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_RCC_OscConfig+0xf78>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e027      	b.n	8001d50 <HAL_RCC_OscConfig+0xe7c>
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_OscConfig+0xf78>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d54:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d5c:	6011      	str	r1, [r2, #0]
 8001d5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d62:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	fa92 f1a2 	rbit	r1, r2
 8001d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d74:	6011      	str	r1, [r2, #0]
  return result;
 8001d76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	fab2 f282 	clz	r2, r2
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	f042 0220 	orr.w	r2, r2, #32
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f002 021f 	and.w	r2, r2, #31
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f202 	lsl.w	r2, r1, r2
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d082      	beq.n	8001ca2 <HAL_RCC_OscConfig+0xdce>
 8001d9c:	e0cf      	b.n	8001f3e <HAL_RCC_OscConfig+0x106a>
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001da6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dc2:	601a      	str	r2, [r3, #0]
  return result;
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	461a      	mov	r2, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fcb8 	bl	8000758 <HAL_GetTick>
 8001de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	e009      	b.n	8001e02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe fcb3 	bl	8000758 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e09e      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e26:	601a      	str	r2, [r3, #0]
  return result;
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d104      	bne.n	8001e50 <HAL_RCC_OscConfig+0xf7c>
 8001e46:	4b01      	ldr	r3, [pc, #4]	; (8001e4c <HAL_RCC_OscConfig+0xf78>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	e029      	b.n	8001ea0 <HAL_RCC_OscConfig+0xfcc>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	fa93 f2a3 	rbit	r2, r3
 8001e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCC_OscConfig+0x1078>)
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ea8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eac:	6011      	str	r1, [r2, #0]
 8001eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eb2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	fa92 f1a2 	rbit	r1, r2
 8001ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ec4:	6011      	str	r1, [r2, #0]
  return result;
 8001ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	fab2 f282 	clz	r2, r2
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f002 021f 	and.w	r2, r2, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d180      	bne.n	8001dee <HAL_RCC_OscConfig+0xf1a>
 8001eec:	e027      	b.n	8001f3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e01e      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCC_OscConfig+0x1078>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b09e      	sub	sp, #120	; 0x78
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e162      	b.n	800222e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b90      	ldr	r3, [pc, #576]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d910      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b8d      	ldr	r3, [pc, #564]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	498b      	ldr	r1, [pc, #556]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b89      	ldr	r3, [pc, #548]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e14a      	b.n	800222e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	497f      	ldr	r1, [pc, #508]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80dc 	beq.w	800217c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d13c      	bne.n	8002046 <HAL_RCC_ClockConfig+0xf6>
 8001fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xa6>
 8001ff0:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e00f      	b.n	8002016 <HAL_RCC_ClockConfig+0xc6>
 8001ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	667b      	str	r3, [r7, #100]	; 0x64
 8002004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002008:	663b      	str	r3, [r7, #96]	; 0x60
 800200a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002012:	4b67      	ldr	r3, [pc, #412]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800201a:	65ba      	str	r2, [r7, #88]	; 0x58
 800201c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800201e:	fa92 f2a2 	rbit	r2, r2
 8002022:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002026:	fab2 f282 	clz	r2, r2
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f042 0220 	orr.w	r2, r2, #32
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f002 021f 	and.w	r2, r2, #31
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d17b      	bne.n	800213a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0f3      	b.n	800222e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d13c      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x178>
 800204e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002052:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800205c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_RCC_ClockConfig+0x128>
 8002072:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e00f      	b.n	8002098 <HAL_RCC_ClockConfig+0x148>
 8002078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
 8002086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208a:	643b      	str	r3, [r7, #64]	; 0x40
 800208c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209c:	63ba      	str	r2, [r7, #56]	; 0x38
 800209e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a0:	fa92 f2a2 	rbit	r2, r2
 80020a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f002 021f 	and.w	r2, r2, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d13a      	bne.n	800213a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b2      	b.n	800222e <HAL_RCC_ClockConfig+0x2de>
 80020c8:	2302      	movs	r3, #2
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x1a0>
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	e00d      	b.n	800210c <HAL_RCC_ClockConfig+0x1bc>
 80020f0:	2302      	movs	r3, #2
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	2302      	movs	r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	2202      	movs	r2, #2
 800210e:	61ba      	str	r2, [r7, #24]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	617a      	str	r2, [r7, #20]
  return result;
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f042 0220 	orr.w	r2, r2, #32
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f002 021f 	and.w	r2, r2, #31
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e079      	b.n	800222e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	491a      	ldr	r1, [pc, #104]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7fe fb04 	bl	8000758 <HAL_GetTick>
 8002150:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fb00 	bl	8000758 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e061      	b.n	800222e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d214      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4906      	ldr	r1, [pc, #24]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e040      	b.n	800222e <HAL_RCC_ClockConfig+0x2de>
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_ClockConfig+0x2e8>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	491a      	ldr	r1, [pc, #104]	; (8002238 <HAL_RCC_ClockConfig+0x2e8>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x2e8>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4912      	ldr	r1, [pc, #72]	; (8002238 <HAL_RCC_ClockConfig+0x2e8>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021f2:	f000 f829 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 80021f6:	4601      	mov	r1, r0
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_RCC_ClockConfig+0x2e8>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002200:	22f0      	movs	r2, #240	; 0xf0
 8002202:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	fa92 f2a2 	rbit	r2, r2
 800220a:	60fa      	str	r2, [r7, #12]
  return result;
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	40d3      	lsrs	r3, r2
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x2ec>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	fa21 f303 	lsr.w	r3, r1, r3
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_RCC_ClockConfig+0x2f0>)
 8002220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_RCC_ClockConfig+0x2f4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fa52 	bl	80006d0 <HAL_InitTick>
  
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3778      	adds	r7, #120	; 0x78
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	08003860 	.word	0x08003860
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	b08b      	sub	sp, #44	; 0x2c
 800224c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d002      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x30>
 8002272:	2b08      	cmp	r3, #8
 8002274:	d003      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x36>
 8002276:	e03c      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_GetSysClockFreq+0xc4>)
 800227a:	623b      	str	r3, [r7, #32]
      break;
 800227c:	e03c      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002284:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002288:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	fa92 f2a2 	rbit	r2, r2
 8002290:	607a      	str	r2, [r7, #4]
  return result;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	40d3      	lsrs	r3, r2
 800229c:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_RCC_GetSysClockFreq+0xc8>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	220f      	movs	r2, #15
 80022ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	fa92 f2a2 	rbit	r2, r2
 80022b4:	60fa      	str	r2, [r7, #12]
  return result;
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	40d3      	lsrs	r3, r2
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
 80022e0:	e004      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	623b      	str	r3, [r7, #32]
      break;
 80022f0:	e002      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f4:	623b      	str	r3, [r7, #32]
      break;
 80022f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f8:	6a3b      	ldr	r3, [r7, #32]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	372c      	adds	r7, #44	; 0x2c
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	08003870 	.word	0x08003870
 8002314:	08003880 	.word	0x08003880
 8002318:	003d0900 	.word	0x003d0900

0800231c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b092      	sub	sp, #72	; 0x48
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80d4 	beq.w	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002340:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10e      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b48      	ldr	r3, [pc, #288]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b45      	ldr	r3, [pc, #276]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7fe f9e9 	bl	8000758 <HAL_GetTick>
 8002386:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7fe f9e5 	bl	8000758 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e169      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b38      	ldr	r3, [pc, #224]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8084 	beq.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d07c      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	2301      	movs	r3, #1
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	461a      	mov	r2, r3
 8002416:	2300      	movs	r3, #0
 8002418:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800241a:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04b      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe f995 	bl	8000758 <HAL_GetTick>
 800242e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe f991 	bl	8000758 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e113      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002448:	2302      	movs	r3, #2
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	61fb      	str	r3, [r7, #28]
  return result;
 8002460:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d108      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002476:	4b01      	ldr	r3, [pc, #4]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	e00d      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
 8002484:	10908100 	.word	0x10908100
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	4b78      	ldr	r3, [pc, #480]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2202      	movs	r2, #2
 800249a:	613a      	str	r2, [r7, #16]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	fa92 f2a2 	rbit	r2, r2
 80024a2:	60fa      	str	r2, [r7, #12]
  return result;
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0b7      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024c2:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	496a      	ldr	r1, [pc, #424]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f4:	4b60      	ldr	r3, [pc, #384]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f023 0203 	bic.w	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	495d      	ldr	r1, [pc, #372]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002512:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4956      	ldr	r1, [pc, #344]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002530:	4b51      	ldr	r3, [pc, #324]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	494e      	ldr	r1, [pc, #312]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800254e:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f023 0210 	bic.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4947      	ldr	r1, [pc, #284]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	493f      	ldr	r1, [pc, #252]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f023 0220 	bic.w	r2, r3, #32
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4938      	ldr	r1, [pc, #224]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a8:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	4930      	ldr	r1, [pc, #192]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4929      	ldr	r1, [pc, #164]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4921      	ldr	r1, [pc, #132]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	491a      	ldr	r1, [pc, #104]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002620:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	4912      	ldr	r1, [pc, #72]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	490b      	ldr	r1, [pc, #44]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800266a:	4313      	orrs	r3, r2
 800266c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3748      	adds	r7, #72	; 0x48
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e049      	b.n	8002722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fd ff0c 	bl	80004c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fb74 	bl	8002da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e049      	b.n	80027d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f841 	bl	80027d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f000 fb1d 	bl	8002da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_TIM_PWM_Start+0x24>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e03c      	b.n	800288a <HAL_TIM_PWM_Start+0x9e>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d109      	bne.n	800282a <HAL_TIM_PWM_Start+0x3e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	e02f      	b.n	800288a <HAL_TIM_PWM_Start+0x9e>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d109      	bne.n	8002844 <HAL_TIM_PWM_Start+0x58>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	bf14      	ite	ne
 800283c:	2301      	movne	r3, #1
 800283e:	2300      	moveq	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e022      	b.n	800288a <HAL_TIM_PWM_Start+0x9e>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d109      	bne.n	800285e <HAL_TIM_PWM_Start+0x72>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e015      	b.n	800288a <HAL_TIM_PWM_Start+0x9e>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b10      	cmp	r3, #16
 8002862:	d109      	bne.n	8002878 <HAL_TIM_PWM_Start+0x8c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e008      	b.n	800288a <HAL_TIM_PWM_Start+0x9e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e097      	b.n	80029c2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start+0xb6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a0:	e023      	b.n	80028ea <HAL_TIM_PWM_Start+0xfe>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start+0xc6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	e01b      	b.n	80028ea <HAL_TIM_PWM_Start+0xfe>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0xd6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c0:	e013      	b.n	80028ea <HAL_TIM_PWM_Start+0xfe>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0xe6>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028d0:	e00b      	b.n	80028ea <HAL_TIM_PWM_Start+0xfe>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_PWM_Start+0xf6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e0:	e003      	b.n	80028ea <HAL_TIM_PWM_Start+0xfe>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2201      	movs	r2, #1
 80028f0:	6839      	ldr	r1, [r7, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fe58 	bl	80035a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a33      	ldr	r2, [pc, #204]	; (80029cc <HAL_TIM_PWM_Start+0x1e0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_TIM_PWM_Start+0x13e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a32      	ldr	r2, [pc, #200]	; (80029d0 <HAL_TIM_PWM_Start+0x1e4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00e      	beq.n	800292a <HAL_TIM_PWM_Start+0x13e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a30      	ldr	r2, [pc, #192]	; (80029d4 <HAL_TIM_PWM_Start+0x1e8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_TIM_PWM_Start+0x13e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <HAL_TIM_PWM_Start+0x1ec>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_TIM_PWM_Start+0x13e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2d      	ldr	r2, [pc, #180]	; (80029dc <HAL_TIM_PWM_Start+0x1f0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_TIM_PWM_Start+0x142>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_TIM_PWM_Start+0x144>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_TIM_PWM_Start+0x1e0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_TIM_PWM_Start+0x194>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002956:	d013      	beq.n	8002980 <HAL_TIM_PWM_Start+0x194>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <HAL_TIM_PWM_Start+0x1f4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_TIM_PWM_Start+0x194>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_TIM_PWM_Start+0x1f8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_TIM_PWM_Start+0x194>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_TIM_PWM_Start+0x1e4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_PWM_Start+0x194>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIM_PWM_Start+0x1e8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d115      	bne.n	80029ac <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_TIM_PWM_Start+0x1fc>)
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d015      	beq.n	80029be <HAL_TIM_PWM_Start+0x1d2>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d011      	beq.n	80029be <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	e008      	b.n	80029be <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e000      	b.n	80029c0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40013400 	.word	0x40013400
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	00010007 	.word	0x00010007

080029ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0ff      	b.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b14      	cmp	r3, #20
 8002a16:	f200 80f0 	bhi.w	8002bfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a75 	.word	0x08002a75
 8002a24:	08002bfb 	.word	0x08002bfb
 8002a28:	08002bfb 	.word	0x08002bfb
 8002a2c:	08002bfb 	.word	0x08002bfb
 8002a30:	08002ab5 	.word	0x08002ab5
 8002a34:	08002bfb 	.word	0x08002bfb
 8002a38:	08002bfb 	.word	0x08002bfb
 8002a3c:	08002bfb 	.word	0x08002bfb
 8002a40:	08002af7 	.word	0x08002af7
 8002a44:	08002bfb 	.word	0x08002bfb
 8002a48:	08002bfb 	.word	0x08002bfb
 8002a4c:	08002bfb 	.word	0x08002bfb
 8002a50:	08002b37 	.word	0x08002b37
 8002a54:	08002bfb 	.word	0x08002bfb
 8002a58:	08002bfb 	.word	0x08002bfb
 8002a5c:	08002bfb 	.word	0x08002bfb
 8002a60:	08002b79 	.word	0x08002b79
 8002a64:	08002bfb 	.word	0x08002bfb
 8002a68:	08002bfb 	.word	0x08002bfb
 8002a6c:	08002bfb 	.word	0x08002bfb
 8002a70:	08002bb9 	.word	0x08002bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fa24 	bl	8002ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0208 	orr.w	r2, r2, #8
 8002a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0204 	bic.w	r2, r2, #4
 8002a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6999      	ldr	r1, [r3, #24]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	619a      	str	r2, [r3, #24]
      break;
 8002ab2:	e0a5      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fa94 	bl	8002fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6999      	ldr	r1, [r3, #24]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	021a      	lsls	r2, r3, #8
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	619a      	str	r2, [r3, #24]
      break;
 8002af4:	e084      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fafd 	bl	80030fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0208 	orr.w	r2, r2, #8
 8002b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0204 	bic.w	r2, r2, #4
 8002b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69d9      	ldr	r1, [r3, #28]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	61da      	str	r2, [r3, #28]
      break;
 8002b34:	e064      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fb65 	bl	800320c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69d9      	ldr	r1, [r3, #28]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	021a      	lsls	r2, r3, #8
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	61da      	str	r2, [r3, #28]
      break;
 8002b76:	e043      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fbae 	bl	80032e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0208 	orr.w	r2, r2, #8
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0204 	bic.w	r2, r2, #4
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bb6:	e023      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fbf2 	bl	80033a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	021a      	lsls	r2, r3, #8
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bf8:	e002      	b.n	8002c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop

08002c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIM_ConfigClockSource+0x1c>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0b6      	b.n	8002d9e <HAL_TIM_ConfigClockSource+0x18a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6c:	d03e      	beq.n	8002cec <HAL_TIM_ConfigClockSource+0xd8>
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c72:	f200 8087 	bhi.w	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7a:	f000 8086 	beq.w	8002d8a <HAL_TIM_ConfigClockSource+0x176>
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c82:	d87f      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002c84:	2b70      	cmp	r3, #112	; 0x70
 8002c86:	d01a      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0xaa>
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d87b      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002c8c:	2b60      	cmp	r3, #96	; 0x60
 8002c8e:	d050      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x11e>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d877      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002c94:	2b50      	cmp	r3, #80	; 0x50
 8002c96:	d03c      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0xfe>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d873      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d058      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0x13e>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d86f      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002ca4:	2b30      	cmp	r3, #48	; 0x30
 8002ca6:	d064      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x15e>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d86b      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d060      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x15e>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d867      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05c      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x15e>
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d05a      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x15e>
 8002cbc:	e062      	b.n	8002d84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f000 fc4b 	bl	8003568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	609a      	str	r2, [r3, #8]
      break;
 8002cea:	e04f      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6899      	ldr	r1, [r3, #8]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f000 fc34 	bl	8003568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0e:	609a      	str	r2, [r3, #8]
      break;
 8002d10:	e03c      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f000 fba8 	bl	8003474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2150      	movs	r1, #80	; 0x50
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fc01 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002d30:	e02c      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f000 fbc7 	bl	80034d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2160      	movs	r1, #96	; 0x60
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fbf1 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002d50:	e01c      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f000 fb88 	bl	8003474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fbe1 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002d70:	e00c      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	f000 fbd8 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002d82:	e003      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e000      	b.n	8002d8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3c      	ldr	r2, [pc, #240]	; (8002eac <TIM_Base_SetConfig+0x104>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00f      	beq.n	8002de0 <TIM_Base_SetConfig+0x38>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc6:	d00b      	beq.n	8002de0 <TIM_Base_SetConfig+0x38>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <TIM_Base_SetConfig+0x108>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_Base_SetConfig+0x38>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a38      	ldr	r2, [pc, #224]	; (8002eb4 <TIM_Base_SetConfig+0x10c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0x38>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a37      	ldr	r2, [pc, #220]	; (8002eb8 <TIM_Base_SetConfig+0x110>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d108      	bne.n	8002df2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	; (8002eac <TIM_Base_SetConfig+0x104>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01b      	beq.n	8002e32 <TIM_Base_SetConfig+0x8a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d017      	beq.n	8002e32 <TIM_Base_SetConfig+0x8a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <TIM_Base_SetConfig+0x108>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <TIM_Base_SetConfig+0x8a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <TIM_Base_SetConfig+0x10c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00f      	beq.n	8002e32 <TIM_Base_SetConfig+0x8a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <TIM_Base_SetConfig+0x110>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00b      	beq.n	8002e32 <TIM_Base_SetConfig+0x8a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <TIM_Base_SetConfig+0x114>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <TIM_Base_SetConfig+0x8a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <TIM_Base_SetConfig+0x118>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_Base_SetConfig+0x8a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <TIM_Base_SetConfig+0x11c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d108      	bne.n	8002e44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <TIM_Base_SetConfig+0x104>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00f      	beq.n	8002e90 <TIM_Base_SetConfig+0xe8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <TIM_Base_SetConfig+0x110>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <TIM_Base_SetConfig+0xe8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <TIM_Base_SetConfig+0x114>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <TIM_Base_SetConfig+0xe8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <TIM_Base_SetConfig+0x118>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0xe8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <TIM_Base_SetConfig+0x11c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40013400 	.word	0x40013400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 0302 	bic.w	r3, r3, #2
 8002f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <TIM_OC1_SetConfig+0x10c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00f      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <TIM_OC1_SetConfig+0x110>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <TIM_OC1_SetConfig+0x114>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d007      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <TIM_OC1_SetConfig+0x118>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_OC1_SetConfig+0x80>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_OC1_SetConfig+0x11c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f023 0308 	bic.w	r3, r3, #8
 8002f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <TIM_OC1_SetConfig+0x10c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00f      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <TIM_OC1_SetConfig+0x110>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <TIM_OC1_SetConfig+0x114>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <TIM_OC1_SetConfig+0x118>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_OC1_SetConfig+0xc2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <TIM_OC1_SetConfig+0x11c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	621a      	str	r2, [r3, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40013400 	.word	0x40013400
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0320 	bic.w	r3, r3, #32
 8003036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a28      	ldr	r2, [pc, #160]	; (80030e8 <TIM_OC2_SetConfig+0x100>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_OC2_SetConfig+0x6c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a27      	ldr	r2, [pc, #156]	; (80030ec <TIM_OC2_SetConfig+0x104>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10d      	bne.n	8003070 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <TIM_OC2_SetConfig+0x100>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00f      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <TIM_OC2_SetConfig+0x104>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00b      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <TIM_OC2_SetConfig+0x108>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <TIM_OC2_SetConfig+0x10c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_OC2_SetConfig+0xb0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <TIM_OC2_SetConfig+0x110>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d113      	bne.n	80030c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800309e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40013400 	.word	0x40013400
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800

080030fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <TIM_OC3_SetConfig+0xfc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_OC3_SetConfig+0x6a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a26      	ldr	r2, [pc, #152]	; (80031fc <TIM_OC3_SetConfig+0x100>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10d      	bne.n	8003182 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800316c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003180:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <TIM_OC3_SetConfig+0xfc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00f      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <TIM_OC3_SetConfig+0x100>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00b      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <TIM_OC3_SetConfig+0x104>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <TIM_OC3_SetConfig+0x108>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d003      	beq.n	80031aa <TIM_OC3_SetConfig+0xae>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <TIM_OC3_SetConfig+0x10c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40013400 	.word	0x40013400
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800

0800320c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800323a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800325a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	031b      	lsls	r3, r3, #12
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a18      	ldr	r2, [pc, #96]	; (80032cc <TIM_OC4_SetConfig+0xc0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00f      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <TIM_OC4_SetConfig+0xc4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <TIM_OC4_SetConfig+0xc8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <TIM_OC4_SetConfig+0xcc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC4_SetConfig+0x84>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <TIM_OC4_SetConfig+0xd0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40013400 	.word	0x40013400
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40014400 	.word	0x40014400
 80032dc:	40014800 	.word	0x40014800

080032e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <TIM_OC5_SetConfig+0xb4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a16      	ldr	r2, [pc, #88]	; (8003398 <TIM_OC5_SetConfig+0xb8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <TIM_OC5_SetConfig+0xbc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <TIM_OC5_SetConfig+0xc0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_OC5_SetConfig+0x7a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <TIM_OC5_SetConfig+0xc4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d109      	bne.n	800336e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	051b      	lsls	r3, r3, #20
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <TIM_OC6_SetConfig+0xb8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00f      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <TIM_OC6_SetConfig+0xbc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00b      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <TIM_OC6_SetConfig+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a15      	ldr	r2, [pc, #84]	; (800346c <TIM_OC6_SetConfig+0xc4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_OC6_SetConfig+0x7c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a14      	ldr	r2, [pc, #80]	; (8003470 <TIM_OC6_SetConfig+0xc8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d109      	bne.n	8003438 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40013400 	.word	0x40013400
 8003468:	40014000 	.word	0x40014000
 800346c:	40014400 	.word	0x40014400
 8003470:	40014800 	.word	0x40014800

08003474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f023 0201 	bic.w	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800349e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f023 030a 	bic.w	r3, r3, #10
 80034b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0210 	bic.w	r2, r3, #16
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800350e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	f043 0307 	orr.w	r3, r3, #7
 8003554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	021a      	lsls	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	431a      	orrs	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e063      	b.n	80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d108      	bne.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d013      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10c      	bne.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40013400 	.word	0x40013400
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40014000 	.word	0x40014000

080036f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800370c:	2302      	movs	r3, #2
 800370e:	e065      	b.n	80037dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d115      	bne.n	80037ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	051b      	lsls	r3, r3, #20
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40013400 	.word	0x40013400

080037f0 <__libc_init_array>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	4d0d      	ldr	r5, [pc, #52]	; (8003828 <__libc_init_array+0x38>)
 80037f4:	4c0d      	ldr	r4, [pc, #52]	; (800382c <__libc_init_array+0x3c>)
 80037f6:	1b64      	subs	r4, r4, r5
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	2600      	movs	r6, #0
 80037fc:	42a6      	cmp	r6, r4
 80037fe:	d109      	bne.n	8003814 <__libc_init_array+0x24>
 8003800:	4d0b      	ldr	r5, [pc, #44]	; (8003830 <__libc_init_array+0x40>)
 8003802:	4c0c      	ldr	r4, [pc, #48]	; (8003834 <__libc_init_array+0x44>)
 8003804:	f000 f820 	bl	8003848 <_init>
 8003808:	1b64      	subs	r4, r4, r5
 800380a:	10a4      	asrs	r4, r4, #2
 800380c:	2600      	movs	r6, #0
 800380e:	42a6      	cmp	r6, r4
 8003810:	d105      	bne.n	800381e <__libc_init_array+0x2e>
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	f855 3b04 	ldr.w	r3, [r5], #4
 8003818:	4798      	blx	r3
 800381a:	3601      	adds	r6, #1
 800381c:	e7ee      	b.n	80037fc <__libc_init_array+0xc>
 800381e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003822:	4798      	blx	r3
 8003824:	3601      	adds	r6, #1
 8003826:	e7f2      	b.n	800380e <__libc_init_array+0x1e>
 8003828:	08003890 	.word	0x08003890
 800382c:	08003890 	.word	0x08003890
 8003830:	08003890 	.word	0x08003890
 8003834:	08003894 	.word	0x08003894

08003838 <memset>:
 8003838:	4402      	add	r2, r0
 800383a:	4603      	mov	r3, r0
 800383c:	4293      	cmp	r3, r2
 800383e:	d100      	bne.n	8003842 <memset+0xa>
 8003840:	4770      	bx	lr
 8003842:	f803 1b01 	strb.w	r1, [r3], #1
 8003846:	e7f9      	b.n	800383c <memset+0x4>

08003848 <_init>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	bf00      	nop
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr

08003854 <_fini>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr
