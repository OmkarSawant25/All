
TimerChannel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003088  08003088  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003088  08003088  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000973c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000167b  00000000  00000000  00029778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d8  00000000  00000000  0002b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c671  00000000  00000000  0002c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6e6  00000000  00000000  000486d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae328  00000000  00000000  00053db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001020df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002788  00000000  00000000  00102130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003040 	.word	0x08003040

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003040 	.word	0x08003040

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa16 	bl	80005fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f814 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f912 	bl	80003fc <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f868 	bl	80002ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80001dc:	2100      	movs	r1, #0
 80001de:	4806      	ldr	r0, [pc, #24]	; (80001f8 <main+0x30>)
 80001e0:	f002 f8fe 	bl	80023e0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 80001e4:	2104      	movs	r1, #4
 80001e6:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x30>)
 80001e8:	f002 f8fa 	bl	80023e0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 80001ec:	2108      	movs	r1, #8
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x30>)
 80001f0:	f002 f8f6 	bl	80023e0 <HAL_TIM_OC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f4:	e7fe      	b.n	80001f4 <main+0x2c>
 80001f6:	bf00      	nop
 80001f8:	20000028 	.word	0x20000028

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b09e      	sub	sp, #120	; 0x78
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 ff10 	bl	8003030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	223c      	movs	r2, #60	; 0x3c
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 ff02 	bl	8003030 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022c:	2302      	movs	r3, #2
 800022e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000234:	2310      	movs	r3, #16
 8000236:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023c:	2300      	movs	r3, #0
 800023e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000244:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fc9c 	bl	8000b88 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000256:	f000 f8e9 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025e:	2302      	movs	r3, #2
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fcc4 	bl	8001c04 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000282:	f000 f8d3 	bl	800042c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800028c:	2300      	movs	r3, #0
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fe9c 	bl	8001fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800029e:	f000 f8c5 	bl	800042c <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3778      	adds	r7, #120	; 0x78
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b096      	sub	sp, #88	; 0x58
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]
 80002ce:	615a      	str	r2, [r3, #20]
 80002d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	222c      	movs	r2, #44	; 0x2c
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fea9 	bl	8003030 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002de:	4b45      	ldr	r3, [pc, #276]	; (80003f4 <MX_TIM1_Init+0x148>)
 80002e0:	4a45      	ldr	r2, [pc, #276]	; (80003f8 <MX_TIM1_Init+0x14c>)
 80002e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 80002e4:	4b43      	ldr	r3, [pc, #268]	; (80003f4 <MX_TIM1_Init+0x148>)
 80002e6:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80002ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ec:	4b41      	ldr	r3, [pc, #260]	; (80003f4 <MX_TIM1_Init+0x148>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002f2:	4b40      	ldr	r3, [pc, #256]	; (80003f4 <MX_TIM1_Init+0x148>)
 80002f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fa:	4b3e      	ldr	r3, [pc, #248]	; (80003f4 <MX_TIM1_Init+0x148>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000300:	4b3c      	ldr	r3, [pc, #240]	; (80003f4 <MX_TIM1_Init+0x148>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000306:	4b3b      	ldr	r3, [pc, #236]	; (80003f4 <MX_TIM1_Init+0x148>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800030c:	4839      	ldr	r0, [pc, #228]	; (80003f4 <MX_TIM1_Init+0x148>)
 800030e:	f002 f80f 	bl	8002330 <HAL_TIM_OC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000318:	f000 f888 	bl	800042c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000328:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800032c:	4619      	mov	r1, r3
 800032e:	4831      	ldr	r0, [pc, #196]	; (80003f4 <MX_TIM1_Init+0x148>)
 8000330:	f002 fd5c 	bl	8002dec <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800033a:	f000 f877 	bl	800042c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800033e:	2300      	movs	r3, #0
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000346:	2300      	movs	r3, #0
 8000348:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800034a:	2300      	movs	r3, #0
 800034c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000356:	2300      	movs	r3, #0
 8000358:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800035a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800035e:	2200      	movs	r2, #0
 8000360:	4619      	mov	r1, r3
 8000362:	4824      	ldr	r0, [pc, #144]	; (80003f4 <MX_TIM1_Init+0x148>)
 8000364:	f002 f93c 	bl	80025e0 <HAL_TIM_OC_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800036e:	f000 f85d 	bl	800042c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000376:	2204      	movs	r2, #4
 8000378:	4619      	mov	r1, r3
 800037a:	481e      	ldr	r0, [pc, #120]	; (80003f4 <MX_TIM1_Init+0x148>)
 800037c:	f002 f930 	bl	80025e0 <HAL_TIM_OC_ConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000386:	f000 f851 	bl	800042c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800038a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800038e:	2208      	movs	r2, #8
 8000390:	4619      	mov	r1, r3
 8000392:	4818      	ldr	r0, [pc, #96]	; (80003f4 <MX_TIM1_Init+0x148>)
 8000394:	f002 f924 	bl	80025e0 <HAL_TIM_OC_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800039e:	f000 f845 	bl	800042c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4619      	mov	r1, r3
 80003d6:	4807      	ldr	r0, [pc, #28]	; (80003f4 <MX_TIM1_Init+0x148>)
 80003d8:	f002 fd88 	bl	8002eec <HAL_TIMEx_ConfigBreakDeadTime>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80003e2:	f000 f823 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003e6:	4803      	ldr	r0, [pc, #12]	; (80003f4 <MX_TIM1_Init+0x148>)
 80003e8:	f000 f86a 	bl	80004c0 <HAL_TIM_MspPostInit>

}
 80003ec:	bf00      	nop
 80003ee:	3758      	adds	r7, #88	; 0x58
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40012c00 	.word	0x40012c00

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a08      	ldr	r2, [pc, #32]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_GPIO_Init+0x2c>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>
	...

08000438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <HAL_MspInit+0x44>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <HAL_MspInit+0x44>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <HAL_MspInit+0x44>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <HAL_MspInit+0x44>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a08      	ldr	r2, [pc, #32]	; (800047c <HAL_MspInit+0x44>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_MspInit+0x44>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800046e:	2007      	movs	r0, #7
 8000470:	f000 f9dc 	bl	800082c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <HAL_TIM_OC_MspInit+0x38>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d10b      	bne.n	80004aa <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_TIM_OC_MspInit+0x3c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a09      	ldr	r2, [pc, #36]	; (80004bc <HAL_TIM_OC_MspInit+0x3c>)
 8000498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <HAL_TIM_OC_MspInit+0x3c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40012c00 	.word	0x40012c00
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <HAL_TIM_MspPostInit+0x64>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d11c      	bne.n	800051c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <HAL_TIM_MspPostInit+0x68>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a10      	ldr	r2, [pc, #64]	; (8000528 <HAL_TIM_MspPostInit+0x68>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_TIM_MspPostInit+0x68>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80004fa:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80004fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800050c:	2302      	movs	r3, #2
 800050e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <HAL_TIM_MspPostInit+0x6c>)
 8000518:	f000 f9bc 	bl	8000894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40012c00 	.word	0x40012c00
 8000528:	40021000 	.word	0x40021000
 800052c:	48001000 	.word	0x48001000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f884 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <SystemInit+0x20>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <SystemInit+0x20>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ac:	f7ff ffea 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	; (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d6:	f002 fd07 	bl	8002fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005da:	f7ff fdf5 	bl	80001c8 <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ec:	08003090 	.word	0x08003090
  ldr r2, =_sbss
 80005f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f4:	20000078 	.word	0x20000078

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>
	...

080005fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_Init+0x28>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_Init+0x28>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f90d 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f808 	bl	8000628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000618:	f7ff ff0e 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40022000 	.word	0x40022000

08000628 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x54>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_InitTick+0x58>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f917 	bl	800087a <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e00e      	b.n	8000674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d80a      	bhi.n	8000672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f000 f8ed 	bl	8000842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_InitTick+0x5c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x20>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_IncTick+0x24>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_IncTick+0x24>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000074 	.word	0x20000074

080006b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_GetTick+0x14>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000074 	.word	0x20000074

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f8:	d301      	bcc.n	80007fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00f      	b.n	800081e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <SysTick_Config+0x40>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000806:	210f      	movs	r1, #15
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f7ff ff8e 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SysTick_Config+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <SysTick_Config+0x40>)
 8000818:	2207      	movs	r2, #7
 800081a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff47 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000854:	f7ff ff5c 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff8e 	bl	8000780 <NVIC_EncodePriority>
 8000864:	4602      	mov	r2, r0
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff5d 	bl	800072c <__NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffb0 	bl	80007e8 <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a2:	e154      	b.n	8000b4e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 8146 	beq.w	8000b48 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 0303 	and.w	r3, r3, #3
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d005      	beq.n	80008d4 <HAL_GPIO_Init+0x40>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 0303 	and.w	r3, r3, #3
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d130      	bne.n	8000936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090a:	2201      	movs	r2, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	091b      	lsrs	r3, r3, #4
 8000920:	f003 0201 	and.w	r2, r3, #1
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	2b03      	cmp	r3, #3
 8000940:	d017      	beq.n	8000972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b02      	cmp	r3, #2
 800097c:	d123      	bne.n	80009c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	08da      	lsrs	r2, r3, #3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3208      	adds	r2, #8
 8000986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	691a      	ldr	r2, [r3, #16]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	6939      	ldr	r1, [r7, #16]
 80009c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0203 	and.w	r2, r3, #3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 80a0 	beq.w	8000b48 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	4b58      	ldr	r3, [pc, #352]	; (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a57      	ldr	r2, [pc, #348]	; (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b55      	ldr	r3, [pc, #340]	; (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a20:	4a53      	ldr	r2, [pc, #332]	; (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a4a:	d019      	beq.n	8000a80 <HAL_GPIO_Init+0x1ec>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a49      	ldr	r2, [pc, #292]	; (8000b74 <HAL_GPIO_Init+0x2e0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d013      	beq.n	8000a7c <HAL_GPIO_Init+0x1e8>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a48      	ldr	r2, [pc, #288]	; (8000b78 <HAL_GPIO_Init+0x2e4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d00d      	beq.n	8000a78 <HAL_GPIO_Init+0x1e4>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a47      	ldr	r2, [pc, #284]	; (8000b7c <HAL_GPIO_Init+0x2e8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d007      	beq.n	8000a74 <HAL_GPIO_Init+0x1e0>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a46      	ldr	r2, [pc, #280]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d101      	bne.n	8000a70 <HAL_GPIO_Init+0x1dc>
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	e008      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a70:	2305      	movs	r3, #5
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a74:	2303      	movs	r3, #3
 8000a76:	e004      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a78:	2302      	movs	r3, #2
 8000a7a:	e002      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a80:	2300      	movs	r3, #0
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	f002 0203 	and.w	r2, r2, #3
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a92:	4937      	ldr	r1, [pc, #220]	; (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aee:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	fa22 f303 	lsr.w	r3, r2, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f47f aea3 	bne.w	80008a4 <HAL_GPIO_Init+0x10>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	48000c00 	.word	0x48000c00
 8000b80:	48001000 	.word	0x48001000
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f001 b823 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 817d 	beq.w	8000ebe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bc4:	4bbc      	ldr	r3, [pc, #752]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 030c 	and.w	r3, r3, #12
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d00c      	beq.n	8000bea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd0:	4bb9      	ldr	r3, [pc, #740]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 030c 	and.w	r3, r3, #12
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d15c      	bne.n	8000c96 <HAL_RCC_OscConfig+0x10e>
 8000bdc:	4bb6      	ldr	r3, [pc, #728]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be8:	d155      	bne.n	8000c96 <HAL_RCC_OscConfig+0x10e>
 8000bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000bf6:	fa93 f3a3 	rbit	r3, r3
 8000bfa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	fab3 f383 	clz	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	095b      	lsrs	r3, r3, #5
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d102      	bne.n	8000c1c <HAL_RCC_OscConfig+0x94>
 8000c16:	4ba8      	ldr	r3, [pc, #672]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	e015      	b.n	8000c48 <HAL_RCC_OscConfig+0xc0>
 8000c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c28:	fa93 f3a3 	rbit	r3, r3
 8000c2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c44:	4b9c      	ldr	r3, [pc, #624]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c54:	fa92 f2a2 	rbit	r2, r2
 8000c58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	f002 021f 	and.w	r2, r2, #31
 8000c70:	2101      	movs	r1, #1
 8000c72:	fa01 f202 	lsl.w	r2, r1, r2
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 811f 	beq.w	8000ebc <HAL_RCC_OscConfig+0x334>
 8000c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 8116 	bne.w	8000ebc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f000 bfaf 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca6:	d106      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x12e>
 8000ca8:	4b83      	ldr	r3, [pc, #524]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a82      	ldr	r2, [pc, #520]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e036      	b.n	8000d24 <HAL_RCC_OscConfig+0x19c>
 8000cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x158>
 8000cc6:	4b7c      	ldr	r3, [pc, #496]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a7b      	ldr	r2, [pc, #492]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b79      	ldr	r3, [pc, #484]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a78      	ldr	r2, [pc, #480]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e021      	b.n	8000d24 <HAL_RCC_OscConfig+0x19c>
 8000ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x184>
 8000cf2:	4b71      	ldr	r3, [pc, #452]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a70      	ldr	r2, [pc, #448]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a6d      	ldr	r2, [pc, #436]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e00b      	b.n	8000d24 <HAL_RCC_OscConfig+0x19c>
 8000d0c:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a69      	ldr	r2, [pc, #420]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a66      	ldr	r2, [pc, #408]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d24:	4b64      	ldr	r3, [pc, #400]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	f023 020f 	bic.w	r2, r3, #15
 8000d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	495f      	ldr	r1, [pc, #380]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d059      	beq.n	8000e02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fcaf 	bl	80006b0 <HAL_GetTick>
 8000d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	e00a      	b.n	8000d6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fcaa 	bl	80006b0 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b64      	cmp	r3, #100	; 0x64
 8000d66:	d902      	bls.n	8000d6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	f000 bf43 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
 8000d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	fab3 f383 	clz	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	095b      	lsrs	r3, r3, #5
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d102      	bne.n	8000da0 <HAL_RCC_OscConfig+0x218>
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	e015      	b.n	8000dcc <HAL_RCC_OscConfig+0x244>
 8000da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dac:	fa93 f3a3 	rbit	r3, r3
 8000db0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000dd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dd8:	fa92 f2a2 	rbit	r2, r2
 8000ddc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000de0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	f042 0220 	orr.w	r2, r2, #32
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	f002 021f 	and.w	r2, r2, #31
 8000df4:	2101      	movs	r1, #1
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0ab      	beq.n	8000d58 <HAL_RCC_OscConfig+0x1d0>
 8000e00:	e05d      	b.n	8000ebe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fc55 	bl	80006b0 <HAL_GetTick>
 8000e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	e00a      	b.n	8000e22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fc50 	bl	80006b0 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b64      	cmp	r3, #100	; 0x64
 8000e1a:	d902      	bls.n	8000e22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f000 bee9 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
 8000e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x2cc>
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	e015      	b.n	8000e80 <HAL_RCC_OscConfig+0x2f8>
 8000e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e60:	fa93 f3a3 	rbit	r3, r3
 8000e64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_RCC_OscConfig+0x330>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e84:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e8c:	fa92 f2a2 	rbit	r2, r2
 8000e90:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e98:	fab2 f282 	clz	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f042 0220 	orr.w	r2, r2, #32
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	f002 021f 	and.w	r2, r2, #31
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1ab      	bne.n	8000e0c <HAL_RCC_OscConfig+0x284>
 8000eb4:	e003      	b.n	8000ebe <HAL_RCC_OscConfig+0x336>
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 817d 	beq.w	80011ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ed4:	4ba6      	ldr	r3, [pc, #664]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00b      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ee0:	4ba3      	ldr	r3, [pc, #652]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d172      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x44a>
 8000eec:	4ba0      	ldr	r3, [pc, #640]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d16c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x44a>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	095b      	lsrs	r3, r3, #5
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d102      	bne.n	8000f28 <HAL_RCC_OscConfig+0x3a0>
 8000f22:	4b93      	ldr	r3, [pc, #588]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	e013      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c8>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f4c:	4b88      	ldr	r3, [pc, #544]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	2202      	movs	r2, #2
 8000f52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f5a:	fa92 f2a2 	rbit	r2, r2
 8000f5e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f62:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f66:	fab2 f282 	clz	r2, r2
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	f042 0220 	orr.w	r2, r2, #32
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	f002 021f 	and.w	r2, r2, #31
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <HAL_RCC_OscConfig+0x410>
 8000f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d002      	beq.n	8000f98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f000 be2e 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b75      	ldr	r3, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	21f8      	movs	r1, #248	; 0xf8
 8000fae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fb6:	fa91 f1a1 	rbit	r1, r1
 8000fba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000fbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fc2:	fab1 f181 	clz	r1, r1
 8000fc6:	b2c9      	uxtb	r1, r1
 8000fc8:	408b      	lsls	r3, r1
 8000fca:	4969      	ldr	r1, [pc, #420]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd0:	e0fd      	b.n	80011ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 8088 	beq.w	80010f4 <HAL_RCC_OscConfig+0x56c>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000ff6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	461a      	mov	r2, r3
 800100c:	2301      	movs	r3, #1
 800100e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fb4e 	bl	80006b0 <HAL_GetTick>
 8001014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fb49 	bl	80006b0 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d902      	bls.n	8001030 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	f000 bde2 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001042:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d102      	bne.n	8001060 <HAL_RCC_OscConfig+0x4d8>
 800105a:	4b45      	ldr	r3, [pc, #276]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	e013      	b.n	8001088 <HAL_RCC_OscConfig+0x500>
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001078:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	2202      	movs	r2, #2
 800108a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800108e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001092:	fa92 f2a2 	rbit	r2, r2
 8001096:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800109a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800109e:	fab2 f282 	clz	r2, r2
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	f042 0220 	orr.w	r2, r2, #32
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	f002 021f 	and.w	r2, r2, #31
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0af      	beq.n	800101a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	21f8      	movs	r1, #248	; 0xf8
 80010d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010d8:	fa91 f1a1 	rbit	r1, r1
 80010dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010e4:	fab1 f181 	clz	r1, r1
 80010e8:	b2c9      	uxtb	r1, r1
 80010ea:	408b      	lsls	r3, r1
 80010ec:	4920      	ldr	r1, [pc, #128]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
 80010f2:	e06c      	b.n	80011ce <HAL_RCC_OscConfig+0x646>
 80010f4:	2301      	movs	r3, #1
 80010f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001106:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110a:	fab3 f383 	clz	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	461a      	mov	r2, r3
 800111c:	2300      	movs	r3, #0
 800111e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fac6 	bl	80006b0 <HAL_GetTick>
 8001124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fac1 	bl	80006b0 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d902      	bls.n	8001140 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	f000 bd5a 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	095b      	lsrs	r3, r3, #5
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d104      	bne.n	8001174 <HAL_RCC_OscConfig+0x5ec>
 800116a:	4b01      	ldr	r3, [pc, #4]	; (8001170 <HAL_RCC_OscConfig+0x5e8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	e015      	b.n	800119c <HAL_RCC_OscConfig+0x614>
 8001170:	40021000 	.word	0x40021000
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800117e:	fa93 f3a3 	rbit	r3, r3
 8001182:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800118c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001190:	fa93 f3a3 	rbit	r3, r3
 8001194:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001198:	4bc8      	ldr	r3, [pc, #800]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	2202      	movs	r2, #2
 800119e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011a6:	fa92 f2a2 	rbit	r2, r2
 80011aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011b2:	fab2 f282 	clz	r2, r2
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f042 0220 	orr.w	r2, r2, #32
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	f002 021f 	and.w	r2, r2, #31
 80011c2:	2101      	movs	r1, #1
 80011c4:	fa01 f202 	lsl.w	r2, r1, r2
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ad      	bne.n	800112a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8110 	beq.w	8001404 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d079      	beq.n	80012e8 <HAL_RCC_OscConfig+0x760>
 80011f4:	2301      	movs	r3, #1
 80011f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	fab3 f383 	clz	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	4bab      	ldr	r3, [pc, #684]	; (80014c0 <HAL_RCC_OscConfig+0x938>)
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	461a      	mov	r2, r3
 800121a:	2301      	movs	r3, #1
 800121c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fa47 	bl	80006b0 <HAL_GetTick>
 8001222:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e00a      	b.n	800123e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fa42 	bl	80006b0 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d902      	bls.n	800123e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	f000 bcdb 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001254:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001260:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	fa93 f2a3 	rbit	r2, r3
 800126a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800127c:	2202      	movs	r2, #2
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	fa93 f2a3 	rbit	r2, r3
 800128e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001292:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001296:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001298:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 800129a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012a4:	2102      	movs	r1, #2
 80012a6:	6019      	str	r1, [r3, #0]
 80012a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f1a3 	rbit	r1, r3
 80012b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012be:	6019      	str	r1, [r3, #0]
  return result;
 80012c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0a0      	beq.n	8001228 <HAL_RCC_OscConfig+0x6a0>
 80012e6:	e08d      	b.n	8001404 <HAL_RCC_OscConfig+0x87c>
 80012e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001306:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800130a:	601a      	str	r2, [r3, #0]
  return result;
 800130c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001310:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001314:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x938>)
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	461a      	mov	r2, r3
 8001326:	2300      	movs	r3, #0
 8001328:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff f9c1 	bl	80006b0 <HAL_GetTick>
 800132e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	e00a      	b.n	800134a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff f9bc 	bl	80006b0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d902      	bls.n	800134a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	f000 bc55 	b.w	8001bf4 <HAL_RCC_OscConfig+0x106c>
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	fa93 f2a3 	rbit	r2, r3
 8001364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001368:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001376:	2202      	movs	r2, #2
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	fa93 f2a3 	rbit	r2, r3
 8001388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800139a:	2202      	movs	r2, #2
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	fa93 f2a3 	rbit	r2, r3
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 80013b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013c2:	2102      	movs	r1, #2
 80013c4:	6019      	str	r1, [r3, #0]
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	fa93 f1a3 	rbit	r1, r3
 80013d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013dc:	6019      	str	r1, [r3, #0]
  return result;
 80013de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d197      	bne.n	8001334 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 81a1 	beq.w	800175c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d116      	bne.n	800145a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 8001432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001436:	61d3      	str	r3, [r2, #28]
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001452:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001454:	2301      	movs	r3, #1
 8001456:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_RCC_OscConfig+0x93c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d11a      	bne.n	800149c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_RCC_OscConfig+0x93c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <HAL_RCC_OscConfig+0x93c>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001472:	f7ff f91d 	bl	80006b0 <HAL_GetTick>
 8001476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	e009      	b.n	8001490 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147c:	f7ff f918 	bl	80006b0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b64      	cmp	r3, #100	; 0x64
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e3b1      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_RCC_OscConfig+0x93c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ef      	beq.n	800147c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10d      	bne.n	80014c8 <HAL_RCC_OscConfig+0x940>
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a02      	ldr	r2, [pc, #8]	; (80014bc <HAL_RCC_OscConfig+0x934>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e03c      	b.n	8001534 <HAL_RCC_OscConfig+0x9ac>
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	10908120 	.word	0x10908120
 80014c4:	40007000 	.word	0x40007000
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10c      	bne.n	80014f2 <HAL_RCC_OscConfig+0x96a>
 80014d8:	4bc1      	ldr	r3, [pc, #772]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4ac0      	ldr	r2, [pc, #768]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	4bbe      	ldr	r3, [pc, #760]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4abd      	ldr	r2, [pc, #756]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80014ea:	f023 0304 	bic.w	r3, r3, #4
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	e020      	b.n	8001534 <HAL_RCC_OscConfig+0x9ac>
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x994>
 8001502:	4bb7      	ldr	r3, [pc, #732]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4ab6      	ldr	r2, [pc, #728]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	4bb4      	ldr	r3, [pc, #720]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4ab3      	ldr	r2, [pc, #716]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0x9ac>
 800151c:	4bb0      	ldr	r3, [pc, #704]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4aaf      	ldr	r2, [pc, #700]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	4bad      	ldr	r3, [pc, #692]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4aac      	ldr	r2, [pc, #688]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 800152e:	f023 0304 	bic.w	r3, r3, #4
 8001532:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8081 	beq.w	8001648 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff f8b3 	bl	80006b0 <HAL_GetTick>
 800154a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff f8ae 	bl	80006b0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e345      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fa93 f2a3 	rbit	r2, r3
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f2a3 	rbit	r2, r3
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015ae:	601a      	str	r2, [r3, #0]
  return result;
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	095b      	lsrs	r3, r3, #5
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0xa4c>
 80015ce:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	e013      	b.n	80015fc <HAL_RCC_OscConfig+0xa74>
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001600:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001604:	2102      	movs	r1, #2
 8001606:	6011      	str	r1, [r2, #0]
 8001608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800160c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	fa92 f1a2 	rbit	r1, r2
 8001616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800161a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800161e:	6011      	str	r1, [r2, #0]
  return result;
 8001620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001624:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	fab2 f282 	clz	r2, r2
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	f002 021f 	and.w	r2, r2, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d084      	beq.n	8001550 <HAL_RCC_OscConfig+0x9c8>
 8001646:	e07f      	b.n	8001748 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff f832 	bl	80006b0 <HAL_GetTick>
 800164c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff f82d 	bl	80006b0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e2c4      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016b0:	601a      	str	r2, [r3, #0]
  return result;
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0xb4e>
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	e013      	b.n	80016fe <HAL_RCC_OscConfig+0xb76>
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001702:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001706:	2102      	movs	r1, #2
 8001708:	6011      	str	r1, [r2, #0]
 800170a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800170e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	fa92 f1a2 	rbit	r1, r2
 8001718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800171c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001720:	6011      	str	r1, [r2, #0]
  return result;
 8001722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001726:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	fab2 f282 	clz	r2, r2
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f002 021f 	and.w	r2, r2, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d184      	bne.n	8001652 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001748:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8242 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_RCC_OscConfig+0xc58>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	f000 8213 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	2b02      	cmp	r3, #2
 800178a:	f040 8162 	bne.w	8001a52 <HAL_RCC_OscConfig+0xeca>
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001796:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017b2:	601a      	str	r2, [r3, #0]
  return result;
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	461a      	mov	r2, r3
 80017d0:	2300      	movs	r3, #0
 80017d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7fe ff6c 	bl	80006b0 <HAL_GetTick>
 80017d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017dc:	e00c      	b.n	80017f8 <HAL_RCC_OscConfig+0xc70>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7fe ff64 	bl	80006b0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1fd      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800181c:	601a      	str	r2, [r3, #0]
  return result;
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001826:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0xcba>
 800183c:	4bb0      	ldr	r3, [pc, #704]	; (8001b00 <HAL_RCC_OscConfig+0xf78>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e027      	b.n	8001892 <HAL_RCC_OscConfig+0xd0a>
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800184a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	4b9c      	ldr	r3, [pc, #624]	; (8001b00 <HAL_RCC_OscConfig+0xf78>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001896:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800189a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800189e:	6011      	str	r1, [r2, #0]
 80018a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	fa92 f1a2 	rbit	r1, r2
 80018ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018b6:	6011      	str	r1, [r2, #0]
  return result;
 80018b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	fab2 f282 	clz	r2, r2
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f042 0220 	orr.w	r2, r2, #32
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f002 021f 	and.w	r2, r2, #31
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d182      	bne.n	80017e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0xf78>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	430b      	orrs	r3, r1
 8001900:	497f      	ldr	r1, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0xf78>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800190e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800192a:	601a      	str	r2, [r3, #0]
  return result;
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001934:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	461a      	mov	r2, r3
 8001948:	2301      	movs	r3, #1
 800194a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7fe feb0 	bl	80006b0 <HAL_GetTick>
 8001950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	e009      	b.n	800196a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001956:	f7fe feab 	bl	80006b0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e144      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f2a3 	rbit	r2, r3
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800198e:	601a      	str	r2, [r3, #0]
  return result;
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001998:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	095b      	lsrs	r3, r3, #5
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <HAL_RCC_OscConfig+0xe2c>
 80019ae:	4b54      	ldr	r3, [pc, #336]	; (8001b00 <HAL_RCC_OscConfig+0xf78>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	e027      	b.n	8001a04 <HAL_RCC_OscConfig+0xe7c>
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_OscConfig+0xf78>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	fa92 f1a2 	rbit	r1, r2
 8001a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a28:	6011      	str	r1, [r2, #0]
  return result;
 8001a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d082      	beq.n	8001956 <HAL_RCC_OscConfig+0xdce>
 8001a50:	e0cf      	b.n	8001bf2 <HAL_RCC_OscConfig+0x106a>
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f2a3 	rbit	r2, r3
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a76:	601a      	str	r2, [r3, #0]
  return result;
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	461a      	mov	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe fe0a 	bl	80006b0 <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe fe05 	bl	80006b0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e09e      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ae4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d104      	bne.n	8001b04 <HAL_RCC_OscConfig+0xf7c>
 8001afa:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <HAL_RCC_OscConfig+0xf78>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e029      	b.n	8001b54 <HAL_RCC_OscConfig+0xfcc>
 8001b00:	40021000 	.word	0x40021000
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_RCC_OscConfig+0x1078>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b58:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b60:	6011      	str	r1, [r2, #0]
 8001b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b66:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	fa92 f1a2 	rbit	r1, r2
 8001b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b78:	6011      	str	r1, [r2, #0]
  return result;
 8001b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d180      	bne.n	8001aa2 <HAL_RCC_OscConfig+0xf1a>
 8001ba0:	e027      	b.n	8001bf2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e01e      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_OscConfig+0x1078>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bc2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09e      	sub	sp, #120	; 0x78
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e162      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b90      	ldr	r3, [pc, #576]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b8d      	ldr	r3, [pc, #564]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	498b      	ldr	r1, [pc, #556]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e14a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	497f      	ldr	r1, [pc, #508]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80dc 	beq.w	8001e30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d13c      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xf6>
 8001c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_ClockConfig+0xa6>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	e00f      	b.n	8001cca <HAL_RCC_ClockConfig+0xc6>
 8001caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	667b      	str	r3, [r7, #100]	; 0x64
 8001cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8001cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cce:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cd2:	fa92 f2a2 	rbit	r2, r2
 8001cd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cda:	fab2 f282 	clz	r2, r2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f002 021f 	and.w	r2, r2, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d17b      	bne.n	8001dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0f3      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d13c      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x178>
 8001d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x128>
 8001d26:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_ClockConfig+0x148>
 8001d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	647b      	str	r3, [r7, #68]	; 0x44
 8001d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d50:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d54:	fa92 f2a2 	rbit	r2, r2
 8001d58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d13a      	bne.n	8001dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b2      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x1a0>
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e00d      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1bc>
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	61ba      	str	r2, [r7, #24]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	617a      	str	r2, [r7, #20]
  return result;
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e079      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7fe fc56 	bl	80006b0 <HAL_GetTick>
 8001e04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7fe fc52 	bl	80006b0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e061      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d214      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4906      	ldr	r1, [pc, #24]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e040      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	491a      	ldr	r1, [pc, #104]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4912      	ldr	r1, [pc, #72]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ea6:	f000 f829 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eaa:	4601      	mov	r1, r0
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	60fa      	str	r2, [r7, #12]
  return result;
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	40d3      	lsrs	r3, r2
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x2ec>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <HAL_RCC_ClockConfig+0x2f0>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_ClockConfig+0x2f4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fba4 	bl	8000628 <HAL_InitTick>
  
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3778      	adds	r7, #120	; 0x78
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08003058 	.word	0x08003058
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b08b      	sub	sp, #44	; 0x2c
 8001f00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x30>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x36>
 8001f2a:	e03c      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	e03c      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	fa92 f2a2 	rbit	r2, r2
 8001f44:	607a      	str	r2, [r7, #4]
  return result;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	40d3      	lsrs	r3, r2
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	220f      	movs	r2, #15
 8001f60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	60fa      	str	r2, [r7, #12]
  return result;
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	fab2 f282 	clz	r2, r2
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	40d3      	lsrs	r3, r2
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f84:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	e004      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	623b      	str	r3, [r7, #32]
      break;
 8001fa4:	e002      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fa8:	623b      	str	r3, [r7, #32]
      break;
 8001faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fac:	6a3b      	ldr	r3, [r7, #32]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	372c      	adds	r7, #44	; 0x2c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	007a1200 	.word	0x007a1200
 8001fc4:	08003068 	.word	0x08003068
 8001fc8:	08003078 	.word	0x08003078
 8001fcc:	003d0900 	.word	0x003d0900

08001fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b092      	sub	sp, #72	; 0x48
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80d4 	beq.w	800219c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff4:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10e      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	61d3      	str	r3, [r2, #28]
 800200c:	4b48      	ldr	r3, [pc, #288]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202a:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a41      	ldr	r2, [pc, #260]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002036:	f7fe fb3b 	bl	80006b0 <HAL_GetTick>
 800203a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	e008      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203e:	f7fe fb37 	bl	80006b0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b64      	cmp	r3, #100	; 0x64
 800204a:	d901      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e169      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8084 	beq.w	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002078:	429a      	cmp	r2, r3
 800207a:	d07c      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800207c:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	461a      	mov	r2, r3
 80020a6:	2301      	movs	r3, #1
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04b      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe fae7 	bl	80006b0 <HAL_GetTick>
 80020e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fae3 	bl	80006b0 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e113      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	2302      	movs	r3, #2
 800210a:	623b      	str	r3, [r7, #32]
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	61fb      	str	r3, [r7, #28]
  return result;
 8002114:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d108      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800212a:	4b01      	ldr	r3, [pc, #4]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	e00d      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	10908100 	.word	0x10908100
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	4b78      	ldr	r3, [pc, #480]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2202      	movs	r2, #2
 800214e:	613a      	str	r2, [r7, #16]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	fa92 f2a2 	rbit	r2, r2
 8002156:	60fa      	str	r2, [r7, #12]
  return result;
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0b7      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002176:	4b6d      	ldr	r3, [pc, #436]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	496a      	ldr	r1, [pc, #424]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002184:	4313      	orrs	r3, r2
 8002186:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002190:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	4a65      	ldr	r2, [pc, #404]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a8:	4b60      	ldr	r3, [pc, #384]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f023 0203 	bic.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	495d      	ldr	r1, [pc, #372]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c6:	4b59      	ldr	r3, [pc, #356]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4956      	ldr	r1, [pc, #344]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e4:	4b51      	ldr	r3, [pc, #324]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	494e      	ldr	r1, [pc, #312]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f023 0210 	bic.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4947      	ldr	r1, [pc, #284]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002220:	4b42      	ldr	r3, [pc, #264]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222c:	493f      	ldr	r1, [pc, #252]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f023 0220 	bic.w	r2, r3, #32
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4938      	ldr	r1, [pc, #224]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800225c:	4b33      	ldr	r3, [pc, #204]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	4930      	ldr	r1, [pc, #192]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800227a:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	4929      	ldr	r1, [pc, #164]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	4921      	ldr	r1, [pc, #132]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	491a      	ldr	r1, [pc, #104]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	4912      	ldr	r1, [pc, #72]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	490b      	ldr	r1, [pc, #44]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	4903      	ldr	r1, [pc, #12]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3748      	adds	r7, #72	; 0x48
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e049      	b.n	80023d6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe f892 	bl	8000480 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f000 f9b0 	bl	80026d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_TIM_OC_Start+0x24>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e03c      	b.n	800247e <HAL_TIM_OC_Start+0x9e>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b04      	cmp	r3, #4
 8002408:	d109      	bne.n	800241e <HAL_TIM_OC_Start+0x3e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	e02f      	b.n	800247e <HAL_TIM_OC_Start+0x9e>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d109      	bne.n	8002438 <HAL_TIM_OC_Start+0x58>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e022      	b.n	800247e <HAL_TIM_OC_Start+0x9e>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d109      	bne.n	8002452 <HAL_TIM_OC_Start+0x72>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	e015      	b.n	800247e <HAL_TIM_OC_Start+0x9e>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b10      	cmp	r3, #16
 8002456:	d109      	bne.n	800246c <HAL_TIM_OC_Start+0x8c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e008      	b.n	800247e <HAL_TIM_OC_Start+0x9e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e097      	b.n	80025b6 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <HAL_TIM_OC_Start+0xb6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	e023      	b.n	80024de <HAL_TIM_OC_Start+0xfe>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d104      	bne.n	80024a6 <HAL_TIM_OC_Start+0xc6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a4:	e01b      	b.n	80024de <HAL_TIM_OC_Start+0xfe>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d104      	bne.n	80024b6 <HAL_TIM_OC_Start+0xd6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b4:	e013      	b.n	80024de <HAL_TIM_OC_Start+0xfe>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	d104      	bne.n	80024c6 <HAL_TIM_OC_Start+0xe6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024c4:	e00b      	b.n	80024de <HAL_TIM_OC_Start+0xfe>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d104      	bne.n	80024d6 <HAL_TIM_OC_Start+0xf6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d4:	e003      	b.n	80024de <HAL_TIM_OC_Start+0xfe>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fc5a 	bl	8002da0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a33      	ldr	r2, [pc, #204]	; (80025c0 <HAL_TIM_OC_Start+0x1e0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_TIM_OC_Start+0x13e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_TIM_OC_Start+0x1e4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00e      	beq.n	800251e <HAL_TIM_OC_Start+0x13e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a30      	ldr	r2, [pc, #192]	; (80025c8 <HAL_TIM_OC_Start+0x1e8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_TIM_OC_Start+0x13e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <HAL_TIM_OC_Start+0x1ec>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_TIM_OC_Start+0x13e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2d      	ldr	r2, [pc, #180]	; (80025d0 <HAL_TIM_OC_Start+0x1f0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_TIM_OC_Start+0x142>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_TIM_OC_Start+0x144>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_TIM_OC_Start+0x1e0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d018      	beq.n	8002574 <HAL_TIM_OC_Start+0x194>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254a:	d013      	beq.n	8002574 <HAL_TIM_OC_Start+0x194>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <HAL_TIM_OC_Start+0x1f4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_TIM_OC_Start+0x194>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_TIM_OC_Start+0x1f8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_TIM_OC_Start+0x194>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_TIM_OC_Start+0x1e4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_TIM_OC_Start+0x194>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_TIM_OC_Start+0x1e8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d115      	bne.n	80025a0 <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_TIM_OC_Start+0x1fc>)
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d015      	beq.n	80025b2 <HAL_TIM_OC_Start+0x1d2>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d011      	beq.n	80025b2 <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259e:	e008      	b.n	80025b2 <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e000      	b.n	80025b4 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40013400 	.word	0x40013400
 80025c8:	40014000 	.word	0x40014000
 80025cc:	40014400 	.word	0x40014400
 80025d0:	40014800 	.word	0x40014800
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40000800 	.word	0x40000800
 80025dc:	00010007 	.word	0x00010007

080025e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e066      	b.n	80026cc <HAL_TIM_OC_ConfigChannel+0xec>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b14      	cmp	r3, #20
 800260a:	d857      	bhi.n	80026bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <HAL_TIM_OC_ConfigChannel+0x34>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002669 	.word	0x08002669
 8002618:	080026bd 	.word	0x080026bd
 800261c:	080026bd 	.word	0x080026bd
 8002620:	080026bd 	.word	0x080026bd
 8002624:	08002677 	.word	0x08002677
 8002628:	080026bd 	.word	0x080026bd
 800262c:	080026bd 	.word	0x080026bd
 8002630:	080026bd 	.word	0x080026bd
 8002634:	08002685 	.word	0x08002685
 8002638:	080026bd 	.word	0x080026bd
 800263c:	080026bd 	.word	0x080026bd
 8002640:	080026bd 	.word	0x080026bd
 8002644:	08002693 	.word	0x08002693
 8002648:	080026bd 	.word	0x080026bd
 800264c:	080026bd 	.word	0x080026bd
 8002650:	080026bd 	.word	0x080026bd
 8002654:	080026a1 	.word	0x080026a1
 8002658:	080026bd 	.word	0x080026bd
 800265c:	080026bd 	.word	0x080026bd
 8002660:	080026bd 	.word	0x080026bd
 8002664:	080026af 	.word	0x080026af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f8c0 	bl	80027f4 <TIM_OC1_SetConfig>
      break;
 8002674:	e025      	b.n	80026c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f949 	bl	8002914 <TIM_OC2_SetConfig>
      break;
 8002682:	e01e      	b.n	80026c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f9cc 	bl	8002a28 <TIM_OC3_SetConfig>
      break;
 8002690:	e017      	b.n	80026c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fa4d 	bl	8002b38 <TIM_OC4_SetConfig>
      break;
 800269e:	e010      	b.n	80026c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fab0 	bl	8002c0c <TIM_OC5_SetConfig>
      break;
 80026ac:	e009      	b.n	80026c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fb0d 	bl	8002cd4 <TIM_OC6_SetConfig>
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
      break;
 80026c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3c      	ldr	r2, [pc, #240]	; (80027d8 <TIM_Base_SetConfig+0x104>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00f      	beq.n	800270c <TIM_Base_SetConfig+0x38>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f2:	d00b      	beq.n	800270c <TIM_Base_SetConfig+0x38>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a39      	ldr	r2, [pc, #228]	; (80027dc <TIM_Base_SetConfig+0x108>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x38>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a38      	ldr	r2, [pc, #224]	; (80027e0 <TIM_Base_SetConfig+0x10c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x38>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a37      	ldr	r2, [pc, #220]	; (80027e4 <TIM_Base_SetConfig+0x110>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <TIM_Base_SetConfig+0x104>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01b      	beq.n	800275e <TIM_Base_SetConfig+0x8a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d017      	beq.n	800275e <TIM_Base_SetConfig+0x8a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <TIM_Base_SetConfig+0x108>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <TIM_Base_SetConfig+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <TIM_Base_SetConfig+0x10c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00f      	beq.n	800275e <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <TIM_Base_SetConfig+0x110>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00b      	beq.n	800275e <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <TIM_Base_SetConfig+0x114>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <TIM_Base_SetConfig+0x118>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <TIM_Base_SetConfig+0x11c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d108      	bne.n	8002770 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <TIM_Base_SetConfig+0x104>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00f      	beq.n	80027bc <TIM_Base_SetConfig+0xe8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <TIM_Base_SetConfig+0x110>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00b      	beq.n	80027bc <TIM_Base_SetConfig+0xe8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <TIM_Base_SetConfig+0x114>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <TIM_Base_SetConfig+0xe8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <TIM_Base_SetConfig+0x118>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0xe8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <TIM_Base_SetConfig+0x11c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	40013400 	.word	0x40013400
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800

080027f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f023 0201 	bic.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 0302 	bic.w	r3, r3, #2
 8002840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <TIM_OC1_SetConfig+0x10c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00f      	beq.n	8002874 <TIM_OC1_SetConfig+0x80>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <TIM_OC1_SetConfig+0x110>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00b      	beq.n	8002874 <TIM_OC1_SetConfig+0x80>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <TIM_OC1_SetConfig+0x114>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_OC1_SetConfig+0x80>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a29      	ldr	r2, [pc, #164]	; (800290c <TIM_OC1_SetConfig+0x118>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_OC1_SetConfig+0x80>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <TIM_OC1_SetConfig+0x11c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10c      	bne.n	800288e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0308 	bic.w	r3, r3, #8
 800287a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <TIM_OC1_SetConfig+0x10c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00f      	beq.n	80028b6 <TIM_OC1_SetConfig+0xc2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <TIM_OC1_SetConfig+0x110>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_OC1_SetConfig+0xc2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <TIM_OC1_SetConfig+0x114>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_OC1_SetConfig+0xc2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <TIM_OC1_SetConfig+0x118>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_OC1_SetConfig+0xc2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a17      	ldr	r2, [pc, #92]	; (8002910 <TIM_OC1_SetConfig+0x11c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d111      	bne.n	80028da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40013400 	.word	0x40013400
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800

08002914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f023 0210 	bic.w	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f023 0320 	bic.w	r3, r3, #32
 8002962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <TIM_OC2_SetConfig+0x100>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC2_SetConfig+0x6c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <TIM_OC2_SetConfig+0x104>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10d      	bne.n	800299c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <TIM_OC2_SetConfig+0x100>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00f      	beq.n	80029c4 <TIM_OC2_SetConfig+0xb0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <TIM_OC2_SetConfig+0x104>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_OC2_SetConfig+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <TIM_OC2_SetConfig+0x108>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_OC2_SetConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <TIM_OC2_SetConfig+0x10c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_OC2_SetConfig+0xb0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <TIM_OC2_SetConfig+0x110>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d113      	bne.n	80029ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40013400 	.word	0x40013400
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40014800 	.word	0x40014800

08002a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <TIM_OC3_SetConfig+0xfc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d003      	beq.n	8002a92 <TIM_OC3_SetConfig+0x6a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <TIM_OC3_SetConfig+0x100>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10d      	bne.n	8002aae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <TIM_OC3_SetConfig+0xfc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00f      	beq.n	8002ad6 <TIM_OC3_SetConfig+0xae>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <TIM_OC3_SetConfig+0x100>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <TIM_OC3_SetConfig+0xae>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <TIM_OC3_SetConfig+0x104>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <TIM_OC3_SetConfig+0xae>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <TIM_OC3_SetConfig+0x108>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <TIM_OC3_SetConfig+0xae>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <TIM_OC3_SetConfig+0x10c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d113      	bne.n	8002afe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40013400 	.word	0x40013400
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	40014400 	.word	0x40014400
 8002b34:	40014800 	.word	0x40014800

08002b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <TIM_OC4_SetConfig+0xc0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00f      	beq.n	8002bbc <TIM_OC4_SetConfig+0x84>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <TIM_OC4_SetConfig+0xc4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <TIM_OC4_SetConfig+0x84>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <TIM_OC4_SetConfig+0xc8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <TIM_OC4_SetConfig+0x84>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <TIM_OC4_SetConfig+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_OC4_SetConfig+0x84>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <TIM_OC4_SetConfig+0xd0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d109      	bne.n	8002bd0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40013400 	.word	0x40013400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800

08002c0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <TIM_OC5_SetConfig+0xb4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00f      	beq.n	8002c86 <TIM_OC5_SetConfig+0x7a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <TIM_OC5_SetConfig+0xb8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_OC5_SetConfig+0x7a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <TIM_OC5_SetConfig+0xbc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <TIM_OC5_SetConfig+0x7a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <TIM_OC5_SetConfig+0xc0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_OC5_SetConfig+0x7a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <TIM_OC5_SetConfig+0xc4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d109      	bne.n	8002c9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	621a      	str	r2, [r3, #32]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40013400 	.word	0x40013400
 8002cc8:	40014000 	.word	0x40014000
 8002ccc:	40014400 	.word	0x40014400
 8002cd0:	40014800 	.word	0x40014800

08002cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	051b      	lsls	r3, r3, #20
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <TIM_OC6_SetConfig+0xb8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00f      	beq.n	8002d50 <TIM_OC6_SetConfig+0x7c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <TIM_OC6_SetConfig+0xbc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <TIM_OC6_SetConfig+0x7c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <TIM_OC6_SetConfig+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_OC6_SetConfig+0x7c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <TIM_OC6_SetConfig+0xc4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_OC6_SetConfig+0x7c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <TIM_OC6_SetConfig+0xc8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d109      	bne.n	8002d64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	029b      	lsls	r3, r3, #10
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40013400 	.word	0x40013400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800

08002da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	2201      	movs	r2, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e063      	b.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2a      	ldr	r2, [pc, #168]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d108      	bne.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d013      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40013400 	.word	0x40013400
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40014000 	.word	0x40014000

08002eec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e065      	b.n	8002fd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d115      	bne.n	8002fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40013400 	.word	0x40013400

08002fe8 <__libc_init_array>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	4d0d      	ldr	r5, [pc, #52]	; (8003020 <__libc_init_array+0x38>)
 8002fec:	4c0d      	ldr	r4, [pc, #52]	; (8003024 <__libc_init_array+0x3c>)
 8002fee:	1b64      	subs	r4, r4, r5
 8002ff0:	10a4      	asrs	r4, r4, #2
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	42a6      	cmp	r6, r4
 8002ff6:	d109      	bne.n	800300c <__libc_init_array+0x24>
 8002ff8:	4d0b      	ldr	r5, [pc, #44]	; (8003028 <__libc_init_array+0x40>)
 8002ffa:	4c0c      	ldr	r4, [pc, #48]	; (800302c <__libc_init_array+0x44>)
 8002ffc:	f000 f820 	bl	8003040 <_init>
 8003000:	1b64      	subs	r4, r4, r5
 8003002:	10a4      	asrs	r4, r4, #2
 8003004:	2600      	movs	r6, #0
 8003006:	42a6      	cmp	r6, r4
 8003008:	d105      	bne.n	8003016 <__libc_init_array+0x2e>
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003010:	4798      	blx	r3
 8003012:	3601      	adds	r6, #1
 8003014:	e7ee      	b.n	8002ff4 <__libc_init_array+0xc>
 8003016:	f855 3b04 	ldr.w	r3, [r5], #4
 800301a:	4798      	blx	r3
 800301c:	3601      	adds	r6, #1
 800301e:	e7f2      	b.n	8003006 <__libc_init_array+0x1e>
 8003020:	08003088 	.word	0x08003088
 8003024:	08003088 	.word	0x08003088
 8003028:	08003088 	.word	0x08003088
 800302c:	0800308c 	.word	0x0800308c

08003030 <memset>:
 8003030:	4402      	add	r2, r0
 8003032:	4603      	mov	r3, r0
 8003034:	4293      	cmp	r3, r2
 8003036:	d100      	bne.n	800303a <memset+0xa>
 8003038:	4770      	bx	lr
 800303a:	f803 1b01 	strb.w	r1, [r3], #1
 800303e:	e7f9      	b.n	8003034 <memset+0x4>

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
