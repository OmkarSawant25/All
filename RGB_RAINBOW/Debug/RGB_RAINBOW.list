
RGB_RAINBOW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000613c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080062c8  080062c8  000162c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080064d0  080064d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064d0  080064d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080064d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000009dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009e8  200009e8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a811  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a79  00000000  00000000  0002a84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000990  00000000  00000000  0002cd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d159  00000000  00000000  0002d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c926  00000000  00000000  0004a809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1c0f  00000000  00000000  0005712f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00108d3e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ec0  00000000  00000000  00108d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080062ac 	.word	0x080062ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080062ac 	.word	0x080062ac

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];
int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000bb0:	f003 f9c6 	bl	8003f40 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	200001f8 	.word	0x200001f8

08000bcc <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	b2d9      	uxtb	r1, r3
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <Set_LED+0x58>)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	b2d9      	uxtb	r1, r3
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <Set_LED+0x58>)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	b2d9      	uxtb	r1, r3
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <Set_LED+0x58>)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	460a      	mov	r2, r1
 8000c04:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2d9      	uxtb	r1, r3
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <Set_LED+0x58>)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	460a      	mov	r2, r1
 8000c14:	70da      	strb	r2, [r3, #3]

}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200000b8 	.word	0x200000b8

08000c28 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness) {
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b2d      	cmp	r3, #45	; 0x2d
 8000c34:	dd01      	ble.n	8000c3a <Set_Brightness+0x12>
		brightness = 45;
 8000c36:	232d      	movs	r3, #45	; 0x2d
 8000c38:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e060      	b.n	8000d02 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <Set_Brightness+0xf8>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000c48:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <Set_Brightness+0xfc>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8000c50:	2301      	movs	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	e04f      	b.n	8000cf6 <Set_Brightness+0xce>
			float angle = 90 - brightness;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000c5c:	ee07 3a90 	vmov	s15, r3
 8000c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c64:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * PI / 180;
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fc11 	bl	8000490 <__aeabi_f2d>
 8000c6e:	a32a      	add	r3, pc, #168	; (adr r3, 8000d18 <Set_Brightness+0xf0>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	f7ff fc64 	bl	8000540 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 0200 	mov.w	r2, #0
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <Set_Brightness+0x100>)
 8000c86:	f7ff fd85 	bl	8000794 <__aeabi_ddiv>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff ff37 	bl	8000b04 <__aeabi_d2f>
 8000c96:	4603      	mov	r3, r0
 8000c98:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <Set_Brightness+0xf8>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	441a      	add	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fbdf 	bl	800046c <__aeabi_i2d>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f7ff fbec 	bl	8000490 <__aeabi_f2d>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	ec43 2b10 	vmov	d0, r2, r3
 8000cc0:	f004 fa4a 	bl	8005158 <tan>
 8000cc4:	ec53 2b10 	vmov	r2, r3, d0
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	f7ff fd62 	bl	8000794 <__aeabi_ddiv>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fef4 	bl	8000ac4 <__aeabi_d2uiz>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b2d9      	uxtb	r1, r3
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <Set_Brightness+0xfc>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	441a      	add	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	460a      	mov	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	ddac      	ble.n	8000c56 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2b27      	cmp	r3, #39	; 0x27
 8000d06:	dd9b      	ble.n	8000c40 <Set_Brightness+0x18>
		}
	}
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	53c8d4f1 	.word	0x53c8d4f1
 8000d1c:	400921fb 	.word	0x400921fb
 8000d20:	200000b8 	.word	0x200000b8
 8000d24:	20000158 	.word	0x20000158
 8000d28:	40668000 	.word	0x40668000

08000d2c <WS2812_Send>:

uint16_t pwmData[(24 * MAX_LED) + 50];

void WS2812_Send(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e036      	b.n	8000daa <WS2812_Send+0x7e>
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	; (8000df8 <WS2812_Send+0xcc>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	041a      	lsls	r2, r3, #16
 8000d48:	492b      	ldr	r1, [pc, #172]	; (8000df8 <WS2812_Send+0xcc>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4928      	ldr	r1, [pc, #160]	; (8000df8 <WS2812_Send+0xcc>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	4313      	orrs	r3, r2
		color =
 8000d62:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--) {
 8000d64:	2317      	movs	r3, #23
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e019      	b.n	8000d9e <WS2812_Send+0x72>
			if (color & (1 << i)) {
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <WS2812_Send+0x5c>
				pwmData[indx] = 60; // 2/3 of 90%
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <WS2812_Send+0xd0>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	213c      	movs	r1, #60	; 0x3c
 8000d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d86:	e004      	b.n	8000d92 <WS2812_Send+0x66>
			} else
				pwmData[indx] = 30; // 1/3 of 90
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <WS2812_Send+0xd0>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	211e      	movs	r1, #30
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dae2      	bge.n	8000d6a <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	3301      	adds	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b27      	cmp	r3, #39	; 0x27
 8000dae:	ddc5      	ble.n	8000d3c <WS2812_Send+0x10>
		}
	}
	for (int i = 0; i < 50; i++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	e00a      	b.n	8000dcc <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <WS2812_Send+0xd0>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b31      	cmp	r3, #49	; 0x31
 8000dd0:	ddf1      	ble.n	8000db6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <WS2812_Send+0xd0>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <WS2812_Send+0xd4>)
 8000ddc:	f002 fe98 	bl	8003b10 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8000de0:	bf00      	nop
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <WS2812_Send+0xd8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0fb      	beq.n	8000de2 <WS2812_Send+0xb6>
	};
	datasentflag = 0;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <WS2812_Send+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000158 	.word	0x20000158
 8000dfc:	200001fc 	.word	0x200001fc
 8000e00:	20000028 	.word	0x20000028
 8000e04:	200001f8 	.word	0x200001f8

08000e08 <rainbow_effect_right>:
	} else
		effStep++;
	return 0x01;
}

uint8_t rainbow_effect_right() {
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
	// Colors: 3 (255.0.0, 0.255.0, 0.0.255)
	// Options: rainbowlen=8, toLeft=false,
//  if(millis() - strip_0.effStart < 30 * (strip_0.effStep)) return 0x00;
	float factor1, factor2;
	uint16_t ind;
	for (uint16_t j = 0; j < 40; j++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	81fb      	strh	r3, [r7, #14]
 8000e12:	e233      	b.n	800127c <rainbow_effect_right+0x474>
		ind = 14 - (int16_t) (effStep - j * 1.75) % 14;
 8000e14:	4bc2      	ldr	r3, [pc, #776]	; (8001120 <rainbow_effect_right+0x318>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb27 	bl	800046c <__aeabi_i2d>
 8000e1e:	4604      	mov	r4, r0
 8000e20:	460d      	mov	r5, r1
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb21 	bl	800046c <__aeabi_i2d>
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4bbd      	ldr	r3, [pc, #756]	; (8001124 <rainbow_effect_right+0x31c>)
 8000e30:	f7ff fb86 	bl	8000540 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4620      	mov	r0, r4
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	f7ff f9c8 	bl	80001d0 <__aeabi_dsub>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fe14 	bl	8000a74 <__aeabi_d2iz>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	4bb5      	ldr	r3, [pc, #724]	; (8001128 <rainbow_effect_right+0x320>)
 8000e52:	fb83 1302 	smull	r1, r3, r3, r2
 8000e56:	4413      	add	r3, r2
 8000e58:	10d9      	asrs	r1, r3, #3
 8000e5a:	17d3      	asrs	r3, r2, #31
 8000e5c:	1ac9      	subs	r1, r1, r3
 8000e5e:	460b      	mov	r3, r1
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1a5b      	subs	r3, r3, r1
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	f1c3 030e 	rsb	r3, r3, #14
 8000e70:	81bb      	strh	r3, [r7, #12]
		switch ((int) ((ind % 14) / 4.666666666666667)) {
 8000e72:	89ba      	ldrh	r2, [r7, #12]
 8000e74:	0853      	lsrs	r3, r2, #1
 8000e76:	49ac      	ldr	r1, [pc, #688]	; (8001128 <rainbow_effect_right+0x320>)
 8000e78:	fba1 1303 	umull	r1, r3, r1, r3
 8000e7c:	0899      	lsrs	r1, r3, #2
 8000e7e:	460b      	mov	r3, r1
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a5b      	subs	r3, r3, r1
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff faee 	bl	800046c <__aeabi_i2d>
 8000e90:	a3a1      	add	r3, pc, #644	; (adr r3, 8001118 <rainbow_effect_right+0x310>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fc7d 	bl	8000794 <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fde7 	bl	8000a74 <__aeabi_d2iz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	f000 8145 	beq.w	8001138 <rainbow_effect_right+0x330>
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	f300 81e1 	bgt.w	8001276 <rainbow_effect_right+0x46e>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <rainbow_effect_right+0xb8>
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f000 808c 	beq.w	8000fd6 <rainbow_effect_right+0x1ce>
 8000ebe:	e1da      	b.n	8001276 <rainbow_effect_right+0x46e>
		case 0:
			factor1 = 1.0
					- ((float) (ind % 14 - 0 * 4.666666666666667)
 8000ec0:	89ba      	ldrh	r2, [r7, #12]
 8000ec2:	0853      	lsrs	r3, r2, #1
 8000ec4:	4998      	ldr	r1, [pc, #608]	; (8001128 <rainbow_effect_right+0x320>)
 8000ec6:	fba1 1303 	umull	r1, r3, r1, r3
 8000eca:	0899      	lsrs	r1, r3, #2
 8000ecc:	460b      	mov	r3, r1
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fac7 	bl	800046c <__aeabi_i2d>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fe0d 	bl	8000b04 <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff facf 	bl	8000490 <__aeabi_f2d>
							/ 4.666666666666667);
 8000ef2:	a389      	add	r3, pc, #548	; (adr r3, 8001118 <rainbow_effect_right+0x310>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff fc4c 	bl	8000794 <__aeabi_ddiv>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
					- ((float) (ind % 14 - 0 * 4.666666666666667)
 8000f00:	f04f 0000 	mov.w	r0, #0
 8000f04:	4989      	ldr	r1, [pc, #548]	; (800112c <rainbow_effect_right+0x324>)
 8000f06:	f7ff f963 	bl	80001d0 <__aeabi_dsub>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
			factor1 = 1.0
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fdf7 	bl	8000b04 <__aeabi_d2f>
 8000f16:	4603      	mov	r3, r0
 8000f18:	60bb      	str	r3, [r7, #8]
			factor2 = (float) ((int) (ind - 0) % 14) / 4.666666666666667;
 8000f1a:	89ba      	ldrh	r2, [r7, #12]
 8000f1c:	4b82      	ldr	r3, [pc, #520]	; (8001128 <rainbow_effect_right+0x320>)
 8000f1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f22:	4413      	add	r3, r2
 8000f24:	10d9      	asrs	r1, r3, #3
 8000f26:	17d3      	asrs	r3, r2, #31
 8000f28:	1ac9      	subs	r1, r1, r3
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a5b      	subs	r3, r3, r1
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	1ad1      	subs	r1, r2, r3
 8000f34:	ee07 1a90 	vmov	s15, r1
 8000f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3c:	ee17 0a90 	vmov	r0, s15
 8000f40:	f7ff faa6 	bl	8000490 <__aeabi_f2d>
 8000f44:	a374      	add	r3, pc, #464	; (adr r3, 8001118 <rainbow_effect_right+0x310>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff fc23 	bl	8000794 <__aeabi_ddiv>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fdd5 	bl	8000b04 <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	607b      	str	r3, [r7, #4]
			Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2,
 8000f5e:	89f8      	ldrh	r0, [r7, #14]
 8000f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f64:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001130 <rainbow_effect_right+0x328>
 8000f68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f70:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001134 <rainbow_effect_right+0x32c>
 8000f74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000f80:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f84:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001134 <rainbow_effect_right+0x32c>
 8000f88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f90:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001130 <rainbow_effect_right+0x328>
 8000f94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9c:	eefd 5ae7 	vcvt.s32.f32	s11, s15
					0 * factor1 + 0 * factor2);
 8000fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fa4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001134 <rainbow_effect_right+0x32c>
 8000fa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001134 <rainbow_effect_right+0x32c>
 8000fb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
			Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2,
 8000fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc0:	ee17 3a90 	vmov	r3, s15
 8000fc4:	ee15 2a90 	vmov	r2, s11
 8000fc8:	ee16 1a10 	vmov	r1, s12
 8000fcc:	f7ff fdfe 	bl	8000bcc <Set_LED>
			WS2812_Send();
 8000fd0:	f7ff feac 	bl	8000d2c <WS2812_Send>
			break;
 8000fd4:	e14f      	b.n	8001276 <rainbow_effect_right+0x46e>
		case 1:
			factor1 = 1.0
					- ((float) (ind % 14 - 1 * 4.666666666666667)
 8000fd6:	89ba      	ldrh	r2, [r7, #12]
 8000fd8:	0853      	lsrs	r3, r2, #1
 8000fda:	4953      	ldr	r1, [pc, #332]	; (8001128 <rainbow_effect_right+0x320>)
 8000fdc:	fba1 1303 	umull	r1, r3, r1, r3
 8000fe0:	0899      	lsrs	r1, r3, #2
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	1a5b      	subs	r3, r3, r1
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa3c 	bl	800046c <__aeabi_i2d>
 8000ff4:	a348      	add	r3, pc, #288	; (adr r3, 8001118 <rainbow_effect_right+0x310>)
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f7ff f8e9 	bl	80001d0 <__aeabi_dsub>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fd7d 	bl	8000b04 <__aeabi_d2f>
 800100a:	4603      	mov	r3, r0
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa3f 	bl	8000490 <__aeabi_f2d>
							/ 4.666666666666667);
 8001012:	a341      	add	r3, pc, #260	; (adr r3, 8001118 <rainbow_effect_right+0x310>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fbbc 	bl	8000794 <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
					- ((float) (ind % 14 - 1 * 4.666666666666667)
 8001020:	f04f 0000 	mov.w	r0, #0
 8001024:	4941      	ldr	r1, [pc, #260]	; (800112c <rainbow_effect_right+0x324>)
 8001026:	f7ff f8d3 	bl	80001d0 <__aeabi_dsub>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
			factor1 = 1.0
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fd67 	bl	8000b04 <__aeabi_d2f>
 8001036:	4603      	mov	r3, r0
 8001038:	60bb      	str	r3, [r7, #8]
			factor2 = (float) ((int) (ind - 4.666666666666667) % 14)
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa15 	bl	800046c <__aeabi_i2d>
 8001042:	a335      	add	r3, pc, #212	; (adr r3, 8001118 <rainbow_effect_right+0x310>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff f8c2 	bl	80001d0 <__aeabi_dsub>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fd0e 	bl	8000a74 <__aeabi_d2iz>
 8001058:	4602      	mov	r2, r0
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <rainbow_effect_right+0x320>)
 800105c:	fb83 1302 	smull	r1, r3, r3, r2
 8001060:	4413      	add	r3, r2
 8001062:	10d9      	asrs	r1, r3, #3
 8001064:	17d3      	asrs	r3, r2, #31
 8001066:	1ac9      	subs	r1, r1, r3
 8001068:	460b      	mov	r3, r1
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	1a5b      	subs	r3, r3, r1
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	1ad1      	subs	r1, r2, r3
 8001072:	ee07 1a90 	vmov	s15, r1
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	ee17 0a90 	vmov	r0, s15
 800107e:	f7ff fa07 	bl	8000490 <__aeabi_f2d>
					/ 4.666666666666667;
 8001082:	a325      	add	r3, pc, #148	; (adr r3, 8001118 <rainbow_effect_right+0x310>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fb84 	bl	8000794 <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
			factor2 = (float) ((int) (ind - 4.666666666666667) % 14)
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd36 	bl	8000b04 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	607b      	str	r3, [r7, #4]
			Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2,
 800109c:	89f8      	ldrh	r0, [r7, #14]
 800109e:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001134 <rainbow_effect_right+0x32c>
 80010a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ae:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001134 <rainbow_effect_right+0x32c>
 80010b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80010be:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001130 <rainbow_effect_right+0x328>
 80010c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ce:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001134 <rainbow_effect_right+0x32c>
 80010d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010da:	eefd 5ae7 	vcvt.s32.f32	s11, s15
					0 * factor1 + 255 * factor2);
 80010de:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001134 <rainbow_effect_right+0x32c>
 80010e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001130 <rainbow_effect_right+0x328>
 80010f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
			Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2,
 80010fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	ee15 2a90 	vmov	r2, s11
 8001106:	ee16 1a10 	vmov	r1, s12
 800110a:	f7ff fd5f 	bl	8000bcc <Set_LED>
			WS2812_Send();
 800110e:	f7ff fe0d 	bl	8000d2c <WS2812_Send>
			break;
 8001112:	e0b0      	b.n	8001276 <rainbow_effect_right+0x46e>
 8001114:	f3af 8000 	nop.w
 8001118:	aaaaaaab 	.word	0xaaaaaaab
 800111c:	4012aaaa 	.word	0x4012aaaa
 8001120:	200009e0 	.word	0x200009e0
 8001124:	3ffc0000 	.word	0x3ffc0000
 8001128:	92492493 	.word	0x92492493
 800112c:	3ff00000 	.word	0x3ff00000
 8001130:	437f0000 	.word	0x437f0000
 8001134:	00000000 	.word	0x00000000
		case 2:
			factor1 = 1.0
					- ((float) (ind % 14 - 2 * 4.666666666666667)
 8001138:	89ba      	ldrh	r2, [r7, #12]
 800113a:	0853      	lsrs	r3, r2, #1
 800113c:	4960      	ldr	r1, [pc, #384]	; (80012c0 <rainbow_effect_right+0x4b8>)
 800113e:	fba1 1303 	umull	r1, r3, r1, r3
 8001142:	0899      	lsrs	r1, r3, #2
 8001144:	460b      	mov	r3, r1
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	1a5b      	subs	r3, r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f98b 	bl	800046c <__aeabi_i2d>
 8001156:	a356      	add	r3, pc, #344	; (adr r3, 80012b0 <rainbow_effect_right+0x4a8>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff f838 	bl	80001d0 <__aeabi_dsub>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fccc 	bl	8000b04 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f98e 	bl	8000490 <__aeabi_f2d>
							/ 4.666666666666667);
 8001174:	a350      	add	r3, pc, #320	; (adr r3, 80012b8 <rainbow_effect_right+0x4b0>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fb0b 	bl	8000794 <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
					- ((float) (ind % 14 - 2 * 4.666666666666667)
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	494f      	ldr	r1, [pc, #316]	; (80012c4 <rainbow_effect_right+0x4bc>)
 8001188:	f7ff f822 	bl	80001d0 <__aeabi_dsub>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
			factor1 = 1.0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fcb6 	bl	8000b04 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	60bb      	str	r3, [r7, #8]
			factor2 = (float) ((int) (ind - 9.333333333333334) % 14)
 800119c:	89bb      	ldrh	r3, [r7, #12]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f964 	bl	800046c <__aeabi_i2d>
 80011a4:	a342      	add	r3, pc, #264	; (adr r3, 80012b0 <rainbow_effect_right+0x4a8>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff f811 	bl	80001d0 <__aeabi_dsub>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fc5d 	bl	8000a74 <__aeabi_d2iz>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <rainbow_effect_right+0x4b8>)
 80011be:	fb83 1302 	smull	r1, r3, r3, r2
 80011c2:	4413      	add	r3, r2
 80011c4:	10d9      	asrs	r1, r3, #3
 80011c6:	17d3      	asrs	r3, r2, #31
 80011c8:	1ac9      	subs	r1, r1, r3
 80011ca:	460b      	mov	r3, r1
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	1a5b      	subs	r3, r3, r1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	1ad1      	subs	r1, r2, r3
 80011d4:	ee07 1a90 	vmov	s15, r1
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff f956 	bl	8000490 <__aeabi_f2d>
					/ 4.666666666666667;
 80011e4:	a334      	add	r3, pc, #208	; (adr r3, 80012b8 <rainbow_effect_right+0x4b0>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff fad3 	bl	8000794 <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
			factor2 = (float) ((int) (ind - 9.333333333333334) % 14)
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fc85 	bl	8000b04 <__aeabi_d2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	607b      	str	r3, [r7, #4]
			Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2,
 80011fe:	89f8      	ldrh	r0, [r7, #14]
 8001200:	edd7 7a02 	vldr	s15, [r7, #8]
 8001204:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80012c8 <rainbow_effect_right+0x4c0>
 8001208:	ee27 7a87 	vmul.f32	s14, s15, s14
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80012cc <rainbow_effect_right+0x4c4>
 8001214:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121c:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001220:	edd7 7a02 	vldr	s15, [r7, #8]
 8001224:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80012c8 <rainbow_effect_right+0x4c0>
 8001228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800122c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001230:	eddf 6a25 	vldr	s13, [pc, #148]	; 80012c8 <rainbow_effect_right+0x4c0>
 8001234:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	eefd 5ae7 	vcvt.s32.f32	s11, s15
					255 * factor1 + 0 * factor2);
 8001240:	edd7 7a02 	vldr	s15, [r7, #8]
 8001244:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80012cc <rainbow_effect_right+0x4c4>
 8001248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800124c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001250:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80012c8 <rainbow_effect_right+0x4c0>
 8001254:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
			Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2,
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee17 3a90 	vmov	r3, s15
 8001264:	ee15 2a90 	vmov	r2, s11
 8001268:	ee16 1a10 	vmov	r1, s12
 800126c:	f7ff fcae 	bl	8000bcc <Set_LED>
			WS2812_Send();
 8001270:	f7ff fd5c 	bl	8000d2c <WS2812_Send>
			break;
 8001274:	bf00      	nop
	for (uint16_t j = 0; j < 40; j++) {
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	3301      	adds	r3, #1
 800127a:	81fb      	strh	r3, [r7, #14]
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	2b27      	cmp	r3, #39	; 0x27
 8001280:	f67f adc8 	bls.w	8000e14 <rainbow_effect_right+0xc>
		}
	}
	if (effStep >= 14) {
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <rainbow_effect_right+0x4c8>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	2b0d      	cmp	r3, #13
 800128a:	d904      	bls.n	8001296 <rainbow_effect_right+0x48e>
		effStep = 0;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <rainbow_effect_right+0x4c8>)
 800128e:	2200      	movs	r2, #0
 8001290:	801a      	strh	r2, [r3, #0]
		return 0x03;
 8001292:	2303      	movs	r3, #3
 8001294:	e006      	b.n	80012a4 <rainbow_effect_right+0x49c>
	} else
		effStep++;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <rainbow_effect_right+0x4c8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <rainbow_effect_right+0x4c8>)
 80012a0:	801a      	strh	r2, [r3, #0]
	return 0x01;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bdb0      	pop	{r4, r5, r7, pc}
 80012ac:	f3af 8000 	nop.w
 80012b0:	aaaaaaab 	.word	0xaaaaaaab
 80012b4:	4022aaaa 	.word	0x4022aaaa
 80012b8:	aaaaaaab 	.word	0xaaaaaaab
 80012bc:	4012aaaa 	.word	0x4012aaaa
 80012c0:	92492493 	.word	0x92492493
 80012c4:	3ff00000 	.word	0x3ff00000
 80012c8:	00000000 	.word	0x00000000
 80012cc:	437f0000 	.word	0x437f0000
 80012d0:	200009e0 	.word	0x200009e0

080012d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012da:	f000 fa87 	bl	80017ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012de:	f000 f820 	bl	8001322 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012e2:	f000 f943 	bl	800156c <MX_GPIO_Init>
	MX_DMA_Init();
 80012e6:	f000 f923 	bl	8001530 <MX_DMA_Init>
	MX_TIM1_Init();
 80012ea:	f000 f875 	bl	80013d8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
//for(int i=0;i<7:i++)

		for (int i = 0; i < 40; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	e008      	b.n	8001306 <main+0x32>
			Set_LED(i, 255, 0, 0);
 80012f4:	2300      	movs	r3, #0
 80012f6:	2200      	movs	r2, #0
 80012f8:	21ff      	movs	r1, #255	; 0xff
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fc66 	bl	8000bcc <Set_LED>
		for (int i = 0; i < 40; i++) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b27      	cmp	r3, #39	; 0x27
 800130a:	ddf3      	ble.n	80012f4 <main+0x20>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		rainbow_effect_right();
 800130c:	f7ff fd7c 	bl	8000e08 <rainbow_effect_right>
		HAL_Delay(30);
 8001310:	201e      	movs	r0, #30
 8001312:	f000 fad1 	bl	80018b8 <HAL_Delay>
		Set_Brightness(45);
 8001316:	202d      	movs	r0, #45	; 0x2d
 8001318:	f7ff fc86 	bl	8000c28 <Set_Brightness>
		WS2812_Send();
 800131c:	f7ff fd06 	bl	8000d2c <WS2812_Send>
		rainbow_effect_right();
 8001320:	e7f4      	b.n	800130c <main+0x38>

08001322 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001322:	b580      	push	{r7, lr}
 8001324:	b09e      	sub	sp, #120	; 0x78
 8001326:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001328:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800132c:	2228      	movs	r2, #40	; 0x28
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f003 ff07 	bl	8005144 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001336:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001346:	463b      	mov	r3, r7
 8001348:	223c      	movs	r2, #60	; 0x3c
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fef9 	bl	8005144 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001352:	2301      	movs	r3, #1
 8001354:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001356:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800135a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800136e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001372:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001374:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001378:	4618      	mov	r0, r3
 800137a:	f000 ff3d 	bl	80021f8 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x66>
		Error_Handler();
 8001384:	f000 f916 	bl	80015b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001398:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800139e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013a2:	2102      	movs	r1, #2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 ff65 	bl	8003274 <HAL_RCC_ClockConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x92>
		Error_Handler();
 80013b0:	f000 f900 	bl	80015b4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80013be:	463b      	mov	r3, r7
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 f93d 	bl	8003640 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xae>
		Error_Handler();
 80013cc:	f000 f8f2 	bl	80015b4 <Error_Handler>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3778      	adds	r7, #120	; 0x78
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09a      	sub	sp, #104	; 0x68
 80013dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	222c      	movs	r2, #44	; 0x2c
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fe96 	bl	8005144 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <MX_TIM1_Init+0x150>)
 800141a:	4a44      	ldr	r2, [pc, #272]	; (800152c <MX_TIM1_Init+0x154>)
 800141c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800141e:	4b42      	ldr	r3, [pc, #264]	; (8001528 <MX_TIM1_Init+0x150>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b40      	ldr	r3, [pc, #256]	; (8001528 <MX_TIM1_Init+0x150>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 90 - 1;
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <MX_TIM1_Init+0x150>)
 800142c:	2259      	movs	r2, #89	; 0x59
 800142e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <MX_TIM1_Init+0x150>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <MX_TIM1_Init+0x150>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <MX_TIM1_Init+0x150>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001442:	4839      	ldr	r0, [pc, #228]	; (8001528 <MX_TIM1_Init+0x150>)
 8001444:	f002 faac 	bl	80039a0 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0x7a>
		Error_Handler();
 800144e:	f000 f8b1 	bl	80015b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001458:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800145c:	4619      	mov	r1, r3
 800145e:	4832      	ldr	r0, [pc, #200]	; (8001528 <MX_TIM1_Init+0x150>)
 8001460:	f002 ff7a 	bl	8004358 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x96>
		Error_Handler();
 800146a:	f000 f8a3 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800146e:	482e      	ldr	r0, [pc, #184]	; (8001528 <MX_TIM1_Init+0x150>)
 8001470:	f002 faed 	bl	8003a4e <HAL_TIM_PWM_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM1_Init+0xa6>
		Error_Handler();
 800147a:	f000 f89b 	bl	80015b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800148a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800148e:	4619      	mov	r1, r3
 8001490:	4825      	ldr	r0, [pc, #148]	; (8001528 <MX_TIM1_Init+0x150>)
 8001492:	f003 fd35 	bl	8004f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 800149c:	f000 f88a 	bl	80015b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a0:	2360      	movs	r3, #96	; 0x60
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80014bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM1_Init+0x150>)
 80014c6:	f002 fe33 	bl	8004130 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80014d0:	f000 f870 	bl	80015b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ec:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM1_Init+0x150>)
 800150a:	f003 fd79 	bl	8005000 <HAL_TIMEx_ConfigBreakDeadTime>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8001514:	f000 f84e 	bl	80015b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM1_Init+0x150>)
 800151a:	f000 f8bf 	bl	800169c <HAL_TIM_MspPostInit>

}
 800151e:	bf00      	nop
 8001520:	3768      	adds	r7, #104	; 0x68
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000028 	.word	0x20000028
 800152c:	40012c00 	.word	0x40012c00

08001530 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_DMA_Init+0x38>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <MX_DMA_Init+0x38>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_DMA_Init+0x38>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	200c      	movs	r0, #12
 8001554:	f000 faaf 	bl	8001ab6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001558:	200c      	movs	r0, #12
 800155a:	f000 fac8 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_GPIO_Init+0x44>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <MX_GPIO_Init+0x44>)
 8001578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_GPIO_Init+0x44>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_GPIO_Init+0x44>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <MX_GPIO_Init+0x44>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001594:	6153      	str	r3, [r2, #20]
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_GPIO_Init+0x44>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_MspInit+0x44>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_MspInit+0x44>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_MspInit+0x44>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_MspInit+0x44>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <HAL_MspInit+0x44>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_MspInit+0x44>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015f6:	2007      	movs	r0, #7
 80015f8:	f000 fa52 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_TIM_Base_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d133      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_TIM_Base_MspInit+0x88>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_TIM_Base_MspInit+0x88>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_TIM_Base_MspInit+0x88>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 8001634:	4a18      	ldr	r2, [pc, #96]	; (8001698 <HAL_TIM_Base_MspInit+0x90>)
 8001636:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 800163a:	2210      	movs	r2, #16
 800163c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 800164c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001650:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 8001668:	f000 fa5b 	bl	8001b22 <HAL_DMA_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001672:	f7ff ff9f 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <HAL_TIM_Base_MspInit+0x8c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40021000 	.word	0x40021000
 8001694:	20000074 	.word	0x20000074
 8001698:	4002001c 	.word	0x4002001c

0800169c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_TIM_MspPostInit+0x64>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d11c      	bne.n	80016f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_TIM_MspPostInit+0x68>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_TIM_MspPostInit+0x68>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0x68>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	f000 fc06 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40012c00 	.word	0x40012c00
 8001704:	40021000 	.word	0x40021000
 8001708:	48001000 	.word	0x48001000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f88e 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Channel2_IRQHandler+0x10>)
 8001766:	f000 fac0 	bl	8001cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000074 	.word	0x20000074

08001774 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800179c:	f7ff ffea 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	; (80017d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <LoopForever+0xe>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	; (80017e4 <LoopForever+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f003 fc99 	bl	80050fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ca:	f7ff fd83 	bl	80012d4 <main>

080017ce <LoopForever>:

LoopForever:
    b LoopForever
 80017ce:	e7fe      	b.n	80017ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017d0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017dc:	080064d8 	.word	0x080064d8
  ldr r2, =_sbss
 80017e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017e4:	200009e8 	.word	0x200009e8

080017e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_2_IRQHandler>
	...

080017ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff feda 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	20000008 	.word	0x20000008
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	200009e4 	.word	0x200009e4

080018a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200009e4 	.word	0x200009e4

080018b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e037      	b.n	8001ba8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f97e 	bl	8001e8c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}  
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Start_IT+0x20>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e04a      	b.n	8001c66 <HAL_DMA_Start_IT+0xb6>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d13a      	bne.n	8001c58 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2202      	movs	r2, #2
 8001be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f912 	bl	8001e30 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 020e 	orr.w	r2, r2, #14
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e00f      	b.n	8001c46 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 020a 	orr.w	r2, r2, #10
 8001c34:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0204 	bic.w	r2, r2, #4
 8001c44:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e005      	b.n	8001c64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
 8001c62:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d005      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2204      	movs	r2, #4
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e027      	b.n	8001ce0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 020e 	bic.w	r2, r2, #14
 8001c9e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
    } 
  }
  return status;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2204      	movs	r2, #4
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d024      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x72>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01f      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d107      	bne.n	8001d3a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0204 	bic.w	r2, r2, #4
 8001d38:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2104      	movs	r1, #4
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d06a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d5a:	e065      	b.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2202      	movs	r2, #2
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d02c      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0xdc>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d027      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 020a 	bic.w	r2, r2, #10
 8001d92:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da4:	2102      	movs	r1, #2
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d035      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001dc4:	e030      	b.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2208      	movs	r2, #8
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d028      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d023      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 020e 	bic.w	r2, r2, #14
 8001dee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
    }
  }
}  
 8001e26:	e7ff      	b.n	8001e28 <HAL_DMA_IRQHandler+0x13e>
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d108      	bne.n	8001e70 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e6e:	e007      	b.n	8001e80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <DMA_CalcBaseAndBitshift+0x60>)
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d80f      	bhi.n	8001ec0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <DMA_CalcBaseAndBitshift+0x64>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	009a      	lsls	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <DMA_CalcBaseAndBitshift+0x6c>)
 8001ebc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001ebe:	e00e      	b.n	8001ede <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <DMA_CalcBaseAndBitshift+0x70>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <DMA_CalcBaseAndBitshift+0x74>)
 8001edc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40020407 	.word	0x40020407
 8001ef0:	bffdfff8 	.word	0xbffdfff8
 8001ef4:	cccccccd 	.word	0xcccccccd
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	bffdfbf8 	.word	0xbffdfbf8
 8001f00:	40020400 	.word	0x40020400

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	e154      	b.n	80021be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8146 	beq.w	80021b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d005      	beq.n	8001f44 <HAL_GPIO_Init+0x40>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d130      	bne.n	8001fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 0201 	and.w	r2, r3, #1
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d017      	beq.n	8001fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d123      	bne.n	8002036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	6939      	ldr	r1, [r7, #16]
 8002032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0203 	and.w	r2, r3, #3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a0 	beq.w	80021b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002078:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_GPIO_Init+0x2d8>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_GPIO_Init+0x2d8>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b55      	ldr	r3, [pc, #340]	; (80021dc <HAL_GPIO_Init+0x2d8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002090:	4a53      	ldr	r2, [pc, #332]	; (80021e0 <HAL_GPIO_Init+0x2dc>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ba:	d019      	beq.n	80020f0 <HAL_GPIO_Init+0x1ec>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a49      	ldr	r2, [pc, #292]	; (80021e4 <HAL_GPIO_Init+0x2e0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_GPIO_Init+0x1e8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_GPIO_Init+0x2e4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00d      	beq.n	80020e8 <HAL_GPIO_Init+0x1e4>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <HAL_GPIO_Init+0x2ec>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d101      	bne.n	80020e0 <HAL_GPIO_Init+0x1dc>
 80020dc:	2304      	movs	r3, #4
 80020de:	e008      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e0:	2305      	movs	r3, #5
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_GPIO_Init+0x2dc>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002110:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002134:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800215e:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f aea3 	bne.w	8001f14 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	48001000 	.word	0x48001000
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021fe:	af00      	add	r7, sp, #0
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002208:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f001 b823 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 817d 	beq.w	800252e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002234:	4bbc      	ldr	r3, [pc, #752]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	d00c      	beq.n	800225a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002240:	4bb9      	ldr	r3, [pc, #740]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d15c      	bne.n	8002306 <HAL_RCC_OscConfig+0x10e>
 800224c:	4bb6      	ldr	r3, [pc, #728]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d155      	bne.n	8002306 <HAL_RCC_OscConfig+0x10e>
 800225a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800226e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_RCC_OscConfig+0x94>
 8002286:	4ba8      	ldr	r3, [pc, #672]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	e015      	b.n	80022b8 <HAL_RCC_OscConfig+0xc0>
 800228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002290:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022b4:	4b9c      	ldr	r3, [pc, #624]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022c4:	fa92 f2a2 	rbit	r2, r2
 80022c8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022d0:	fab2 f282 	clz	r2, r2
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f042 0220 	orr.w	r2, r2, #32
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f002 021f 	and.w	r2, r2, #31
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 811f 	beq.w	800252c <HAL_RCC_OscConfig+0x334>
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 8116 	bne.w	800252c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	f000 bfaf 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x12e>
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e036      	b.n	8002394 <HAL_RCC_OscConfig+0x19c>
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x158>
 8002336:	4b7c      	ldr	r3, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a7b      	ldr	r2, [pc, #492]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800233c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b79      	ldr	r3, [pc, #484]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a78      	ldr	r2, [pc, #480]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e021      	b.n	8002394 <HAL_RCC_OscConfig+0x19c>
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x184>
 8002362:	4b71      	ldr	r3, [pc, #452]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a70      	ldr	r2, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6d      	ldr	r2, [pc, #436]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0x19c>
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a69      	ldr	r2, [pc, #420]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f023 020f 	bic.w	r2, r3, #15
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	495f      	ldr	r1, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d059      	beq.n	8002472 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff fa6f 	bl	80018a0 <HAL_GetTick>
 80023c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fa6a 	bl	80018a0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d902      	bls.n	80023de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	f000 bf43 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
 80023de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0x218>
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e015      	b.n	800243c <HAL_RCC_OscConfig+0x244>
 8002410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002414:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002428:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800242c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002438:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002440:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002444:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002450:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ab      	beq.n	80023c8 <HAL_RCC_OscConfig+0x1d0>
 8002470:	e05d      	b.n	800252e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff fa15 	bl	80018a0 <HAL_GetTick>
 8002476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	e00a      	b.n	8002492 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7ff fa10 	bl	80018a0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	; 0x64
 800248a:	d902      	bls.n	8002492 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	f000 bee9 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
 8002492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002496:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2cc>
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e015      	b.n	80024f0 <HAL_RCC_OscConfig+0x2f8>
 80024c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_RCC_OscConfig+0x330>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002504:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ab      	bne.n	800247c <HAL_RCC_OscConfig+0x284>
 8002524:	e003      	b.n	800252e <HAL_RCC_OscConfig+0x336>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 817d 	beq.w	800283e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002544:	4ba6      	ldr	r3, [pc, #664]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002550:	4ba3      	ldr	r3, [pc, #652]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b08      	cmp	r3, #8
 800255a:	d172      	bne.n	8002642 <HAL_RCC_OscConfig+0x44a>
 800255c:	4ba0      	ldr	r3, [pc, #640]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d16c      	bne.n	8002642 <HAL_RCC_OscConfig+0x44a>
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800257a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_RCC_OscConfig+0x3a0>
 8002592:	4b93      	ldr	r3, [pc, #588]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c8>
 8002598:	2302      	movs	r3, #2
 800259a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025bc:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2202      	movs	r2, #2
 80025c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025ca:	fa92 f2a2 	rbit	r2, r2
 80025ce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f002 021f 	and.w	r2, r2, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCC_OscConfig+0x410>
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d002      	beq.n	8002608 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	f000 be2e 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	21f8      	movs	r1, #248	; 0xf8
 800261e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002626:	fa91 f1a1 	rbit	r1, r1
 800262a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800262e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002632:	fab1 f181 	clz	r1, r1
 8002636:	b2c9      	uxtb	r1, r1
 8002638:	408b      	lsls	r3, r1
 800263a:	4969      	ldr	r1, [pc, #420]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002640:	e0fd      	b.n	800283e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8088 	beq.w	8002764 <HAL_RCC_OscConfig+0x56c>
 8002654:	2301      	movs	r3, #1
 8002656:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002666:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	461a      	mov	r2, r3
 800267c:	2301      	movs	r3, #1
 800267e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff f90e 	bl	80018a0 <HAL_GetTick>
 8002684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff f909 	bl	80018a0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	f000 bde2 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d8>
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e013      	b.n	80026f8 <HAL_RCC_OscConfig+0x500>
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026f4:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2202      	movs	r2, #2
 80026fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002702:	fa92 f2a2 	rbit	r2, r2
 8002706:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800270a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800270e:	fab2 f282 	clz	r2, r2
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	f042 0220 	orr.w	r2, r2, #32
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f002 021f 	and.w	r2, r2, #31
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0af      	beq.n	800268a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	21f8      	movs	r1, #248	; 0xf8
 8002740:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002748:	fa91 f1a1 	rbit	r1, r1
 800274c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002750:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002754:	fab1 f181 	clz	r1, r1
 8002758:	b2c9      	uxtb	r1, r1
 800275a:	408b      	lsls	r3, r1
 800275c:	4920      	ldr	r1, [pc, #128]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
 8002762:	e06c      	b.n	800283e <HAL_RCC_OscConfig+0x646>
 8002764:	2301      	movs	r3, #1
 8002766:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002776:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002784:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	461a      	mov	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff f886 	bl	80018a0 <HAL_GetTick>
 8002794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279a:	f7ff f881 	bl	80018a0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d902      	bls.n	80027b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	f000 bd5a 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d104      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5ec>
 80027da:	4b01      	ldr	r3, [pc, #4]	; (80027e0 <HAL_RCC_OscConfig+0x5e8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e015      	b.n	800280c <HAL_RCC_OscConfig+0x614>
 80027e0:	40021000 	.word	0x40021000
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002808:	4bc8      	ldr	r3, [pc, #800]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2202      	movs	r2, #2
 800280e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002812:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002816:	fa92 f2a2 	rbit	r2, r2
 800281a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800281e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ad      	bne.n	800279a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8110 	beq.w	8002a74 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d079      	beq.n	8002958 <HAL_RCC_OscConfig+0x760>
 8002864:	2301      	movs	r3, #1
 8002866:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	4bab      	ldr	r3, [pc, #684]	; (8002b30 <HAL_RCC_OscConfig+0x938>)
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	461a      	mov	r2, r3
 800288a:	2301      	movs	r3, #1
 800288c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff f807 	bl	80018a0 <HAL_GetTick>
 8002892:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002898:	f7ff f802 	bl	80018a0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d902      	bls.n	80028ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f000 bcdb 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
 80028ae:	2302      	movs	r3, #2
 80028b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028c8:	2202      	movs	r2, #2
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028ec:	2202      	movs	r2, #2
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002906:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002908:	4b88      	ldr	r3, [pc, #544]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 800290a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002914:	2102      	movs	r1, #2
 8002916:	6019      	str	r1, [r3, #0]
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f1a3 	rbit	r1, r3
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800292e:	6019      	str	r1, [r3, #0]
  return result;
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0a0      	beq.n	8002898 <HAL_RCC_OscConfig+0x6a0>
 8002956:	e08d      	b.n	8002a74 <HAL_RCC_OscConfig+0x87c>
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	fa93 f2a3 	rbit	r2, r3
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800297a:	601a      	str	r2, [r3, #0]
  return result;
 800297c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002980:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002984:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <HAL_RCC_OscConfig+0x938>)
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	461a      	mov	r2, r3
 8002996:	2300      	movs	r3, #0
 8002998:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe ff81 	bl	80018a0 <HAL_GetTick>
 800299e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff7c 	bl	80018a0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d902      	bls.n	80029ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	f000 bc55 	b.w	8003264 <HAL_RCC_OscConfig+0x106c>
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029c2:	2202      	movs	r2, #2
 80029c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029e6:	2202      	movs	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f2a3 	rbit	r2, r3
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 8002a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a32:	2102      	movs	r1, #2
 8002a34:	6019      	str	r1, [r3, #0]
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f1a3 	rbit	r1, r3
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a4c:	6019      	str	r1, [r3, #0]
  return result;
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d197      	bne.n	80029a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 81a1 	beq.w	8002dcc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a90:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d116      	bne.n	8002aca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 8002aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	61d3      	str	r3, [r2, #28]
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ac2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCC_OscConfig+0x93c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11a      	bne.n	8002b0c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_RCC_OscConfig+0x93c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_RCC_OscConfig+0x93c>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fedd 	bl	80018a0 <HAL_GetTick>
 8002ae6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	e009      	b.n	8002b00 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fe fed8 	bl	80018a0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	; 0x64
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e3b1      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_RCC_OscConfig+0x93c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10d      	bne.n	8002b38 <HAL_RCC_OscConfig+0x940>
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a02      	ldr	r2, [pc, #8]	; (8002b2c <HAL_RCC_OscConfig+0x934>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e03c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x9ac>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	10908120 	.word	0x10908120
 8002b34:	40007000 	.word	0x40007000
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x96a>
 8002b48:	4bc1      	ldr	r3, [pc, #772]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4ac0      	ldr	r2, [pc, #768]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	4bbe      	ldr	r3, [pc, #760]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4abd      	ldr	r2, [pc, #756]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b5a:	f023 0304 	bic.w	r3, r3, #4
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	e020      	b.n	8002ba4 <HAL_RCC_OscConfig+0x9ac>
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x994>
 8002b72:	4bb7      	ldr	r3, [pc, #732]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4ab6      	ldr	r2, [pc, #728]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6213      	str	r3, [r2, #32]
 8002b7e:	4bb4      	ldr	r3, [pc, #720]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4ab3      	ldr	r2, [pc, #716]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x9ac>
 8002b8c:	4bb0      	ldr	r3, [pc, #704]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4aaf      	ldr	r2, [pc, #700]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6213      	str	r3, [r2, #32]
 8002b98:	4bad      	ldr	r3, [pc, #692]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4aac      	ldr	r2, [pc, #688]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8081 	beq.w	8002cb8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fe73 	bl	80018a0 <HAL_GetTick>
 8002bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fe6e 	bl	80018a0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e345      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c04:	2202      	movs	r2, #2
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c1e:	601a      	str	r2, [r3, #0]
  return result;
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0xa4c>
 8002c3e:	4b84      	ldr	r3, [pc, #528]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	e013      	b.n	8002c6c <HAL_RCC_OscConfig+0xa74>
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	fa93 f2a3 	rbit	r2, r3
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c70:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c74:	2102      	movs	r1, #2
 8002c76:	6011      	str	r1, [r2, #0]
 8002c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	fa92 f1a2 	rbit	r1, r2
 8002c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c8e:	6011      	str	r1, [r2, #0]
  return result;
 8002c90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c94:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	fab2 f282 	clz	r2, r2
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f002 021f 	and.w	r2, r2, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d084      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x9c8>
 8002cb6:	e07f      	b.n	8002db8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fdf2 	bl	80018a0 <HAL_GetTick>
 8002cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	e00b      	b.n	8002cda <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe fded 	bl	80018a0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e2c4      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d06:	2202      	movs	r2, #2
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d20:	601a      	str	r2, [r3, #0]
  return result;
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d102      	bne.n	8002d46 <HAL_RCC_OscConfig+0xb4e>
 8002d40:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	e013      	b.n	8002d6e <HAL_RCC_OscConfig+0xb76>
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	fa93 f2a3 	rbit	r2, r3
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d72:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d76:	2102      	movs	r1, #2
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	fa92 f1a2 	rbit	r1, r2
 8002d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d90:	6011      	str	r1, [r2, #0]
  return result;
 8002d92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d96:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d184      	bne.n	8002cc2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8242 	beq.w	8003262 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_RCC_OscConfig+0xc58>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	f000 8213 	beq.w	8003212 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	f040 8162 	bne.w	80030c2 <HAL_RCC_OscConfig+0xeca>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e22:	601a      	str	r2, [r3, #0]
  return result;
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fd2c 	bl	80018a0 <HAL_GetTick>
 8002e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	e00c      	b.n	8002e68 <HAL_RCC_OscConfig+0xc70>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fd24 	bl	80018a0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1fd      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e8c:	601a      	str	r2, [r3, #0]
  return result;
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0xcba>
 8002eac:	4bb0      	ldr	r3, [pc, #704]	; (8003170 <HAL_RCC_OscConfig+0xf78>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	e027      	b.n	8002f02 <HAL_RCC_OscConfig+0xd0a>
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	4b9c      	ldr	r3, [pc, #624]	; (8003170 <HAL_RCC_OscConfig+0xf78>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f06:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f0e:	6011      	str	r1, [r2, #0]
 8002f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f14:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	fa92 f1a2 	rbit	r1, r2
 8002f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f22:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f26:	6011      	str	r1, [r2, #0]
  return result;
 8002f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f002 021f 	and.w	r2, r2, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d182      	bne.n	8002e54 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4e:	4b88      	ldr	r3, [pc, #544]	; (8003170 <HAL_RCC_OscConfig+0xf78>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	497f      	ldr	r1, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0xf78>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f9a:	601a      	str	r2, [r3, #0]
  return result;
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fa4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2301      	movs	r3, #1
 8002fba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fc70 	bl	80018a0 <HAL_GetTick>
 8002fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc4:	e009      	b.n	8002fda <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe fc6b 	bl	80018a0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e144      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ffe:	601a      	str	r2, [r3, #0]
  return result;
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003008:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_RCC_OscConfig+0xe2c>
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <HAL_RCC_OscConfig+0xf78>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	e027      	b.n	8003074 <HAL_RCC_OscConfig+0xe7c>
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800302c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fa93 f2a3 	rbit	r2, r3
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_OscConfig+0xf78>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003078:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800307c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003086:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	fa92 f1a2 	rbit	r1, r2
 8003090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003094:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003098:	6011      	str	r1, [r2, #0]
  return result;
 800309a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0220 	orr.w	r2, r2, #32
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d082      	beq.n	8002fc6 <HAL_RCC_OscConfig+0xdce>
 80030c0:	e0cf      	b.n	8003262 <HAL_RCC_OscConfig+0x106a>
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	fa93 f2a3 	rbit	r2, r3
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030e6:	601a      	str	r2, [r3, #0]
  return result;
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	461a      	mov	r2, r3
 8003104:	2300      	movs	r3, #0
 8003106:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fbca 	bl	80018a0 <HAL_GetTick>
 800310c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003110:	e009      	b.n	8003126 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe fbc5 	bl	80018a0 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e09e      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800312e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800314a:	601a      	str	r2, [r3, #0]
  return result;
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003154:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d104      	bne.n	8003174 <HAL_RCC_OscConfig+0xf7c>
 800316a:	4b01      	ldr	r3, [pc, #4]	; (8003170 <HAL_RCC_OscConfig+0xf78>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e029      	b.n	80031c4 <HAL_RCC_OscConfig+0xfcc>
 8003170:	40021000 	.word	0x40021000
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800317c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCC_OscConfig+0x1078>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d0:	6011      	str	r1, [r2, #0]
 80031d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fa92 f1a2 	rbit	r1, r2
 80031e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031e8:	6011      	str	r1, [r2, #0]
  return result;
 80031ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	fab2 f282 	clz	r2, r2
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	f042 0220 	orr.w	r2, r2, #32
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f002 021f 	and.w	r2, r2, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d180      	bne.n	8003112 <HAL_RCC_OscConfig+0xf1a>
 8003210:	e027      	b.n	8003262 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e01e      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_OscConfig+0x1078>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800322e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003232:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	429a      	cmp	r2, r3
 8003244:	d10b      	bne.n	800325e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003246:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800324a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800325a:	429a      	cmp	r2, r3
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b09e      	sub	sp, #120	; 0x78
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e162      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b8d      	ldr	r3, [pc, #564]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	498b      	ldr	r1, [pc, #556]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b89      	ldr	r3, [pc, #548]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e14a      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b82      	ldr	r3, [pc, #520]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	497f      	ldr	r1, [pc, #508]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80dc 	beq.w	80034a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d13c      	bne.n	800336a <HAL_RCC_ClockConfig+0xf6>
 80032f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_RCC_ClockConfig+0xa6>
 8003314:	4b6f      	ldr	r3, [pc, #444]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	e00f      	b.n	800333a <HAL_RCC_ClockConfig+0xc6>
 800331a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	667b      	str	r3, [r7, #100]	; 0x64
 8003328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800332c:	663b      	str	r3, [r7, #96]	; 0x60
 800332e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003336:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800333e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003342:	fa92 f2a2 	rbit	r2, r2
 8003346:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003348:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800334a:	fab2 f282 	clz	r2, r2
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f042 0220 	orr.w	r2, r2, #32
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	f002 021f 	and.w	r2, r2, #31
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d17b      	bne.n	800345e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0f3      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d13c      	bne.n	80033ec <HAL_RCC_ClockConfig+0x178>
 8003372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003376:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_RCC_ClockConfig+0x128>
 8003396:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e00f      	b.n	80033bc <HAL_RCC_ClockConfig+0x148>
 800339c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	647b      	str	r3, [r7, #68]	; 0x44
 80033aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ae:	643b      	str	r3, [r7, #64]	; 0x40
 80033b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80033c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f002 021f 	and.w	r2, r2, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d13a      	bne.n	800345e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b2      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
 80033ec:	2302      	movs	r3, #2
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_RCC_ClockConfig+0x1a0>
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e00d      	b.n	8003430 <HAL_RCC_ClockConfig+0x1bc>
 8003414:	2302      	movs	r3, #2
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
 8003420:	2302      	movs	r3, #2
 8003422:	623b      	str	r3, [r7, #32]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2202      	movs	r2, #2
 8003432:	61ba      	str	r2, [r7, #24]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	fa92 f2a2 	rbit	r2, r2
 800343a:	617a      	str	r2, [r7, #20]
  return result;
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	fab2 f282 	clz	r2, r2
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	f042 0220 	orr.w	r2, r2, #32
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f002 021f 	and.w	r2, r2, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e079      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	491a      	ldr	r1, [pc, #104]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003470:	f7fe fa16 	bl	80018a0 <HAL_GetTick>
 8003474:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7fe fa12 	bl	80018a0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e061      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 020c 	and.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	429a      	cmp	r2, r3
 800349e:	d1eb      	bne.n	8003478 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d214      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	4906      	ldr	r1, [pc, #24]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e040      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCC_ClockConfig+0x2e8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	491a      	ldr	r1, [pc, #104]	; (800355c <HAL_RCC_ClockConfig+0x2e8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_RCC_ClockConfig+0x2e8>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4912      	ldr	r1, [pc, #72]	; (800355c <HAL_RCC_ClockConfig+0x2e8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003516:	f000 f829 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800351a:	4601      	mov	r1, r0
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_RCC_ClockConfig+0x2e8>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003524:	22f0      	movs	r2, #240	; 0xf0
 8003526:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	fa92 f2a2 	rbit	r2, r2
 800352e:	60fa      	str	r2, [r7, #12]
  return result;
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	fab2 f282 	clz	r2, r2
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	40d3      	lsrs	r3, r2
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x2ec>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	fa21 f303 	lsr.w	r3, r1, r3
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_RCC_ClockConfig+0x2f0>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_RCC_ClockConfig+0x2f4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe f964 	bl	8001818 <HAL_InitTick>
  
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3778      	adds	r7, #120	; 0x78
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	080062c8 	.word	0x080062c8
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b08b      	sub	sp, #44	; 0x2c
 8003570:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b04      	cmp	r3, #4
 8003594:	d002      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x30>
 8003596:	2b08      	cmp	r3, #8
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x36>
 800359a:	e03c      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_RCC_GetSysClockFreq+0xc4>)
 800359e:	623b      	str	r3, [r7, #32]
      break;
 80035a0:	e03c      	b.n	800361c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80035ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	fa92 f2a2 	rbit	r2, r2
 80035b4:	607a      	str	r2, [r7, #4]
  return result;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	fab2 f282 	clz	r2, r2
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	40d3      	lsrs	r3, r2
 80035c0:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035c6:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	220f      	movs	r2, #15
 80035d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	fa92 f2a2 	rbit	r2, r2
 80035d8:	60fa      	str	r2, [r7, #12]
  return result;
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	fab2 f282 	clz	r2, r2
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	40d3      	lsrs	r3, r2
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035f4:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
 8003604:	e004      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	4a0c      	ldr	r2, [pc, #48]	; (800363c <HAL_RCC_GetSysClockFreq+0xd0>)
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	623b      	str	r3, [r7, #32]
      break;
 8003614:	e002      	b.n	800361c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003618:	623b      	str	r3, [r7, #32]
      break;
 800361a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361c:	6a3b      	ldr	r3, [r7, #32]
}
 800361e:	4618      	mov	r0, r3
 8003620:	372c      	adds	r7, #44	; 0x2c
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	007a1200 	.word	0x007a1200
 8003634:	080062d8 	.word	0x080062d8
 8003638:	080062e8 	.word	0x080062e8
 800363c:	003d0900 	.word	0x003d0900

08003640 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b092      	sub	sp, #72	; 0x48
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80d4 	beq.w	800380c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003664:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10e      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	4a4a      	ldr	r2, [pc, #296]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367a:	61d3      	str	r3, [r2, #28]
 800367c:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369a:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a41      	ldr	r2, [pc, #260]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe f8fb 	bl	80018a0 <HAL_GetTick>
 80036aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe f8f7 	bl	80018a0 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b64      	cmp	r3, #100	; 0x64
 80036ba:	d901      	bls.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e169      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8084 	beq.w	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d07c      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ec:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	461a      	mov	r2, r3
 8003716:	2301      	movs	r3, #1
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800371e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	461a      	mov	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800373e:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003742:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04b      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fe f8a7 	bl	80018a0 <HAL_GetTick>
 8003752:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fe f8a3 	bl	80018a0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e113      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800376c:	2302      	movs	r3, #2
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
 8003778:	2302      	movs	r3, #2
 800377a:	623b      	str	r3, [r7, #32]
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	61fb      	str	r3, [r7, #28]
  return result;
 8003784:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d108      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800379a:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	e00d      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
 80037a8:	10908100 	.word	0x10908100
 80037ac:	2302      	movs	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	4b78      	ldr	r3, [pc, #480]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2202      	movs	r2, #2
 80037be:	613a      	str	r2, [r7, #16]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	fa92 f2a2 	rbit	r2, r2
 80037c6:	60fa      	str	r2, [r7, #12]
  return result;
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	fab2 f282 	clz	r2, r2
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f002 021f 	and.w	r2, r2, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0b7      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037e6:	4b6d      	ldr	r3, [pc, #436]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	496a      	ldr	r1, [pc, #424]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a65      	ldr	r2, [pc, #404]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003818:	4b60      	ldr	r3, [pc, #384]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f023 0203 	bic.w	r2, r3, #3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	495d      	ldr	r1, [pc, #372]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003836:	4b59      	ldr	r3, [pc, #356]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4956      	ldr	r1, [pc, #344]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	494e      	ldr	r1, [pc, #312]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003872:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f023 0210 	bic.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4947      	ldr	r1, [pc, #284]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003890:	4b42      	ldr	r3, [pc, #264]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	493f      	ldr	r1, [pc, #252]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f023 0220 	bic.w	r2, r3, #32
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4938      	ldr	r1, [pc, #224]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	4930      	ldr	r1, [pc, #192]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038ea:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4929      	ldr	r1, [pc, #164]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003908:	4b24      	ldr	r3, [pc, #144]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4921      	ldr	r1, [pc, #132]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	491a      	ldr	r1, [pc, #104]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003934:	4313      	orrs	r3, r2
 8003936:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	4912      	ldr	r1, [pc, #72]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003952:	4313      	orrs	r3, r2
 8003954:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	490b      	ldr	r1, [pc, #44]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	4903      	ldr	r1, [pc, #12]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3748      	adds	r7, #72	; 0x48
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000

080039a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e049      	b.n	8003a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fe1e 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f000 fe68 	bl	80046b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e049      	b.n	8003af4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f841 	bl	8003afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f000 fe11 	bl	80046b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e03c      	b.n	8003bb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d109      	bne.n	8003b56 <HAL_TIM_PWM_Start_DMA+0x46>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	e02f      	b.n	8003bb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d109      	bne.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x60>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e022      	b.n	8003bb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d109      	bne.n	8003b8a <HAL_TIM_PWM_Start_DMA+0x7a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	bf0c      	ite	eq
 8003b82:	2301      	moveq	r3, #1
 8003b84:	2300      	movne	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e015      	b.n	8003bb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d109      	bne.n	8003ba4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e1a6      	b.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e03c      	b.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x142>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d109      	bne.n	8003bf2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	e02f      	b.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x142>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d109      	bne.n	8003c0c <HAL_TIM_PWM_Start_DMA+0xfc>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e022      	b.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x142>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d109      	bne.n	8003c26 <HAL_TIM_PWM_Start_DMA+0x116>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e015      	b.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x142>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d109      	bne.n	8003c40 <HAL_TIM_PWM_Start_DMA+0x130>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e008      	b.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x142>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d034      	beq.n	8003cc0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x152>
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e152      	b.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <HAL_TIM_PWM_Start_DMA+0x166>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c74:	e026      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x176>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	e01e      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Start_DMA+0x186>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c94:	e016      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start_DMA+0x196>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ca4:	e00e      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb4:	e006      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cbe:	e001      	b.n	8003cc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e123      	b.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	f200 80ae 	bhi.w	8003e28 <HAL_TIM_PWM_Start_DMA+0x318>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003e29 	.word	0x08003e29
 8003cdc:	08003e29 	.word	0x08003e29
 8003ce0:	08003e29 	.word	0x08003e29
 8003ce4:	08003d51 	.word	0x08003d51
 8003ce8:	08003e29 	.word	0x08003e29
 8003cec:	08003e29 	.word	0x08003e29
 8003cf0:	08003e29 	.word	0x08003e29
 8003cf4:	08003d99 	.word	0x08003d99
 8003cf8:	08003e29 	.word	0x08003e29
 8003cfc:	08003e29 	.word	0x08003e29
 8003d00:	08003e29 	.word	0x08003e29
 8003d04:	08003de1 	.word	0x08003de1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	4a81      	ldr	r2, [pc, #516]	; (8003f14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	4a80      	ldr	r2, [pc, #512]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	4a7f      	ldr	r2, [pc, #508]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3334      	adds	r3, #52	; 0x34
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	887b      	ldrh	r3, [r7, #2]
 8003d30:	f7fd ff3e 	bl	8001bb0 <HAL_DMA_Start_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0e6      	b.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	60da      	str	r2, [r3, #12]
      break;
 8003d4e:	e06e      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	4a6f      	ldr	r2, [pc, #444]	; (8003f14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	4a6e      	ldr	r2, [pc, #440]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	4a6d      	ldr	r2, [pc, #436]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3338      	adds	r3, #56	; 0x38
 8003d74:	461a      	mov	r2, r3
 8003d76:	887b      	ldrh	r3, [r7, #2]
 8003d78:	f7fd ff1a 	bl	8001bb0 <HAL_DMA_Start_IT>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0c2      	b.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d94:	60da      	str	r2, [r3, #12]
      break;
 8003d96:	e04a      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a5d      	ldr	r2, [pc, #372]	; (8003f14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a5c      	ldr	r2, [pc, #368]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a5b      	ldr	r2, [pc, #364]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	333c      	adds	r3, #60	; 0x3c
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	f7fd fef6 	bl	8001bb0 <HAL_DMA_Start_IT>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e09e      	b.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	60da      	str	r2, [r3, #12]
      break;
 8003dde:	e026      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	4a4b      	ldr	r2, [pc, #300]	; (8003f14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	4a4a      	ldr	r2, [pc, #296]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	4a49      	ldr	r2, [pc, #292]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3340      	adds	r3, #64	; 0x40
 8003e04:	461a      	mov	r2, r3
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	f7fd fed2 	bl	8001bb0 <HAL_DMA_Start_IT>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07a      	b.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e24:	60da      	str	r2, [r3, #12]
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d16a      	bne.n	8003f0a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 f839 	bl	8004eb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a36      	ldr	r2, [pc, #216]	; (8003f20 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <HAL_TIM_PWM_Start_DMA+0x364>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a34      	ldr	r2, [pc, #208]	; (8003f24 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <HAL_TIM_PWM_Start_DMA+0x364>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a33      	ldr	r2, [pc, #204]	; (8003f28 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <HAL_TIM_PWM_Start_DMA+0x364>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a31      	ldr	r2, [pc, #196]	; (8003f2c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIM_PWM_Start_DMA+0x364>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a30      	ldr	r2, [pc, #192]	; (8003f30 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_PWM_Start_DMA+0x368>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_PWM_Start_DMA+0x36a>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d018      	beq.n	8003eca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d013      	beq.n	8003eca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d009      	beq.n	8003eca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d115      	bne.n	8003ef6 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d015      	beq.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d011      	beq.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	e008      	b.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e000      	b.n	8003f0a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	080045a5 	.word	0x080045a5
 8003f18:	0800464d 	.word	0x0800464d
 8003f1c:	08004513 	.word	0x08004513
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	00010007 	.word	0x00010007

08003f40 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d855      	bhi.n	8004000 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08004001 	.word	0x08004001
 8003f64:	08004001 	.word	0x08004001
 8003f68:	08004001 	.word	0x08004001
 8003f6c:	08003fad 	.word	0x08003fad
 8003f70:	08004001 	.word	0x08004001
 8003f74:	08004001 	.word	0x08004001
 8003f78:	08004001 	.word	0x08004001
 8003f7c:	08003fc9 	.word	0x08003fc9
 8003f80:	08004001 	.word	0x08004001
 8003f84:	08004001 	.word	0x08004001
 8003f88:	08004001 	.word	0x08004001
 8003f8c:	08003fe5 	.word	0x08003fe5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fe62 	bl	8001c6e <HAL_DMA_Abort_IT>
      break;
 8003faa:	e02c      	b.n	8004006 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd fe54 	bl	8001c6e <HAL_DMA_Abort_IT>
      break;
 8003fc6:	e01e      	b.n	8004006 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd fe46 	bl	8001c6e <HAL_DMA_Abort_IT>
      break;
 8003fe2:	e010      	b.n	8004006 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ff2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd fe38 	bl	8001c6e <HAL_DMA_Abort_IT>
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	bf00      	nop
  }

  if (status == HAL_OK)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 8081 	bne.w	8004110 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 ff4c 	bl	8004eb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3e      	ldr	r2, [pc, #248]	; (800411c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3d      	ldr	r2, [pc, #244]	; (8004120 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3b      	ldr	r2, [pc, #236]	; (8004124 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3a      	ldr	r2, [pc, #232]	; (8004128 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a38      	ldr	r2, [pc, #224]	; (800412c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_TIM_PWM_Stop_DMA+0x112>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d017      	beq.n	8004088 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6a1a      	ldr	r2, [r3, #32]
 800405e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10f      	bne.n	8004088 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6a1a      	ldr	r2, [r3, #32]
 800406e:	f240 4344 	movw	r3, #1092	; 0x444
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d107      	bne.n	8004088 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a1a      	ldr	r2, [r3, #32]
 800408e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10f      	bne.n	80040b8 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a1a      	ldr	r2, [r3, #32]
 800409e:	f240 4344 	movw	r3, #1092	; 0x444
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d107      	bne.n	80040b8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c6:	e023      	b.n	8004110 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d104      	bne.n	80040d8 <HAL_TIM_PWM_Stop_DMA+0x198>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d6:	e01b      	b.n	8004110 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d104      	bne.n	80040e8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e6:	e013      	b.n	8004110 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	d104      	bne.n	80040f8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f6:	e00b      	b.n	8004110 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d104      	bne.n	8004108 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004106:	e003      	b.n	8004110 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40013400 	.word	0x40013400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800414a:	2302      	movs	r3, #2
 800414c:	e0ff      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b14      	cmp	r3, #20
 800415a:	f200 80f0 	bhi.w	800433e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	080041b9 	.word	0x080041b9
 8004168:	0800433f 	.word	0x0800433f
 800416c:	0800433f 	.word	0x0800433f
 8004170:	0800433f 	.word	0x0800433f
 8004174:	080041f9 	.word	0x080041f9
 8004178:	0800433f 	.word	0x0800433f
 800417c:	0800433f 	.word	0x0800433f
 8004180:	0800433f 	.word	0x0800433f
 8004184:	0800423b 	.word	0x0800423b
 8004188:	0800433f 	.word	0x0800433f
 800418c:	0800433f 	.word	0x0800433f
 8004190:	0800433f 	.word	0x0800433f
 8004194:	0800427b 	.word	0x0800427b
 8004198:	0800433f 	.word	0x0800433f
 800419c:	0800433f 	.word	0x0800433f
 80041a0:	0800433f 	.word	0x0800433f
 80041a4:	080042bd 	.word	0x080042bd
 80041a8:	0800433f 	.word	0x0800433f
 80041ac:	0800433f 	.word	0x0800433f
 80041b0:	0800433f 	.word	0x0800433f
 80041b4:	080042fd 	.word	0x080042fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fb08 	bl	80047d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0208 	orr.w	r2, r2, #8
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	619a      	str	r2, [r3, #24]
      break;
 80041f6:	e0a5      	b.n	8004344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fb78 	bl	80048f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	021a      	lsls	r2, r3, #8
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	619a      	str	r2, [r3, #24]
      break;
 8004238:	e084      	b.n	8004344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fbe1 	bl	8004a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0208 	orr.w	r2, r2, #8
 8004254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0204 	bic.w	r2, r2, #4
 8004264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	61da      	str	r2, [r3, #28]
      break;
 8004278:	e064      	b.n	8004344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fc49 	bl	8004b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69d9      	ldr	r1, [r3, #28]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	021a      	lsls	r2, r3, #8
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	61da      	str	r2, [r3, #28]
      break;
 80042ba:	e043      	b.n	8004344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fc92 	bl	8004bec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0208 	orr.w	r2, r2, #8
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042fa:	e023      	b.n	8004344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fcd6 	bl	8004cb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004316:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800433c:	e002      	b.n	8004344 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
      break;
 8004342:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800434c:	7dfb      	ldrb	r3, [r7, #23]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop

08004358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIM_ConfigClockSource+0x1c>
 8004370:	2302      	movs	r3, #2
 8004372:	e0b6      	b.n	80044e2 <HAL_TIM_ConfigClockSource+0x18a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004392:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800439e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b0:	d03e      	beq.n	8004430 <HAL_TIM_ConfigClockSource+0xd8>
 80043b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b6:	f200 8087 	bhi.w	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	f000 8086 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x176>
 80043c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c6:	d87f      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	2b70      	cmp	r3, #112	; 0x70
 80043ca:	d01a      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xaa>
 80043cc:	2b70      	cmp	r3, #112	; 0x70
 80043ce:	d87b      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043d0:	2b60      	cmp	r3, #96	; 0x60
 80043d2:	d050      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x11e>
 80043d4:	2b60      	cmp	r3, #96	; 0x60
 80043d6:	d877      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043d8:	2b50      	cmp	r3, #80	; 0x50
 80043da:	d03c      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0xfe>
 80043dc:	2b50      	cmp	r3, #80	; 0x50
 80043de:	d873      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d058      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x13e>
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d86f      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043e8:	2b30      	cmp	r3, #48	; 0x30
 80043ea:	d064      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15e>
 80043ec:	2b30      	cmp	r3, #48	; 0x30
 80043ee:	d86b      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d060      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15e>
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d867      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05c      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15e>
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d05a      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15e>
 8004400:	e062      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f000 fd2f 	bl	8004e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	609a      	str	r2, [r3, #8]
      break;
 800442e:	e04f      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6899      	ldr	r1, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f000 fd18 	bl	8004e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004452:	609a      	str	r2, [r3, #8]
      break;
 8004454:	e03c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 fc8c 	bl	8004d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2150      	movs	r1, #80	; 0x50
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fce5 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004474:	e02c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	f000 fcab 	bl	8004dde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2160      	movs	r1, #96	; 0x60
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fcd5 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004494:	e01c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f000 fc6c 	bl	8004d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fcc5 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 80044b4:	e00c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f000 fcbc 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 80044c6:	e003      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e000      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d107      	bne.n	800453a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004538:	e02a      	b.n	8004590 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2202      	movs	r2, #2
 8004548:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004552:	e01d      	b.n	8004590 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d107      	bne.n	800456e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2204      	movs	r2, #4
 8004562:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	e010      	b.n	8004590 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2208      	movs	r2, #8
 800457c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004586:	e003      	b.n	8004590 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7ff ffb4 	bl	80044fe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d10b      	bne.n	80045d4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d136      	bne.n	8004638 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d2:	e031      	b.n	8004638 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10b      	bne.n	80045f6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2202      	movs	r2, #2
 80045e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d125      	bne.n	8004638 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f4:	e020      	b.n	8004638 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d10b      	bne.n	8004618 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2204      	movs	r2, #4
 8004604:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d114      	bne.n	8004638 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004616:	e00f      	b.n	8004638 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d10a      	bne.n	8004638 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2208      	movs	r2, #8
 8004626:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d103      	bne.n	8004638 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7fc fab3 	bl	8000ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d103      	bne.n	800466c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	771a      	strb	r2, [r3, #28]
 800466a:	e019      	b.n	80046a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	d103      	bne.n	800467e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2202      	movs	r2, #2
 800467a:	771a      	strb	r2, [r3, #28]
 800467c:	e010      	b.n	80046a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d103      	bne.n	8004690 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2204      	movs	r2, #4
 800468c:	771a      	strb	r2, [r3, #28]
 800468e:	e007      	b.n	80046a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d102      	bne.n	80046a0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2208      	movs	r2, #8
 800469e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff ff22 	bl	80044ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a3c      	ldr	r2, [pc, #240]	; (80047b8 <TIM_Base_SetConfig+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00f      	beq.n	80046ec <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d00b      	beq.n	80046ec <TIM_Base_SetConfig+0x38>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a39      	ldr	r2, [pc, #228]	; (80047bc <TIM_Base_SetConfig+0x108>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0x38>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a38      	ldr	r2, [pc, #224]	; (80047c0 <TIM_Base_SetConfig+0x10c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x38>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a37      	ldr	r2, [pc, #220]	; (80047c4 <TIM_Base_SetConfig+0x110>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2d      	ldr	r2, [pc, #180]	; (80047b8 <TIM_Base_SetConfig+0x104>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01b      	beq.n	800473e <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d017      	beq.n	800473e <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <TIM_Base_SetConfig+0x108>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a29      	ldr	r2, [pc, #164]	; (80047c0 <TIM_Base_SetConfig+0x10c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00f      	beq.n	800473e <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a28      	ldr	r2, [pc, #160]	; (80047c4 <TIM_Base_SetConfig+0x110>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_Base_SetConfig+0x8a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <TIM_Base_SetConfig+0x114>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_Base_SetConfig+0x8a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a26      	ldr	r2, [pc, #152]	; (80047cc <TIM_Base_SetConfig+0x118>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_Base_SetConfig+0x8a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <TIM_Base_SetConfig+0x11c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d108      	bne.n	8004750 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a10      	ldr	r2, [pc, #64]	; (80047b8 <TIM_Base_SetConfig+0x104>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00f      	beq.n	800479c <TIM_Base_SetConfig+0xe8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <TIM_Base_SetConfig+0x110>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_Base_SetConfig+0xe8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <TIM_Base_SetConfig+0x114>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_Base_SetConfig+0xe8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <TIM_Base_SetConfig+0x118>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0xe8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <TIM_Base_SetConfig+0x11c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d103      	bne.n	80047a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	615a      	str	r2, [r3, #20]
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800

080047d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0302 	bic.w	r3, r3, #2
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <TIM_OC1_SetConfig+0x10c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00f      	beq.n	8004854 <TIM_OC1_SetConfig+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <TIM_OC1_SetConfig+0x110>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00b      	beq.n	8004854 <TIM_OC1_SetConfig+0x80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <TIM_OC1_SetConfig+0x114>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d007      	beq.n	8004854 <TIM_OC1_SetConfig+0x80>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a29      	ldr	r2, [pc, #164]	; (80048ec <TIM_OC1_SetConfig+0x118>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d003      	beq.n	8004854 <TIM_OC1_SetConfig+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <TIM_OC1_SetConfig+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d10c      	bne.n	800486e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0308 	bic.w	r3, r3, #8
 800485a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <TIM_OC1_SetConfig+0x10c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00f      	beq.n	8004896 <TIM_OC1_SetConfig+0xc2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <TIM_OC1_SetConfig+0x110>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00b      	beq.n	8004896 <TIM_OC1_SetConfig+0xc2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <TIM_OC1_SetConfig+0x114>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <TIM_OC1_SetConfig+0xc2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <TIM_OC1_SetConfig+0x118>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_OC1_SetConfig+0xc2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <TIM_OC1_SetConfig+0x11c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d111      	bne.n	80048ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	621a      	str	r2, [r3, #32]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40013400 	.word	0x40013400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800

080048f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 0210 	bic.w	r2, r3, #16
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0320 	bic.w	r3, r3, #32
 8004942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <TIM_OC2_SetConfig+0x100>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_OC2_SetConfig+0x6c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <TIM_OC2_SetConfig+0x104>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10d      	bne.n	800497c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <TIM_OC2_SetConfig+0x100>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00f      	beq.n	80049a4 <TIM_OC2_SetConfig+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <TIM_OC2_SetConfig+0x104>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_OC2_SetConfig+0xb0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <TIM_OC2_SetConfig+0x108>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_OC2_SetConfig+0xb0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a1a      	ldr	r2, [pc, #104]	; (8004a00 <TIM_OC2_SetConfig+0x10c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC2_SetConfig+0xb0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <TIM_OC2_SetConfig+0x110>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d113      	bne.n	80049cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049aa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049b2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <TIM_OC3_SetConfig+0xfc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_OC3_SetConfig+0x6a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <TIM_OC3_SetConfig+0x100>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d10d      	bne.n	8004a8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <TIM_OC3_SetConfig+0xfc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00f      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xae>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <TIM_OC3_SetConfig+0x100>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xae>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <TIM_OC3_SetConfig+0x104>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xae>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <TIM_OC3_SetConfig+0x108>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_OC3_SetConfig+0xae>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <TIM_OC3_SetConfig+0x10c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d113      	bne.n	8004ade <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	031b      	lsls	r3, r3, #12
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <TIM_OC4_SetConfig+0xc0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00f      	beq.n	8004b9c <TIM_OC4_SetConfig+0x84>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <TIM_OC4_SetConfig+0xc4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_OC4_SetConfig+0x84>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <TIM_OC4_SetConfig+0xc8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <TIM_OC4_SetConfig+0x84>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <TIM_OC4_SetConfig+0xcc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_OC4_SetConfig+0x84>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <TIM_OC4_SetConfig+0xd0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d109      	bne.n	8004bb0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	019b      	lsls	r3, r3, #6
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	40013400 	.word	0x40013400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40014400 	.word	0x40014400
 8004be8:	40014800 	.word	0x40014800

08004bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <TIM_OC5_SetConfig+0xb4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00f      	beq.n	8004c66 <TIM_OC5_SetConfig+0x7a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <TIM_OC5_SetConfig+0xb8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <TIM_OC5_SetConfig+0x7a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <TIM_OC5_SetConfig+0xbc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <TIM_OC5_SetConfig+0x7a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a14      	ldr	r2, [pc, #80]	; (8004cac <TIM_OC5_SetConfig+0xc0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_OC5_SetConfig+0x7a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <TIM_OC5_SetConfig+0xc4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d109      	bne.n	8004c7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800

08004cb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	051b      	lsls	r3, r3, #20
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <TIM_OC6_SetConfig+0xb8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_OC6_SetConfig+0x7c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <TIM_OC6_SetConfig+0xbc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00b      	beq.n	8004d30 <TIM_OC6_SetConfig+0x7c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <TIM_OC6_SetConfig+0xc0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_OC6_SetConfig+0x7c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC6_SetConfig+0xc4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_OC6_SetConfig+0x7c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <TIM_OC6_SetConfig+0xc8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d109      	bne.n	8004d44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	029b      	lsls	r3, r3, #10
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 030a 	bic.w	r3, r3, #10
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0210 	bic.w	r2, r3, #16
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	031b      	lsls	r3, r3, #12
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f043 0307 	orr.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	021a      	lsls	r2, r3, #8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1a      	ldr	r2, [r3, #32]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e063      	b.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2b      	ldr	r2, [pc, #172]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d013      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10c      	bne.n	8004fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40014000 	.word	0x40014000

08005000 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005018:	2302      	movs	r3, #2
 800501a:	e065      	b.n	80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d115      	bne.n	80050d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	051b      	lsls	r3, r3, #20
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40013400 	.word	0x40013400

080050fc <__libc_init_array>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	4d0d      	ldr	r5, [pc, #52]	; (8005134 <__libc_init_array+0x38>)
 8005100:	4c0d      	ldr	r4, [pc, #52]	; (8005138 <__libc_init_array+0x3c>)
 8005102:	1b64      	subs	r4, r4, r5
 8005104:	10a4      	asrs	r4, r4, #2
 8005106:	2600      	movs	r6, #0
 8005108:	42a6      	cmp	r6, r4
 800510a:	d109      	bne.n	8005120 <__libc_init_array+0x24>
 800510c:	4d0b      	ldr	r5, [pc, #44]	; (800513c <__libc_init_array+0x40>)
 800510e:	4c0c      	ldr	r4, [pc, #48]	; (8005140 <__libc_init_array+0x44>)
 8005110:	f001 f8cc 	bl	80062ac <_init>
 8005114:	1b64      	subs	r4, r4, r5
 8005116:	10a4      	asrs	r4, r4, #2
 8005118:	2600      	movs	r6, #0
 800511a:	42a6      	cmp	r6, r4
 800511c:	d105      	bne.n	800512a <__libc_init_array+0x2e>
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	f855 3b04 	ldr.w	r3, [r5], #4
 8005124:	4798      	blx	r3
 8005126:	3601      	adds	r6, #1
 8005128:	e7ee      	b.n	8005108 <__libc_init_array+0xc>
 800512a:	f855 3b04 	ldr.w	r3, [r5], #4
 800512e:	4798      	blx	r3
 8005130:	3601      	adds	r6, #1
 8005132:	e7f2      	b.n	800511a <__libc_init_array+0x1e>
 8005134:	080064d0 	.word	0x080064d0
 8005138:	080064d0 	.word	0x080064d0
 800513c:	080064d0 	.word	0x080064d0
 8005140:	080064d4 	.word	0x080064d4

08005144 <memset>:
 8005144:	4402      	add	r2, r0
 8005146:	4603      	mov	r3, r0
 8005148:	4293      	cmp	r3, r2
 800514a:	d100      	bne.n	800514e <memset+0xa>
 800514c:	4770      	bx	lr
 800514e:	f803 1b01 	strb.w	r1, [r3], #1
 8005152:	e7f9      	b.n	8005148 <memset+0x4>
 8005154:	0000      	movs	r0, r0
	...

08005158 <tan>:
 8005158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800515a:	ec53 2b10 	vmov	r2, r3, d0
 800515e:	4816      	ldr	r0, [pc, #88]	; (80051b8 <tan+0x60>)
 8005160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005164:	4281      	cmp	r1, r0
 8005166:	dc07      	bgt.n	8005178 <tan+0x20>
 8005168:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80051b0 <tan+0x58>
 800516c:	2001      	movs	r0, #1
 800516e:	b005      	add	sp, #20
 8005170:	f85d eb04 	ldr.w	lr, [sp], #4
 8005174:	f000 bd80 	b.w	8005c78 <__kernel_tan>
 8005178:	4810      	ldr	r0, [pc, #64]	; (80051bc <tan+0x64>)
 800517a:	4281      	cmp	r1, r0
 800517c:	dd09      	ble.n	8005192 <tan+0x3a>
 800517e:	ee10 0a10 	vmov	r0, s0
 8005182:	4619      	mov	r1, r3
 8005184:	f7fb f824 	bl	80001d0 <__aeabi_dsub>
 8005188:	ec41 0b10 	vmov	d0, r0, r1
 800518c:	b005      	add	sp, #20
 800518e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005192:	4668      	mov	r0, sp
 8005194:	f000 f814 	bl	80051c0 <__ieee754_rem_pio2>
 8005198:	0040      	lsls	r0, r0, #1
 800519a:	f000 0002 	and.w	r0, r0, #2
 800519e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051a2:	ed9d 0b00 	vldr	d0, [sp]
 80051a6:	f1c0 0001 	rsb	r0, r0, #1
 80051aa:	f000 fd65 	bl	8005c78 <__kernel_tan>
 80051ae:	e7ed      	b.n	800518c <tan+0x34>
	...
 80051b8:	3fe921fb 	.word	0x3fe921fb
 80051bc:	7fefffff 	.word	0x7fefffff

080051c0 <__ieee754_rem_pio2>:
 80051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	ed2d 8b02 	vpush	{d8}
 80051c8:	ec55 4b10 	vmov	r4, r5, d0
 80051cc:	4bca      	ldr	r3, [pc, #808]	; (80054f8 <__ieee754_rem_pio2+0x338>)
 80051ce:	b08b      	sub	sp, #44	; 0x2c
 80051d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80051d4:	4598      	cmp	r8, r3
 80051d6:	4682      	mov	sl, r0
 80051d8:	9502      	str	r5, [sp, #8]
 80051da:	dc08      	bgt.n	80051ee <__ieee754_rem_pio2+0x2e>
 80051dc:	2200      	movs	r2, #0
 80051de:	2300      	movs	r3, #0
 80051e0:	ed80 0b00 	vstr	d0, [r0]
 80051e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80051e8:	f04f 0b00 	mov.w	fp, #0
 80051ec:	e028      	b.n	8005240 <__ieee754_rem_pio2+0x80>
 80051ee:	4bc3      	ldr	r3, [pc, #780]	; (80054fc <__ieee754_rem_pio2+0x33c>)
 80051f0:	4598      	cmp	r8, r3
 80051f2:	dc78      	bgt.n	80052e6 <__ieee754_rem_pio2+0x126>
 80051f4:	9b02      	ldr	r3, [sp, #8]
 80051f6:	4ec2      	ldr	r6, [pc, #776]	; (8005500 <__ieee754_rem_pio2+0x340>)
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	ee10 0a10 	vmov	r0, s0
 80051fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80054c0 <__ieee754_rem_pio2+0x300>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	4629      	mov	r1, r5
 8005206:	dd39      	ble.n	800527c <__ieee754_rem_pio2+0xbc>
 8005208:	f7fa ffe2 	bl	80001d0 <__aeabi_dsub>
 800520c:	45b0      	cmp	r8, r6
 800520e:	4604      	mov	r4, r0
 8005210:	460d      	mov	r5, r1
 8005212:	d01b      	beq.n	800524c <__ieee754_rem_pio2+0x8c>
 8005214:	a3ac      	add	r3, pc, #688	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x308>)
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f7fa ffd9 	bl	80001d0 <__aeabi_dsub>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	e9ca 2300 	strd	r2, r3, [sl]
 8005226:	4620      	mov	r0, r4
 8005228:	4629      	mov	r1, r5
 800522a:	f7fa ffd1 	bl	80001d0 <__aeabi_dsub>
 800522e:	a3a6      	add	r3, pc, #664	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x308>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f7fa ffcc 	bl	80001d0 <__aeabi_dsub>
 8005238:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800523c:	f04f 0b01 	mov.w	fp, #1
 8005240:	4658      	mov	r0, fp
 8005242:	b00b      	add	sp, #44	; 0x2c
 8005244:	ecbd 8b02 	vpop	{d8}
 8005248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524c:	a3a0      	add	r3, pc, #640	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x310>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fa ffbd 	bl	80001d0 <__aeabi_dsub>
 8005256:	a3a0      	add	r3, pc, #640	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x318>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	4604      	mov	r4, r0
 800525e:	460d      	mov	r5, r1
 8005260:	f7fa ffb6 	bl	80001d0 <__aeabi_dsub>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	e9ca 2300 	strd	r2, r3, [sl]
 800526c:	4620      	mov	r0, r4
 800526e:	4629      	mov	r1, r5
 8005270:	f7fa ffae 	bl	80001d0 <__aeabi_dsub>
 8005274:	a398      	add	r3, pc, #608	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x318>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	e7db      	b.n	8005234 <__ieee754_rem_pio2+0x74>
 800527c:	f7fa ffaa 	bl	80001d4 <__adddf3>
 8005280:	45b0      	cmp	r8, r6
 8005282:	4604      	mov	r4, r0
 8005284:	460d      	mov	r5, r1
 8005286:	d016      	beq.n	80052b6 <__ieee754_rem_pio2+0xf6>
 8005288:	a38f      	add	r3, pc, #572	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x308>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fa ffa1 	bl	80001d4 <__adddf3>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	e9ca 2300 	strd	r2, r3, [sl]
 800529a:	4620      	mov	r0, r4
 800529c:	4629      	mov	r1, r5
 800529e:	f7fa ff97 	bl	80001d0 <__aeabi_dsub>
 80052a2:	a389      	add	r3, pc, #548	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x308>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f7fa ff94 	bl	80001d4 <__adddf3>
 80052ac:	f04f 3bff 	mov.w	fp, #4294967295
 80052b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80052b4:	e7c4      	b.n	8005240 <__ieee754_rem_pio2+0x80>
 80052b6:	a386      	add	r3, pc, #536	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x310>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f7fa ff8a 	bl	80001d4 <__adddf3>
 80052c0:	a385      	add	r3, pc, #532	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x318>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	4604      	mov	r4, r0
 80052c8:	460d      	mov	r5, r1
 80052ca:	f7fa ff83 	bl	80001d4 <__adddf3>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	e9ca 2300 	strd	r2, r3, [sl]
 80052d6:	4620      	mov	r0, r4
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fa ff79 	bl	80001d0 <__aeabi_dsub>
 80052de:	a37e      	add	r3, pc, #504	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x318>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	e7e0      	b.n	80052a8 <__ieee754_rem_pio2+0xe8>
 80052e6:	4b87      	ldr	r3, [pc, #540]	; (8005504 <__ieee754_rem_pio2+0x344>)
 80052e8:	4598      	cmp	r8, r3
 80052ea:	f300 80d9 	bgt.w	80054a0 <__ieee754_rem_pio2+0x2e0>
 80052ee:	f000 fecd 	bl	800608c <fabs>
 80052f2:	ec55 4b10 	vmov	r4, r5, d0
 80052f6:	ee10 0a10 	vmov	r0, s0
 80052fa:	a379      	add	r3, pc, #484	; (adr r3, 80054e0 <__ieee754_rem_pio2+0x320>)
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	4629      	mov	r1, r5
 8005302:	f7fb f91d 	bl	8000540 <__aeabi_dmul>
 8005306:	4b80      	ldr	r3, [pc, #512]	; (8005508 <__ieee754_rem_pio2+0x348>)
 8005308:	2200      	movs	r2, #0
 800530a:	f7fa ff63 	bl	80001d4 <__adddf3>
 800530e:	f7fb fbb1 	bl	8000a74 <__aeabi_d2iz>
 8005312:	4683      	mov	fp, r0
 8005314:	f7fb f8aa 	bl	800046c <__aeabi_i2d>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	ec43 2b18 	vmov	d8, r2, r3
 8005320:	a367      	add	r3, pc, #412	; (adr r3, 80054c0 <__ieee754_rem_pio2+0x300>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fb f90b 	bl	8000540 <__aeabi_dmul>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fa ff4d 	bl	80001d0 <__aeabi_dsub>
 8005336:	a364      	add	r3, pc, #400	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x308>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	4606      	mov	r6, r0
 800533e:	460f      	mov	r7, r1
 8005340:	ec51 0b18 	vmov	r0, r1, d8
 8005344:	f7fb f8fc 	bl	8000540 <__aeabi_dmul>
 8005348:	f1bb 0f1f 	cmp.w	fp, #31
 800534c:	4604      	mov	r4, r0
 800534e:	460d      	mov	r5, r1
 8005350:	dc0d      	bgt.n	800536e <__ieee754_rem_pio2+0x1ae>
 8005352:	4b6e      	ldr	r3, [pc, #440]	; (800550c <__ieee754_rem_pio2+0x34c>)
 8005354:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	4543      	cmp	r3, r8
 800535e:	d006      	beq.n	800536e <__ieee754_rem_pio2+0x1ae>
 8005360:	4622      	mov	r2, r4
 8005362:	462b      	mov	r3, r5
 8005364:	4630      	mov	r0, r6
 8005366:	4639      	mov	r1, r7
 8005368:	f7fa ff32 	bl	80001d0 <__aeabi_dsub>
 800536c:	e00f      	b.n	800538e <__ieee754_rem_pio2+0x1ce>
 800536e:	462b      	mov	r3, r5
 8005370:	4622      	mov	r2, r4
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fa ff2b 	bl	80001d0 <__aeabi_dsub>
 800537a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005384:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005388:	f1b8 0f10 	cmp.w	r8, #16
 800538c:	dc02      	bgt.n	8005394 <__ieee754_rem_pio2+0x1d4>
 800538e:	e9ca 0100 	strd	r0, r1, [sl]
 8005392:	e039      	b.n	8005408 <__ieee754_rem_pio2+0x248>
 8005394:	a34e      	add	r3, pc, #312	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x310>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	ec51 0b18 	vmov	r0, r1, d8
 800539e:	f7fb f8cf 	bl	8000540 <__aeabi_dmul>
 80053a2:	4604      	mov	r4, r0
 80053a4:	460d      	mov	r5, r1
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4630      	mov	r0, r6
 80053ac:	4639      	mov	r1, r7
 80053ae:	f7fa ff0f 	bl	80001d0 <__aeabi_dsub>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4680      	mov	r8, r0
 80053b8:	4689      	mov	r9, r1
 80053ba:	4630      	mov	r0, r6
 80053bc:	4639      	mov	r1, r7
 80053be:	f7fa ff07 	bl	80001d0 <__aeabi_dsub>
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f7fa ff03 	bl	80001d0 <__aeabi_dsub>
 80053ca:	a343      	add	r3, pc, #268	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x318>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	4604      	mov	r4, r0
 80053d2:	460d      	mov	r5, r1
 80053d4:	ec51 0b18 	vmov	r0, r1, d8
 80053d8:	f7fb f8b2 	bl	8000540 <__aeabi_dmul>
 80053dc:	4622      	mov	r2, r4
 80053de:	462b      	mov	r3, r5
 80053e0:	f7fa fef6 	bl	80001d0 <__aeabi_dsub>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4604      	mov	r4, r0
 80053ea:	460d      	mov	r5, r1
 80053ec:	4640      	mov	r0, r8
 80053ee:	4649      	mov	r1, r9
 80053f0:	f7fa feee 	bl	80001d0 <__aeabi_dsub>
 80053f4:	9a03      	ldr	r2, [sp, #12]
 80053f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b31      	cmp	r3, #49	; 0x31
 80053fe:	dc24      	bgt.n	800544a <__ieee754_rem_pio2+0x28a>
 8005400:	e9ca 0100 	strd	r0, r1, [sl]
 8005404:	4646      	mov	r6, r8
 8005406:	464f      	mov	r7, r9
 8005408:	e9da 8900 	ldrd	r8, r9, [sl]
 800540c:	4630      	mov	r0, r6
 800540e:	4642      	mov	r2, r8
 8005410:	464b      	mov	r3, r9
 8005412:	4639      	mov	r1, r7
 8005414:	f7fa fedc 	bl	80001d0 <__aeabi_dsub>
 8005418:	462b      	mov	r3, r5
 800541a:	4622      	mov	r2, r4
 800541c:	f7fa fed8 	bl	80001d0 <__aeabi_dsub>
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005428:	f6bf af0a 	bge.w	8005240 <__ieee754_rem_pio2+0x80>
 800542c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005430:	f8ca 3004 	str.w	r3, [sl, #4]
 8005434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005438:	f8ca 8000 	str.w	r8, [sl]
 800543c:	f8ca 0008 	str.w	r0, [sl, #8]
 8005440:	f8ca 300c 	str.w	r3, [sl, #12]
 8005444:	f1cb 0b00 	rsb	fp, fp, #0
 8005448:	e6fa      	b.n	8005240 <__ieee754_rem_pio2+0x80>
 800544a:	a327      	add	r3, pc, #156	; (adr r3, 80054e8 <__ieee754_rem_pio2+0x328>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	ec51 0b18 	vmov	r0, r1, d8
 8005454:	f7fb f874 	bl	8000540 <__aeabi_dmul>
 8005458:	4604      	mov	r4, r0
 800545a:	460d      	mov	r5, r1
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4640      	mov	r0, r8
 8005462:	4649      	mov	r1, r9
 8005464:	f7fa feb4 	bl	80001d0 <__aeabi_dsub>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4606      	mov	r6, r0
 800546e:	460f      	mov	r7, r1
 8005470:	4640      	mov	r0, r8
 8005472:	4649      	mov	r1, r9
 8005474:	f7fa feac 	bl	80001d0 <__aeabi_dsub>
 8005478:	4622      	mov	r2, r4
 800547a:	462b      	mov	r3, r5
 800547c:	f7fa fea8 	bl	80001d0 <__aeabi_dsub>
 8005480:	a31b      	add	r3, pc, #108	; (adr r3, 80054f0 <__ieee754_rem_pio2+0x330>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	4604      	mov	r4, r0
 8005488:	460d      	mov	r5, r1
 800548a:	ec51 0b18 	vmov	r0, r1, d8
 800548e:	f7fb f857 	bl	8000540 <__aeabi_dmul>
 8005492:	4622      	mov	r2, r4
 8005494:	462b      	mov	r3, r5
 8005496:	f7fa fe9b 	bl	80001d0 <__aeabi_dsub>
 800549a:	4604      	mov	r4, r0
 800549c:	460d      	mov	r5, r1
 800549e:	e75f      	b.n	8005360 <__ieee754_rem_pio2+0x1a0>
 80054a0:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <__ieee754_rem_pio2+0x350>)
 80054a2:	4598      	cmp	r8, r3
 80054a4:	dd36      	ble.n	8005514 <__ieee754_rem_pio2+0x354>
 80054a6:	ee10 2a10 	vmov	r2, s0
 80054aa:	462b      	mov	r3, r5
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fa fe8e 	bl	80001d0 <__aeabi_dsub>
 80054b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80054b8:	e9ca 0100 	strd	r0, r1, [sl]
 80054bc:	e694      	b.n	80051e8 <__ieee754_rem_pio2+0x28>
 80054be:	bf00      	nop
 80054c0:	54400000 	.word	0x54400000
 80054c4:	3ff921fb 	.word	0x3ff921fb
 80054c8:	1a626331 	.word	0x1a626331
 80054cc:	3dd0b461 	.word	0x3dd0b461
 80054d0:	1a600000 	.word	0x1a600000
 80054d4:	3dd0b461 	.word	0x3dd0b461
 80054d8:	2e037073 	.word	0x2e037073
 80054dc:	3ba3198a 	.word	0x3ba3198a
 80054e0:	6dc9c883 	.word	0x6dc9c883
 80054e4:	3fe45f30 	.word	0x3fe45f30
 80054e8:	2e000000 	.word	0x2e000000
 80054ec:	3ba3198a 	.word	0x3ba3198a
 80054f0:	252049c1 	.word	0x252049c1
 80054f4:	397b839a 	.word	0x397b839a
 80054f8:	3fe921fb 	.word	0x3fe921fb
 80054fc:	4002d97b 	.word	0x4002d97b
 8005500:	3ff921fb 	.word	0x3ff921fb
 8005504:	413921fb 	.word	0x413921fb
 8005508:	3fe00000 	.word	0x3fe00000
 800550c:	080062f8 	.word	0x080062f8
 8005510:	7fefffff 	.word	0x7fefffff
 8005514:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005518:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800551c:	ee10 0a10 	vmov	r0, s0
 8005520:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005524:	ee10 6a10 	vmov	r6, s0
 8005528:	460f      	mov	r7, r1
 800552a:	f7fb faa3 	bl	8000a74 <__aeabi_d2iz>
 800552e:	f7fa ff9d 	bl	800046c <__aeabi_i2d>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4630      	mov	r0, r6
 8005538:	4639      	mov	r1, r7
 800553a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800553e:	f7fa fe47 	bl	80001d0 <__aeabi_dsub>
 8005542:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <__ieee754_rem_pio2+0x410>)
 8005544:	2200      	movs	r2, #0
 8005546:	f7fa fffb 	bl	8000540 <__aeabi_dmul>
 800554a:	460f      	mov	r7, r1
 800554c:	4606      	mov	r6, r0
 800554e:	f7fb fa91 	bl	8000a74 <__aeabi_d2iz>
 8005552:	f7fa ff8b 	bl	800046c <__aeabi_i2d>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005562:	f7fa fe35 	bl	80001d0 <__aeabi_dsub>
 8005566:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <__ieee754_rem_pio2+0x410>)
 8005568:	2200      	movs	r2, #0
 800556a:	f7fa ffe9 	bl	8000540 <__aeabi_dmul>
 800556e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005572:	ad04      	add	r5, sp, #16
 8005574:	f04f 0803 	mov.w	r8, #3
 8005578:	46a9      	mov	r9, r5
 800557a:	2600      	movs	r6, #0
 800557c:	2700      	movs	r7, #0
 800557e:	4632      	mov	r2, r6
 8005580:	463b      	mov	r3, r7
 8005582:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005586:	46c3      	mov	fp, r8
 8005588:	3d08      	subs	r5, #8
 800558a:	f108 38ff 	add.w	r8, r8, #4294967295
 800558e:	f7fb fa3f 	bl	8000a10 <__aeabi_dcmpeq>
 8005592:	2800      	cmp	r0, #0
 8005594:	d1f3      	bne.n	800557e <__ieee754_rem_pio2+0x3be>
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <__ieee754_rem_pio2+0x414>)
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	2302      	movs	r3, #2
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	4622      	mov	r2, r4
 80055a0:	465b      	mov	r3, fp
 80055a2:	4651      	mov	r1, sl
 80055a4:	4648      	mov	r0, r9
 80055a6:	f000 f817 	bl	80055d8 <__kernel_rem_pio2>
 80055aa:	9b02      	ldr	r3, [sp, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	4683      	mov	fp, r0
 80055b0:	f6bf ae46 	bge.w	8005240 <__ieee754_rem_pio2+0x80>
 80055b4:	e9da 2100 	ldrd	r2, r1, [sl]
 80055b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055bc:	e9ca 2300 	strd	r2, r3, [sl]
 80055c0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80055c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055c8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80055cc:	e73a      	b.n	8005444 <__ieee754_rem_pio2+0x284>
 80055ce:	bf00      	nop
 80055d0:	41700000 	.word	0x41700000
 80055d4:	08006378 	.word	0x08006378

080055d8 <__kernel_rem_pio2>:
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	ed2d 8b02 	vpush	{d8}
 80055e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80055e4:	f112 0f14 	cmn.w	r2, #20
 80055e8:	9308      	str	r3, [sp, #32]
 80055ea:	9101      	str	r1, [sp, #4]
 80055ec:	4bc4      	ldr	r3, [pc, #784]	; (8005900 <__kernel_rem_pio2+0x328>)
 80055ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80055f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80055f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	9b08      	ldr	r3, [sp, #32]
 80055fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80055fe:	bfa8      	it	ge
 8005600:	1ed4      	subge	r4, r2, #3
 8005602:	9306      	str	r3, [sp, #24]
 8005604:	bfb2      	itee	lt
 8005606:	2400      	movlt	r4, #0
 8005608:	2318      	movge	r3, #24
 800560a:	fb94 f4f3 	sdivge	r4, r4, r3
 800560e:	f06f 0317 	mvn.w	r3, #23
 8005612:	fb04 3303 	mla	r3, r4, r3, r3
 8005616:	eb03 0a02 	add.w	sl, r3, r2
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	9a06      	ldr	r2, [sp, #24]
 800561e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80058f0 <__kernel_rem_pio2+0x318>
 8005622:	eb03 0802 	add.w	r8, r3, r2
 8005626:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005628:	1aa7      	subs	r7, r4, r2
 800562a:	ae22      	add	r6, sp, #136	; 0x88
 800562c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005630:	2500      	movs	r5, #0
 8005632:	4545      	cmp	r5, r8
 8005634:	dd13      	ble.n	800565e <__kernel_rem_pio2+0x86>
 8005636:	9b08      	ldr	r3, [sp, #32]
 8005638:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80058f0 <__kernel_rem_pio2+0x318>
 800563c:	aa22      	add	r2, sp, #136	; 0x88
 800563e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005642:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005646:	f04f 0800 	mov.w	r8, #0
 800564a:	9b02      	ldr	r3, [sp, #8]
 800564c:	4598      	cmp	r8, r3
 800564e:	dc2f      	bgt.n	80056b0 <__kernel_rem_pio2+0xd8>
 8005650:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005654:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005658:	462f      	mov	r7, r5
 800565a:	2600      	movs	r6, #0
 800565c:	e01b      	b.n	8005696 <__kernel_rem_pio2+0xbe>
 800565e:	42ef      	cmn	r7, r5
 8005660:	d407      	bmi.n	8005672 <__kernel_rem_pio2+0x9a>
 8005662:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005666:	f7fa ff01 	bl	800046c <__aeabi_i2d>
 800566a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800566e:	3501      	adds	r5, #1
 8005670:	e7df      	b.n	8005632 <__kernel_rem_pio2+0x5a>
 8005672:	ec51 0b18 	vmov	r0, r1, d8
 8005676:	e7f8      	b.n	800566a <__kernel_rem_pio2+0x92>
 8005678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005680:	f7fa ff5e 	bl	8000540 <__aeabi_dmul>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568c:	f7fa fda2 	bl	80001d4 <__adddf3>
 8005690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005694:	3601      	adds	r6, #1
 8005696:	9b06      	ldr	r3, [sp, #24]
 8005698:	429e      	cmp	r6, r3
 800569a:	f1a7 0708 	sub.w	r7, r7, #8
 800569e:	ddeb      	ble.n	8005678 <__kernel_rem_pio2+0xa0>
 80056a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80056a4:	f108 0801 	add.w	r8, r8, #1
 80056a8:	ecab 7b02 	vstmia	fp!, {d7}
 80056ac:	3508      	adds	r5, #8
 80056ae:	e7cc      	b.n	800564a <__kernel_rem_pio2+0x72>
 80056b0:	9b02      	ldr	r3, [sp, #8]
 80056b2:	aa0e      	add	r2, sp, #56	; 0x38
 80056b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056b8:	930d      	str	r3, [sp, #52]	; 0x34
 80056ba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80056bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80056c0:	9c02      	ldr	r4, [sp, #8]
 80056c2:	930c      	str	r3, [sp, #48]	; 0x30
 80056c4:	00e3      	lsls	r3, r4, #3
 80056c6:	930a      	str	r3, [sp, #40]	; 0x28
 80056c8:	ab9a      	add	r3, sp, #616	; 0x268
 80056ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80056d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80056d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80056d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80056dc:	46c3      	mov	fp, r8
 80056de:	46a1      	mov	r9, r4
 80056e0:	f1b9 0f00 	cmp.w	r9, #0
 80056e4:	f1a5 0508 	sub.w	r5, r5, #8
 80056e8:	dc77      	bgt.n	80057da <__kernel_rem_pio2+0x202>
 80056ea:	ec47 6b10 	vmov	d0, r6, r7
 80056ee:	4650      	mov	r0, sl
 80056f0:	f000 fd56 	bl	80061a0 <scalbn>
 80056f4:	ec57 6b10 	vmov	r6, r7, d0
 80056f8:	2200      	movs	r2, #0
 80056fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80056fe:	ee10 0a10 	vmov	r0, s0
 8005702:	4639      	mov	r1, r7
 8005704:	f7fa ff1c 	bl	8000540 <__aeabi_dmul>
 8005708:	ec41 0b10 	vmov	d0, r0, r1
 800570c:	f000 fcc8 	bl	80060a0 <floor>
 8005710:	4b7c      	ldr	r3, [pc, #496]	; (8005904 <__kernel_rem_pio2+0x32c>)
 8005712:	ec51 0b10 	vmov	r0, r1, d0
 8005716:	2200      	movs	r2, #0
 8005718:	f7fa ff12 	bl	8000540 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fa fd54 	bl	80001d0 <__aeabi_dsub>
 8005728:	460f      	mov	r7, r1
 800572a:	4606      	mov	r6, r0
 800572c:	f7fb f9a2 	bl	8000a74 <__aeabi_d2iz>
 8005730:	9004      	str	r0, [sp, #16]
 8005732:	f7fa fe9b 	bl	800046c <__aeabi_i2d>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4630      	mov	r0, r6
 800573c:	4639      	mov	r1, r7
 800573e:	f7fa fd47 	bl	80001d0 <__aeabi_dsub>
 8005742:	f1ba 0f00 	cmp.w	sl, #0
 8005746:	4606      	mov	r6, r0
 8005748:	460f      	mov	r7, r1
 800574a:	dd6d      	ble.n	8005828 <__kernel_rem_pio2+0x250>
 800574c:	1e62      	subs	r2, r4, #1
 800574e:	ab0e      	add	r3, sp, #56	; 0x38
 8005750:	9d04      	ldr	r5, [sp, #16]
 8005752:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005756:	f1ca 0118 	rsb	r1, sl, #24
 800575a:	fa40 f301 	asr.w	r3, r0, r1
 800575e:	441d      	add	r5, r3
 8005760:	408b      	lsls	r3, r1
 8005762:	1ac0      	subs	r0, r0, r3
 8005764:	ab0e      	add	r3, sp, #56	; 0x38
 8005766:	9504      	str	r5, [sp, #16]
 8005768:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800576c:	f1ca 0317 	rsb	r3, sl, #23
 8005770:	fa40 fb03 	asr.w	fp, r0, r3
 8005774:	f1bb 0f00 	cmp.w	fp, #0
 8005778:	dd65      	ble.n	8005846 <__kernel_rem_pio2+0x26e>
 800577a:	9b04      	ldr	r3, [sp, #16]
 800577c:	2200      	movs	r2, #0
 800577e:	3301      	adds	r3, #1
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	4615      	mov	r5, r2
 8005784:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005788:	4294      	cmp	r4, r2
 800578a:	f300 809c 	bgt.w	80058c6 <__kernel_rem_pio2+0x2ee>
 800578e:	f1ba 0f00 	cmp.w	sl, #0
 8005792:	dd07      	ble.n	80057a4 <__kernel_rem_pio2+0x1cc>
 8005794:	f1ba 0f01 	cmp.w	sl, #1
 8005798:	f000 80c0 	beq.w	800591c <__kernel_rem_pio2+0x344>
 800579c:	f1ba 0f02 	cmp.w	sl, #2
 80057a0:	f000 80c6 	beq.w	8005930 <__kernel_rem_pio2+0x358>
 80057a4:	f1bb 0f02 	cmp.w	fp, #2
 80057a8:	d14d      	bne.n	8005846 <__kernel_rem_pio2+0x26e>
 80057aa:	4632      	mov	r2, r6
 80057ac:	463b      	mov	r3, r7
 80057ae:	4956      	ldr	r1, [pc, #344]	; (8005908 <__kernel_rem_pio2+0x330>)
 80057b0:	2000      	movs	r0, #0
 80057b2:	f7fa fd0d 	bl	80001d0 <__aeabi_dsub>
 80057b6:	4606      	mov	r6, r0
 80057b8:	460f      	mov	r7, r1
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	d043      	beq.n	8005846 <__kernel_rem_pio2+0x26e>
 80057be:	4650      	mov	r0, sl
 80057c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80058f8 <__kernel_rem_pio2+0x320>
 80057c4:	f000 fcec 	bl	80061a0 <scalbn>
 80057c8:	4630      	mov	r0, r6
 80057ca:	4639      	mov	r1, r7
 80057cc:	ec53 2b10 	vmov	r2, r3, d0
 80057d0:	f7fa fcfe 	bl	80001d0 <__aeabi_dsub>
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	e035      	b.n	8005846 <__kernel_rem_pio2+0x26e>
 80057da:	4b4c      	ldr	r3, [pc, #304]	; (800590c <__kernel_rem_pio2+0x334>)
 80057dc:	2200      	movs	r2, #0
 80057de:	4630      	mov	r0, r6
 80057e0:	4639      	mov	r1, r7
 80057e2:	f7fa fead 	bl	8000540 <__aeabi_dmul>
 80057e6:	f7fb f945 	bl	8000a74 <__aeabi_d2iz>
 80057ea:	f7fa fe3f 	bl	800046c <__aeabi_i2d>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	ec43 2b18 	vmov	d8, r2, r3
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <__kernel_rem_pio2+0x338>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	f7fa fea1 	bl	8000540 <__aeabi_dmul>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fa fce3 	bl	80001d0 <__aeabi_dsub>
 800580a:	f7fb f933 	bl	8000a74 <__aeabi_d2iz>
 800580e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005812:	f84b 0b04 	str.w	r0, [fp], #4
 8005816:	ec51 0b18 	vmov	r0, r1, d8
 800581a:	f7fa fcdb 	bl	80001d4 <__adddf3>
 800581e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005822:	4606      	mov	r6, r0
 8005824:	460f      	mov	r7, r1
 8005826:	e75b      	b.n	80056e0 <__kernel_rem_pio2+0x108>
 8005828:	d106      	bne.n	8005838 <__kernel_rem_pio2+0x260>
 800582a:	1e63      	subs	r3, r4, #1
 800582c:	aa0e      	add	r2, sp, #56	; 0x38
 800582e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005832:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005836:	e79d      	b.n	8005774 <__kernel_rem_pio2+0x19c>
 8005838:	4b36      	ldr	r3, [pc, #216]	; (8005914 <__kernel_rem_pio2+0x33c>)
 800583a:	2200      	movs	r2, #0
 800583c:	f7fb f906 	bl	8000a4c <__aeabi_dcmpge>
 8005840:	2800      	cmp	r0, #0
 8005842:	d13d      	bne.n	80058c0 <__kernel_rem_pio2+0x2e8>
 8005844:	4683      	mov	fp, r0
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	4630      	mov	r0, r6
 800584c:	4639      	mov	r1, r7
 800584e:	f7fb f8df 	bl	8000a10 <__aeabi_dcmpeq>
 8005852:	2800      	cmp	r0, #0
 8005854:	f000 80c0 	beq.w	80059d8 <__kernel_rem_pio2+0x400>
 8005858:	1e65      	subs	r5, r4, #1
 800585a:	462b      	mov	r3, r5
 800585c:	2200      	movs	r2, #0
 800585e:	9902      	ldr	r1, [sp, #8]
 8005860:	428b      	cmp	r3, r1
 8005862:	da6c      	bge.n	800593e <__kernel_rem_pio2+0x366>
 8005864:	2a00      	cmp	r2, #0
 8005866:	f000 8089 	beq.w	800597c <__kernel_rem_pio2+0x3a4>
 800586a:	ab0e      	add	r3, sp, #56	; 0x38
 800586c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005870:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80ad 	beq.w	80059d4 <__kernel_rem_pio2+0x3fc>
 800587a:	4650      	mov	r0, sl
 800587c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80058f8 <__kernel_rem_pio2+0x320>
 8005880:	f000 fc8e 	bl	80061a0 <scalbn>
 8005884:	ab9a      	add	r3, sp, #616	; 0x268
 8005886:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800588a:	ec57 6b10 	vmov	r6, r7, d0
 800588e:	00ec      	lsls	r4, r5, #3
 8005890:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005894:	46aa      	mov	sl, r5
 8005896:	f1ba 0f00 	cmp.w	sl, #0
 800589a:	f280 80d6 	bge.w	8005a4a <__kernel_rem_pio2+0x472>
 800589e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80058f0 <__kernel_rem_pio2+0x318>
 80058a2:	462e      	mov	r6, r5
 80058a4:	2e00      	cmp	r6, #0
 80058a6:	f2c0 8104 	blt.w	8005ab2 <__kernel_rem_pio2+0x4da>
 80058aa:	ab72      	add	r3, sp, #456	; 0x1c8
 80058ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 80058b0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005918 <__kernel_rem_pio2+0x340>
 80058b4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80058b8:	f04f 0800 	mov.w	r8, #0
 80058bc:	1baf      	subs	r7, r5, r6
 80058be:	e0ea      	b.n	8005a96 <__kernel_rem_pio2+0x4be>
 80058c0:	f04f 0b02 	mov.w	fp, #2
 80058c4:	e759      	b.n	800577a <__kernel_rem_pio2+0x1a2>
 80058c6:	f8d8 3000 	ldr.w	r3, [r8]
 80058ca:	b955      	cbnz	r5, 80058e2 <__kernel_rem_pio2+0x30a>
 80058cc:	b123      	cbz	r3, 80058d8 <__kernel_rem_pio2+0x300>
 80058ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80058d2:	f8c8 3000 	str.w	r3, [r8]
 80058d6:	2301      	movs	r3, #1
 80058d8:	3201      	adds	r2, #1
 80058da:	f108 0804 	add.w	r8, r8, #4
 80058de:	461d      	mov	r5, r3
 80058e0:	e752      	b.n	8005788 <__kernel_rem_pio2+0x1b0>
 80058e2:	1acb      	subs	r3, r1, r3
 80058e4:	f8c8 3000 	str.w	r3, [r8]
 80058e8:	462b      	mov	r3, r5
 80058ea:	e7f5      	b.n	80058d8 <__kernel_rem_pio2+0x300>
 80058ec:	f3af 8000 	nop.w
	...
 80058fc:	3ff00000 	.word	0x3ff00000
 8005900:	080064c0 	.word	0x080064c0
 8005904:	40200000 	.word	0x40200000
 8005908:	3ff00000 	.word	0x3ff00000
 800590c:	3e700000 	.word	0x3e700000
 8005910:	41700000 	.word	0x41700000
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	08006480 	.word	0x08006480
 800591c:	1e62      	subs	r2, r4, #1
 800591e:	ab0e      	add	r3, sp, #56	; 0x38
 8005920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005924:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005928:	a90e      	add	r1, sp, #56	; 0x38
 800592a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800592e:	e739      	b.n	80057a4 <__kernel_rem_pio2+0x1cc>
 8005930:	1e62      	subs	r2, r4, #1
 8005932:	ab0e      	add	r3, sp, #56	; 0x38
 8005934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005938:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800593c:	e7f4      	b.n	8005928 <__kernel_rem_pio2+0x350>
 800593e:	a90e      	add	r1, sp, #56	; 0x38
 8005940:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005944:	3b01      	subs	r3, #1
 8005946:	430a      	orrs	r2, r1
 8005948:	e789      	b.n	800585e <__kernel_rem_pio2+0x286>
 800594a:	3301      	adds	r3, #1
 800594c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005950:	2900      	cmp	r1, #0
 8005952:	d0fa      	beq.n	800594a <__kernel_rem_pio2+0x372>
 8005954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005956:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800595a:	446a      	add	r2, sp
 800595c:	3a98      	subs	r2, #152	; 0x98
 800595e:	920a      	str	r2, [sp, #40]	; 0x28
 8005960:	9a08      	ldr	r2, [sp, #32]
 8005962:	18e3      	adds	r3, r4, r3
 8005964:	18a5      	adds	r5, r4, r2
 8005966:	aa22      	add	r2, sp, #136	; 0x88
 8005968:	f104 0801 	add.w	r8, r4, #1
 800596c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	9b04      	ldr	r3, [sp, #16]
 8005974:	4543      	cmp	r3, r8
 8005976:	da04      	bge.n	8005982 <__kernel_rem_pio2+0x3aa>
 8005978:	461c      	mov	r4, r3
 800597a:	e6a3      	b.n	80056c4 <__kernel_rem_pio2+0xec>
 800597c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800597e:	2301      	movs	r3, #1
 8005980:	e7e4      	b.n	800594c <__kernel_rem_pio2+0x374>
 8005982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005984:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005988:	f7fa fd70 	bl	800046c <__aeabi_i2d>
 800598c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005992:	46ab      	mov	fp, r5
 8005994:	461c      	mov	r4, r3
 8005996:	f04f 0900 	mov.w	r9, #0
 800599a:	2600      	movs	r6, #0
 800599c:	2700      	movs	r7, #0
 800599e:	9b06      	ldr	r3, [sp, #24]
 80059a0:	4599      	cmp	r9, r3
 80059a2:	dd06      	ble.n	80059b2 <__kernel_rem_pio2+0x3da>
 80059a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80059aa:	f108 0801 	add.w	r8, r8, #1
 80059ae:	930a      	str	r3, [sp, #40]	; 0x28
 80059b0:	e7df      	b.n	8005972 <__kernel_rem_pio2+0x39a>
 80059b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80059b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80059ba:	f7fa fdc1 	bl	8000540 <__aeabi_dmul>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4630      	mov	r0, r6
 80059c4:	4639      	mov	r1, r7
 80059c6:	f7fa fc05 	bl	80001d4 <__adddf3>
 80059ca:	f109 0901 	add.w	r9, r9, #1
 80059ce:	4606      	mov	r6, r0
 80059d0:	460f      	mov	r7, r1
 80059d2:	e7e4      	b.n	800599e <__kernel_rem_pio2+0x3c6>
 80059d4:	3d01      	subs	r5, #1
 80059d6:	e748      	b.n	800586a <__kernel_rem_pio2+0x292>
 80059d8:	ec47 6b10 	vmov	d0, r6, r7
 80059dc:	f1ca 0000 	rsb	r0, sl, #0
 80059e0:	f000 fbde 	bl	80061a0 <scalbn>
 80059e4:	ec57 6b10 	vmov	r6, r7, d0
 80059e8:	4ba0      	ldr	r3, [pc, #640]	; (8005c6c <__kernel_rem_pio2+0x694>)
 80059ea:	ee10 0a10 	vmov	r0, s0
 80059ee:	2200      	movs	r2, #0
 80059f0:	4639      	mov	r1, r7
 80059f2:	f7fb f82b 	bl	8000a4c <__aeabi_dcmpge>
 80059f6:	b1f8      	cbz	r0, 8005a38 <__kernel_rem_pio2+0x460>
 80059f8:	4b9d      	ldr	r3, [pc, #628]	; (8005c70 <__kernel_rem_pio2+0x698>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f7fa fd9e 	bl	8000540 <__aeabi_dmul>
 8005a04:	f7fb f836 	bl	8000a74 <__aeabi_d2iz>
 8005a08:	4680      	mov	r8, r0
 8005a0a:	f7fa fd2f 	bl	800046c <__aeabi_i2d>
 8005a0e:	4b97      	ldr	r3, [pc, #604]	; (8005c6c <__kernel_rem_pio2+0x694>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	f7fa fd95 	bl	8000540 <__aeabi_dmul>
 8005a16:	460b      	mov	r3, r1
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7fa fbd7 	bl	80001d0 <__aeabi_dsub>
 8005a22:	f7fb f827 	bl	8000a74 <__aeabi_d2iz>
 8005a26:	1c65      	adds	r5, r4, #1
 8005a28:	ab0e      	add	r3, sp, #56	; 0x38
 8005a2a:	f10a 0a18 	add.w	sl, sl, #24
 8005a2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005a36:	e720      	b.n	800587a <__kernel_rem_pio2+0x2a2>
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	f7fb f81a 	bl	8000a74 <__aeabi_d2iz>
 8005a40:	ab0e      	add	r3, sp, #56	; 0x38
 8005a42:	4625      	mov	r5, r4
 8005a44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005a48:	e717      	b.n	800587a <__kernel_rem_pio2+0x2a2>
 8005a4a:	ab0e      	add	r3, sp, #56	; 0x38
 8005a4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005a50:	f7fa fd0c 	bl	800046c <__aeabi_i2d>
 8005a54:	4632      	mov	r2, r6
 8005a56:	463b      	mov	r3, r7
 8005a58:	f7fa fd72 	bl	8000540 <__aeabi_dmul>
 8005a5c:	4b84      	ldr	r3, [pc, #528]	; (8005c70 <__kernel_rem_pio2+0x698>)
 8005a5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005a62:	2200      	movs	r2, #0
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	f7fa fd6a 	bl	8000540 <__aeabi_dmul>
 8005a6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a70:	4606      	mov	r6, r0
 8005a72:	460f      	mov	r7, r1
 8005a74:	e70f      	b.n	8005896 <__kernel_rem_pio2+0x2be>
 8005a76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005a7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005a7e:	f7fa fd5f 	bl	8000540 <__aeabi_dmul>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a8a:	f7fa fba3 	bl	80001d4 <__adddf3>
 8005a8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a92:	f108 0801 	add.w	r8, r8, #1
 8005a96:	9b02      	ldr	r3, [sp, #8]
 8005a98:	4598      	cmp	r8, r3
 8005a9a:	dc01      	bgt.n	8005aa0 <__kernel_rem_pio2+0x4c8>
 8005a9c:	45b8      	cmp	r8, r7
 8005a9e:	ddea      	ble.n	8005a76 <__kernel_rem_pio2+0x49e>
 8005aa0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005aa4:	ab4a      	add	r3, sp, #296	; 0x128
 8005aa6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005aaa:	ed87 7b00 	vstr	d7, [r7]
 8005aae:	3e01      	subs	r6, #1
 8005ab0:	e6f8      	b.n	80058a4 <__kernel_rem_pio2+0x2cc>
 8005ab2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	dc0b      	bgt.n	8005ad0 <__kernel_rem_pio2+0x4f8>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	dc35      	bgt.n	8005b28 <__kernel_rem_pio2+0x550>
 8005abc:	d059      	beq.n	8005b72 <__kernel_rem_pio2+0x59a>
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	f003 0007 	and.w	r0, r3, #7
 8005ac4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005ac8:	ecbd 8b02 	vpop	{d8}
 8005acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d1f3      	bne.n	8005abe <__kernel_rem_pio2+0x4e6>
 8005ad6:	ab4a      	add	r3, sp, #296	; 0x128
 8005ad8:	4423      	add	r3, r4
 8005ada:	9306      	str	r3, [sp, #24]
 8005adc:	461c      	mov	r4, r3
 8005ade:	469a      	mov	sl, r3
 8005ae0:	9502      	str	r5, [sp, #8]
 8005ae2:	9b02      	ldr	r3, [sp, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f1aa 0a08 	sub.w	sl, sl, #8
 8005aea:	dc6b      	bgt.n	8005bc4 <__kernel_rem_pio2+0x5ec>
 8005aec:	46aa      	mov	sl, r5
 8005aee:	f1ba 0f01 	cmp.w	sl, #1
 8005af2:	f1a4 0408 	sub.w	r4, r4, #8
 8005af6:	f300 8085 	bgt.w	8005c04 <__kernel_rem_pio2+0x62c>
 8005afa:	9c06      	ldr	r4, [sp, #24]
 8005afc:	2000      	movs	r0, #0
 8005afe:	3408      	adds	r4, #8
 8005b00:	2100      	movs	r1, #0
 8005b02:	2d01      	cmp	r5, #1
 8005b04:	f300 809d 	bgt.w	8005c42 <__kernel_rem_pio2+0x66a>
 8005b08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005b0c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005b10:	f1bb 0f00 	cmp.w	fp, #0
 8005b14:	f040 809b 	bne.w	8005c4e <__kernel_rem_pio2+0x676>
 8005b18:	9b01      	ldr	r3, [sp, #4]
 8005b1a:	e9c3 5600 	strd	r5, r6, [r3]
 8005b1e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005b22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005b26:	e7ca      	b.n	8005abe <__kernel_rem_pio2+0x4e6>
 8005b28:	3408      	adds	r4, #8
 8005b2a:	ab4a      	add	r3, sp, #296	; 0x128
 8005b2c:	441c      	add	r4, r3
 8005b2e:	462e      	mov	r6, r5
 8005b30:	2000      	movs	r0, #0
 8005b32:	2100      	movs	r1, #0
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	da36      	bge.n	8005ba6 <__kernel_rem_pio2+0x5ce>
 8005b38:	f1bb 0f00 	cmp.w	fp, #0
 8005b3c:	d039      	beq.n	8005bb2 <__kernel_rem_pio2+0x5da>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b44:	9c01      	ldr	r4, [sp, #4]
 8005b46:	e9c4 2300 	strd	r2, r3, [r4]
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005b52:	f7fa fb3d 	bl	80001d0 <__aeabi_dsub>
 8005b56:	ae4c      	add	r6, sp, #304	; 0x130
 8005b58:	2401      	movs	r4, #1
 8005b5a:	42a5      	cmp	r5, r4
 8005b5c:	da2c      	bge.n	8005bb8 <__kernel_rem_pio2+0x5e0>
 8005b5e:	f1bb 0f00 	cmp.w	fp, #0
 8005b62:	d002      	beq.n	8005b6a <__kernel_rem_pio2+0x592>
 8005b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b68:	4619      	mov	r1, r3
 8005b6a:	9b01      	ldr	r3, [sp, #4]
 8005b6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005b70:	e7a5      	b.n	8005abe <__kernel_rem_pio2+0x4e6>
 8005b72:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005b76:	eb0d 0403 	add.w	r4, sp, r3
 8005b7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005b7e:	2000      	movs	r0, #0
 8005b80:	2100      	movs	r1, #0
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	da09      	bge.n	8005b9a <__kernel_rem_pio2+0x5c2>
 8005b86:	f1bb 0f00 	cmp.w	fp, #0
 8005b8a:	d002      	beq.n	8005b92 <__kernel_rem_pio2+0x5ba>
 8005b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b90:	4619      	mov	r1, r3
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	e9c3 0100 	strd	r0, r1, [r3]
 8005b98:	e791      	b.n	8005abe <__kernel_rem_pio2+0x4e6>
 8005b9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005b9e:	f7fa fb19 	bl	80001d4 <__adddf3>
 8005ba2:	3d01      	subs	r5, #1
 8005ba4:	e7ed      	b.n	8005b82 <__kernel_rem_pio2+0x5aa>
 8005ba6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005baa:	f7fa fb13 	bl	80001d4 <__adddf3>
 8005bae:	3e01      	subs	r6, #1
 8005bb0:	e7c0      	b.n	8005b34 <__kernel_rem_pio2+0x55c>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	e7c5      	b.n	8005b44 <__kernel_rem_pio2+0x56c>
 8005bb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005bbc:	f7fa fb0a 	bl	80001d4 <__adddf3>
 8005bc0:	3401      	adds	r4, #1
 8005bc2:	e7ca      	b.n	8005b5a <__kernel_rem_pio2+0x582>
 8005bc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005bcc:	9b02      	ldr	r3, [sp, #8]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	9302      	str	r3, [sp, #8]
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fafb 	bl	80001d4 <__adddf3>
 8005bde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4640      	mov	r0, r8
 8005be8:	4649      	mov	r1, r9
 8005bea:	f7fa faf1 	bl	80001d0 <__aeabi_dsub>
 8005bee:	4632      	mov	r2, r6
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	f7fa faef 	bl	80001d4 <__adddf3>
 8005bf6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005bfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005bfe:	ed8a 7b00 	vstr	d7, [sl]
 8005c02:	e76e      	b.n	8005ae2 <__kernel_rem_pio2+0x50a>
 8005c04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005c08:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4632      	mov	r2, r6
 8005c10:	463b      	mov	r3, r7
 8005c12:	4649      	mov	r1, r9
 8005c14:	f7fa fade 	bl	80001d4 <__adddf3>
 8005c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4640      	mov	r0, r8
 8005c22:	4649      	mov	r1, r9
 8005c24:	f7fa fad4 	bl	80001d0 <__aeabi_dsub>
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	f7fa fad2 	bl	80001d4 <__adddf3>
 8005c30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c38:	ed84 7b00 	vstr	d7, [r4]
 8005c3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c40:	e755      	b.n	8005aee <__kernel_rem_pio2+0x516>
 8005c42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c46:	f7fa fac5 	bl	80001d4 <__adddf3>
 8005c4a:	3d01      	subs	r5, #1
 8005c4c:	e759      	b.n	8005b02 <__kernel_rem_pio2+0x52a>
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	9a01      	ldr	r2, [sp, #4]
 8005c52:	601d      	str	r5, [r3, #0]
 8005c54:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005c58:	605c      	str	r4, [r3, #4]
 8005c5a:	609f      	str	r7, [r3, #8]
 8005c5c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005c60:	60d3      	str	r3, [r2, #12]
 8005c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c66:	6110      	str	r0, [r2, #16]
 8005c68:	6153      	str	r3, [r2, #20]
 8005c6a:	e728      	b.n	8005abe <__kernel_rem_pio2+0x4e6>
 8005c6c:	41700000 	.word	0x41700000
 8005c70:	3e700000 	.word	0x3e700000
 8005c74:	00000000 	.word	0x00000000

08005c78 <__kernel_tan>:
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	ed2d 8b06 	vpush	{d8-d10}
 8005c80:	ec5b ab10 	vmov	sl, fp, d0
 8005c84:	4be0      	ldr	r3, [pc, #896]	; (8006008 <__kernel_tan+0x390>)
 8005c86:	b083      	sub	sp, #12
 8005c88:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005c8c:	429f      	cmp	r7, r3
 8005c8e:	ec59 8b11 	vmov	r8, r9, d1
 8005c92:	4606      	mov	r6, r0
 8005c94:	f8cd b000 	str.w	fp, [sp]
 8005c98:	dc61      	bgt.n	8005d5e <__kernel_tan+0xe6>
 8005c9a:	ee10 0a10 	vmov	r0, s0
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	f7fa fee8 	bl	8000a74 <__aeabi_d2iz>
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	f040 8083 	bne.w	8005db2 <__kernel_tan+0x13a>
 8005cac:	1c73      	adds	r3, r6, #1
 8005cae:	4652      	mov	r2, sl
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	433b      	orrs	r3, r7
 8005cb4:	d112      	bne.n	8005cdc <__kernel_tan+0x64>
 8005cb6:	ec4b ab10 	vmov	d0, sl, fp
 8005cba:	f000 f9e7 	bl	800608c <fabs>
 8005cbe:	49d3      	ldr	r1, [pc, #844]	; (800600c <__kernel_tan+0x394>)
 8005cc0:	ec53 2b10 	vmov	r2, r3, d0
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f7fa fd65 	bl	8000794 <__aeabi_ddiv>
 8005cca:	4682      	mov	sl, r0
 8005ccc:	468b      	mov	fp, r1
 8005cce:	ec4b ab10 	vmov	d0, sl, fp
 8005cd2:	b003      	add	sp, #12
 8005cd4:	ecbd 8b06 	vpop	{d8-d10}
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	2e01      	cmp	r6, #1
 8005cde:	d0f6      	beq.n	8005cce <__kernel_tan+0x56>
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	4659      	mov	r1, fp
 8005ce8:	f7fa fa74 	bl	80001d4 <__adddf3>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	49c6      	ldr	r1, [pc, #792]	; (8006010 <__kernel_tan+0x398>)
 8005cf6:	f7fa fd4d 	bl	8000794 <__aeabi_ddiv>
 8005cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8005cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d02:	462e      	mov	r6, r5
 8005d04:	4652      	mov	r2, sl
 8005d06:	462c      	mov	r4, r5
 8005d08:	4630      	mov	r0, r6
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	465b      	mov	r3, fp
 8005d10:	f7fa fa5e 	bl	80001d0 <__aeabi_dsub>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa fa58 	bl	80001d0 <__aeabi_dsub>
 8005d20:	4632      	mov	r2, r6
 8005d22:	462b      	mov	r3, r5
 8005d24:	f7fa fc0c 	bl	8000540 <__aeabi_dmul>
 8005d28:	4632      	mov	r2, r6
 8005d2a:	4680      	mov	r8, r0
 8005d2c:	4689      	mov	r9, r1
 8005d2e:	462b      	mov	r3, r5
 8005d30:	4630      	mov	r0, r6
 8005d32:	4639      	mov	r1, r7
 8005d34:	f7fa fc04 	bl	8000540 <__aeabi_dmul>
 8005d38:	4bb4      	ldr	r3, [pc, #720]	; (800600c <__kernel_tan+0x394>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f7fa fa4a 	bl	80001d4 <__adddf3>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4640      	mov	r0, r8
 8005d46:	4649      	mov	r1, r9
 8005d48:	f7fa fa44 	bl	80001d4 <__adddf3>
 8005d4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d50:	f7fa fbf6 	bl	8000540 <__aeabi_dmul>
 8005d54:	4622      	mov	r2, r4
 8005d56:	462b      	mov	r3, r5
 8005d58:	f7fa fa3c 	bl	80001d4 <__adddf3>
 8005d5c:	e7b5      	b.n	8005cca <__kernel_tan+0x52>
 8005d5e:	4bad      	ldr	r3, [pc, #692]	; (8006014 <__kernel_tan+0x39c>)
 8005d60:	429f      	cmp	r7, r3
 8005d62:	dd26      	ble.n	8005db2 <__kernel_tan+0x13a>
 8005d64:	9b00      	ldr	r3, [sp, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da09      	bge.n	8005d7e <__kernel_tan+0x106>
 8005d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d6e:	469b      	mov	fp, r3
 8005d70:	ee10 aa10 	vmov	sl, s0
 8005d74:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d78:	ee11 8a10 	vmov	r8, s2
 8005d7c:	4699      	mov	r9, r3
 8005d7e:	4652      	mov	r2, sl
 8005d80:	465b      	mov	r3, fp
 8005d82:	a183      	add	r1, pc, #524	; (adr r1, 8005f90 <__kernel_tan+0x318>)
 8005d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d88:	f7fa fa22 	bl	80001d0 <__aeabi_dsub>
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	a180      	add	r1, pc, #512	; (adr r1, 8005f98 <__kernel_tan+0x320>)
 8005d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d9a:	f7fa fa19 	bl	80001d0 <__aeabi_dsub>
 8005d9e:	4622      	mov	r2, r4
 8005da0:	462b      	mov	r3, r5
 8005da2:	f7fa fa17 	bl	80001d4 <__adddf3>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	4682      	mov	sl, r0
 8005dac:	468b      	mov	fp, r1
 8005dae:	f04f 0900 	mov.w	r9, #0
 8005db2:	4652      	mov	r2, sl
 8005db4:	465b      	mov	r3, fp
 8005db6:	4650      	mov	r0, sl
 8005db8:	4659      	mov	r1, fp
 8005dba:	f7fa fbc1 	bl	8000540 <__aeabi_dmul>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	ec43 2b18 	vmov	d8, r2, r3
 8005dc6:	f7fa fbbb 	bl	8000540 <__aeabi_dmul>
 8005dca:	ec53 2b18 	vmov	r2, r3, d8
 8005dce:	4604      	mov	r4, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	f7fa fbb3 	bl	8000540 <__aeabi_dmul>
 8005dda:	a371      	add	r3, pc, #452	; (adr r3, 8005fa0 <__kernel_tan+0x328>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	ec41 0b19 	vmov	d9, r0, r1
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fbaa 	bl	8000540 <__aeabi_dmul>
 8005dec:	a36e      	add	r3, pc, #440	; (adr r3, 8005fa8 <__kernel_tan+0x330>)
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f7fa f9ef 	bl	80001d4 <__adddf3>
 8005df6:	4622      	mov	r2, r4
 8005df8:	462b      	mov	r3, r5
 8005dfa:	f7fa fba1 	bl	8000540 <__aeabi_dmul>
 8005dfe:	a36c      	add	r3, pc, #432	; (adr r3, 8005fb0 <__kernel_tan+0x338>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa f9e6 	bl	80001d4 <__adddf3>
 8005e08:	4622      	mov	r2, r4
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	f7fa fb98 	bl	8000540 <__aeabi_dmul>
 8005e10:	a369      	add	r3, pc, #420	; (adr r3, 8005fb8 <__kernel_tan+0x340>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f7fa f9dd 	bl	80001d4 <__adddf3>
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	f7fa fb8f 	bl	8000540 <__aeabi_dmul>
 8005e22:	a367      	add	r3, pc, #412	; (adr r3, 8005fc0 <__kernel_tan+0x348>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa f9d4 	bl	80001d4 <__adddf3>
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	462b      	mov	r3, r5
 8005e30:	f7fa fb86 	bl	8000540 <__aeabi_dmul>
 8005e34:	a364      	add	r3, pc, #400	; (adr r3, 8005fc8 <__kernel_tan+0x350>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa f9cb 	bl	80001d4 <__adddf3>
 8005e3e:	ec53 2b18 	vmov	r2, r3, d8
 8005e42:	f7fa fb7d 	bl	8000540 <__aeabi_dmul>
 8005e46:	a362      	add	r3, pc, #392	; (adr r3, 8005fd0 <__kernel_tan+0x358>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	ec41 0b1a 	vmov	d10, r0, r1
 8005e50:	4620      	mov	r0, r4
 8005e52:	4629      	mov	r1, r5
 8005e54:	f7fa fb74 	bl	8000540 <__aeabi_dmul>
 8005e58:	a35f      	add	r3, pc, #380	; (adr r3, 8005fd8 <__kernel_tan+0x360>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa f9b9 	bl	80001d4 <__adddf3>
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	f7fa fb6b 	bl	8000540 <__aeabi_dmul>
 8005e6a:	a35d      	add	r3, pc, #372	; (adr r3, 8005fe0 <__kernel_tan+0x368>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa f9b0 	bl	80001d4 <__adddf3>
 8005e74:	4622      	mov	r2, r4
 8005e76:	462b      	mov	r3, r5
 8005e78:	f7fa fb62 	bl	8000540 <__aeabi_dmul>
 8005e7c:	a35a      	add	r3, pc, #360	; (adr r3, 8005fe8 <__kernel_tan+0x370>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa f9a7 	bl	80001d4 <__adddf3>
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	f7fa fb59 	bl	8000540 <__aeabi_dmul>
 8005e8e:	a358      	add	r3, pc, #352	; (adr r3, 8005ff0 <__kernel_tan+0x378>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa f99e 	bl	80001d4 <__adddf3>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	f7fa fb50 	bl	8000540 <__aeabi_dmul>
 8005ea0:	a355      	add	r3, pc, #340	; (adr r3, 8005ff8 <__kernel_tan+0x380>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f995 	bl	80001d4 <__adddf3>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	ec51 0b1a 	vmov	r0, r1, d10
 8005eb2:	f7fa f98f 	bl	80001d4 <__adddf3>
 8005eb6:	ec53 2b19 	vmov	r2, r3, d9
 8005eba:	f7fa fb41 	bl	8000540 <__aeabi_dmul>
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	f7fa f987 	bl	80001d4 <__adddf3>
 8005ec6:	ec53 2b18 	vmov	r2, r3, d8
 8005eca:	f7fa fb39 	bl	8000540 <__aeabi_dmul>
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	f7fa f97f 	bl	80001d4 <__adddf3>
 8005ed6:	a34a      	add	r3, pc, #296	; (adr r3, 8006000 <__kernel_tan+0x388>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	4604      	mov	r4, r0
 8005ede:	460d      	mov	r5, r1
 8005ee0:	ec51 0b19 	vmov	r0, r1, d9
 8005ee4:	f7fa fb2c 	bl	8000540 <__aeabi_dmul>
 8005ee8:	4622      	mov	r2, r4
 8005eea:	462b      	mov	r3, r5
 8005eec:	f7fa f972 	bl	80001d4 <__adddf3>
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	ec41 0b18 	vmov	d8, r0, r1
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4659      	mov	r1, fp
 8005efa:	4650      	mov	r0, sl
 8005efc:	f7fa f96a 	bl	80001d4 <__adddf3>
 8005f00:	4b44      	ldr	r3, [pc, #272]	; (8006014 <__kernel_tan+0x39c>)
 8005f02:	429f      	cmp	r7, r3
 8005f04:	4604      	mov	r4, r0
 8005f06:	460d      	mov	r5, r1
 8005f08:	f340 8086 	ble.w	8006018 <__kernel_tan+0x3a0>
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7fa faad 	bl	800046c <__aeabi_i2d>
 8005f12:	4622      	mov	r2, r4
 8005f14:	4680      	mov	r8, r0
 8005f16:	4689      	mov	r9, r1
 8005f18:	462b      	mov	r3, r5
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f7fa fb0f 	bl	8000540 <__aeabi_dmul>
 8005f22:	4642      	mov	r2, r8
 8005f24:	4606      	mov	r6, r0
 8005f26:	460f      	mov	r7, r1
 8005f28:	464b      	mov	r3, r9
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	f7fa f951 	bl	80001d4 <__adddf3>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4630      	mov	r0, r6
 8005f38:	4639      	mov	r1, r7
 8005f3a:	f7fa fc2b 	bl	8000794 <__aeabi_ddiv>
 8005f3e:	ec53 2b18 	vmov	r2, r3, d8
 8005f42:	f7fa f945 	bl	80001d0 <__aeabi_dsub>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	f7fa f93f 	bl	80001d0 <__aeabi_dsub>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	f7fa f93d 	bl	80001d4 <__adddf3>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa f935 	bl	80001d0 <__aeabi_dsub>
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005f6c:	f00a 0a02 	and.w	sl, sl, #2
 8005f70:	4604      	mov	r4, r0
 8005f72:	f1ca 0001 	rsb	r0, sl, #1
 8005f76:	460d      	mov	r5, r1
 8005f78:	f7fa fa78 	bl	800046c <__aeabi_i2d>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa fadc 	bl	8000540 <__aeabi_dmul>
 8005f88:	e69f      	b.n	8005cca <__kernel_tan+0x52>
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w
 8005f90:	54442d18 	.word	0x54442d18
 8005f94:	3fe921fb 	.word	0x3fe921fb
 8005f98:	33145c07 	.word	0x33145c07
 8005f9c:	3c81a626 	.word	0x3c81a626
 8005fa0:	74bf7ad4 	.word	0x74bf7ad4
 8005fa4:	3efb2a70 	.word	0x3efb2a70
 8005fa8:	32f0a7e9 	.word	0x32f0a7e9
 8005fac:	3f12b80f 	.word	0x3f12b80f
 8005fb0:	1a8d1068 	.word	0x1a8d1068
 8005fb4:	3f3026f7 	.word	0x3f3026f7
 8005fb8:	fee08315 	.word	0xfee08315
 8005fbc:	3f57dbc8 	.word	0x3f57dbc8
 8005fc0:	e96e8493 	.word	0xe96e8493
 8005fc4:	3f8226e3 	.word	0x3f8226e3
 8005fc8:	1bb341fe 	.word	0x1bb341fe
 8005fcc:	3faba1ba 	.word	0x3faba1ba
 8005fd0:	db605373 	.word	0xdb605373
 8005fd4:	bef375cb 	.word	0xbef375cb
 8005fd8:	a03792a6 	.word	0xa03792a6
 8005fdc:	3f147e88 	.word	0x3f147e88
 8005fe0:	f2f26501 	.word	0xf2f26501
 8005fe4:	3f4344d8 	.word	0x3f4344d8
 8005fe8:	c9560328 	.word	0xc9560328
 8005fec:	3f6d6d22 	.word	0x3f6d6d22
 8005ff0:	8406d637 	.word	0x8406d637
 8005ff4:	3f9664f4 	.word	0x3f9664f4
 8005ff8:	1110fe7a 	.word	0x1110fe7a
 8005ffc:	3fc11111 	.word	0x3fc11111
 8006000:	55555563 	.word	0x55555563
 8006004:	3fd55555 	.word	0x3fd55555
 8006008:	3e2fffff 	.word	0x3e2fffff
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	bff00000 	.word	0xbff00000
 8006014:	3fe59427 	.word	0x3fe59427
 8006018:	2e01      	cmp	r6, #1
 800601a:	d02f      	beq.n	800607c <__kernel_tan+0x404>
 800601c:	460f      	mov	r7, r1
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4689      	mov	r9, r1
 8006024:	2000      	movs	r0, #0
 8006026:	4917      	ldr	r1, [pc, #92]	; (8006084 <__kernel_tan+0x40c>)
 8006028:	f7fa fbb4 	bl	8000794 <__aeabi_ddiv>
 800602c:	2600      	movs	r6, #0
 800602e:	e9cd 0100 	strd	r0, r1, [sp]
 8006032:	4652      	mov	r2, sl
 8006034:	465b      	mov	r3, fp
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7fa f8c9 	bl	80001d0 <__aeabi_dsub>
 800603e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	ec51 0b18 	vmov	r0, r1, d8
 800604a:	f7fa f8c1 	bl	80001d0 <__aeabi_dsub>
 800604e:	4632      	mov	r2, r6
 8006050:	462b      	mov	r3, r5
 8006052:	f7fa fa75 	bl	8000540 <__aeabi_dmul>
 8006056:	46b0      	mov	r8, r6
 8006058:	460f      	mov	r7, r1
 800605a:	4642      	mov	r2, r8
 800605c:	462b      	mov	r3, r5
 800605e:	4634      	mov	r4, r6
 8006060:	4649      	mov	r1, r9
 8006062:	4606      	mov	r6, r0
 8006064:	4640      	mov	r0, r8
 8006066:	f7fa fa6b 	bl	8000540 <__aeabi_dmul>
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <__kernel_tan+0x410>)
 800606c:	2200      	movs	r2, #0
 800606e:	f7fa f8b1 	bl	80001d4 <__adddf3>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4630      	mov	r0, r6
 8006078:	4639      	mov	r1, r7
 800607a:	e665      	b.n	8005d48 <__kernel_tan+0xd0>
 800607c:	4682      	mov	sl, r0
 800607e:	468b      	mov	fp, r1
 8006080:	e625      	b.n	8005cce <__kernel_tan+0x56>
 8006082:	bf00      	nop
 8006084:	bff00000 	.word	0xbff00000
 8006088:	3ff00000 	.word	0x3ff00000

0800608c <fabs>:
 800608c:	ec51 0b10 	vmov	r0, r1, d0
 8006090:	ee10 2a10 	vmov	r2, s0
 8006094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006098:	ec43 2b10 	vmov	d0, r2, r3
 800609c:	4770      	bx	lr
	...

080060a0 <floor>:
 80060a0:	ec51 0b10 	vmov	r0, r1, d0
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80060ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80060b0:	2e13      	cmp	r6, #19
 80060b2:	ee10 5a10 	vmov	r5, s0
 80060b6:	ee10 8a10 	vmov	r8, s0
 80060ba:	460c      	mov	r4, r1
 80060bc:	dc32      	bgt.n	8006124 <floor+0x84>
 80060be:	2e00      	cmp	r6, #0
 80060c0:	da14      	bge.n	80060ec <floor+0x4c>
 80060c2:	a333      	add	r3, pc, #204	; (adr r3, 8006190 <floor+0xf0>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa f884 	bl	80001d4 <__adddf3>
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	f7fa fcc6 	bl	8000a60 <__aeabi_dcmpgt>
 80060d4:	b138      	cbz	r0, 80060e6 <floor+0x46>
 80060d6:	2c00      	cmp	r4, #0
 80060d8:	da57      	bge.n	800618a <floor+0xea>
 80060da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80060de:	431d      	orrs	r5, r3
 80060e0:	d001      	beq.n	80060e6 <floor+0x46>
 80060e2:	4c2d      	ldr	r4, [pc, #180]	; (8006198 <floor+0xf8>)
 80060e4:	2500      	movs	r5, #0
 80060e6:	4621      	mov	r1, r4
 80060e8:	4628      	mov	r0, r5
 80060ea:	e025      	b.n	8006138 <floor+0x98>
 80060ec:	4f2b      	ldr	r7, [pc, #172]	; (800619c <floor+0xfc>)
 80060ee:	4137      	asrs	r7, r6
 80060f0:	ea01 0307 	and.w	r3, r1, r7
 80060f4:	4303      	orrs	r3, r0
 80060f6:	d01f      	beq.n	8006138 <floor+0x98>
 80060f8:	a325      	add	r3, pc, #148	; (adr r3, 8006190 <floor+0xf0>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa f869 	bl	80001d4 <__adddf3>
 8006102:	2200      	movs	r2, #0
 8006104:	2300      	movs	r3, #0
 8006106:	f7fa fcab 	bl	8000a60 <__aeabi_dcmpgt>
 800610a:	2800      	cmp	r0, #0
 800610c:	d0eb      	beq.n	80060e6 <floor+0x46>
 800610e:	2c00      	cmp	r4, #0
 8006110:	bfbe      	ittt	lt
 8006112:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006116:	fa43 f606 	asrlt.w	r6, r3, r6
 800611a:	19a4      	addlt	r4, r4, r6
 800611c:	ea24 0407 	bic.w	r4, r4, r7
 8006120:	2500      	movs	r5, #0
 8006122:	e7e0      	b.n	80060e6 <floor+0x46>
 8006124:	2e33      	cmp	r6, #51	; 0x33
 8006126:	dd0b      	ble.n	8006140 <floor+0xa0>
 8006128:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800612c:	d104      	bne.n	8006138 <floor+0x98>
 800612e:	ee10 2a10 	vmov	r2, s0
 8006132:	460b      	mov	r3, r1
 8006134:	f7fa f84e 	bl	80001d4 <__adddf3>
 8006138:	ec41 0b10 	vmov	d0, r0, r1
 800613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006140:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006144:	f04f 33ff 	mov.w	r3, #4294967295
 8006148:	fa23 f707 	lsr.w	r7, r3, r7
 800614c:	4207      	tst	r7, r0
 800614e:	d0f3      	beq.n	8006138 <floor+0x98>
 8006150:	a30f      	add	r3, pc, #60	; (adr r3, 8006190 <floor+0xf0>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa f83d 	bl	80001d4 <__adddf3>
 800615a:	2200      	movs	r2, #0
 800615c:	2300      	movs	r3, #0
 800615e:	f7fa fc7f 	bl	8000a60 <__aeabi_dcmpgt>
 8006162:	2800      	cmp	r0, #0
 8006164:	d0bf      	beq.n	80060e6 <floor+0x46>
 8006166:	2c00      	cmp	r4, #0
 8006168:	da02      	bge.n	8006170 <floor+0xd0>
 800616a:	2e14      	cmp	r6, #20
 800616c:	d103      	bne.n	8006176 <floor+0xd6>
 800616e:	3401      	adds	r4, #1
 8006170:	ea25 0507 	bic.w	r5, r5, r7
 8006174:	e7b7      	b.n	80060e6 <floor+0x46>
 8006176:	2301      	movs	r3, #1
 8006178:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800617c:	fa03 f606 	lsl.w	r6, r3, r6
 8006180:	4435      	add	r5, r6
 8006182:	4545      	cmp	r5, r8
 8006184:	bf38      	it	cc
 8006186:	18e4      	addcc	r4, r4, r3
 8006188:	e7f2      	b.n	8006170 <floor+0xd0>
 800618a:	2500      	movs	r5, #0
 800618c:	462c      	mov	r4, r5
 800618e:	e7aa      	b.n	80060e6 <floor+0x46>
 8006190:	8800759c 	.word	0x8800759c
 8006194:	7e37e43c 	.word	0x7e37e43c
 8006198:	bff00000 	.word	0xbff00000
 800619c:	000fffff 	.word	0x000fffff

080061a0 <scalbn>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	ec55 4b10 	vmov	r4, r5, d0
 80061a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80061aa:	4606      	mov	r6, r0
 80061ac:	462b      	mov	r3, r5
 80061ae:	b99a      	cbnz	r2, 80061d8 <scalbn+0x38>
 80061b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061b4:	4323      	orrs	r3, r4
 80061b6:	d036      	beq.n	8006226 <scalbn+0x86>
 80061b8:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <scalbn+0x100>)
 80061ba:	4629      	mov	r1, r5
 80061bc:	ee10 0a10 	vmov	r0, s0
 80061c0:	2200      	movs	r2, #0
 80061c2:	f7fa f9bd 	bl	8000540 <__aeabi_dmul>
 80061c6:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <scalbn+0x104>)
 80061c8:	429e      	cmp	r6, r3
 80061ca:	4604      	mov	r4, r0
 80061cc:	460d      	mov	r5, r1
 80061ce:	da10      	bge.n	80061f2 <scalbn+0x52>
 80061d0:	a32b      	add	r3, pc, #172	; (adr r3, 8006280 <scalbn+0xe0>)
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	e03a      	b.n	800624e <scalbn+0xae>
 80061d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80061dc:	428a      	cmp	r2, r1
 80061de:	d10c      	bne.n	80061fa <scalbn+0x5a>
 80061e0:	ee10 2a10 	vmov	r2, s0
 80061e4:	4620      	mov	r0, r4
 80061e6:	4629      	mov	r1, r5
 80061e8:	f7f9 fff4 	bl	80001d4 <__adddf3>
 80061ec:	4604      	mov	r4, r0
 80061ee:	460d      	mov	r5, r1
 80061f0:	e019      	b.n	8006226 <scalbn+0x86>
 80061f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061f6:	460b      	mov	r3, r1
 80061f8:	3a36      	subs	r2, #54	; 0x36
 80061fa:	4432      	add	r2, r6
 80061fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006200:	428a      	cmp	r2, r1
 8006202:	dd08      	ble.n	8006216 <scalbn+0x76>
 8006204:	2d00      	cmp	r5, #0
 8006206:	a120      	add	r1, pc, #128	; (adr r1, 8006288 <scalbn+0xe8>)
 8006208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800620c:	da1c      	bge.n	8006248 <scalbn+0xa8>
 800620e:	a120      	add	r1, pc, #128	; (adr r1, 8006290 <scalbn+0xf0>)
 8006210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006214:	e018      	b.n	8006248 <scalbn+0xa8>
 8006216:	2a00      	cmp	r2, #0
 8006218:	dd08      	ble.n	800622c <scalbn+0x8c>
 800621a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800621e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006222:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006226:	ec45 4b10 	vmov	d0, r4, r5
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006230:	da19      	bge.n	8006266 <scalbn+0xc6>
 8006232:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006236:	429e      	cmp	r6, r3
 8006238:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800623c:	dd0a      	ble.n	8006254 <scalbn+0xb4>
 800623e:	a112      	add	r1, pc, #72	; (adr r1, 8006288 <scalbn+0xe8>)
 8006240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e2      	bne.n	800620e <scalbn+0x6e>
 8006248:	a30f      	add	r3, pc, #60	; (adr r3, 8006288 <scalbn+0xe8>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7fa f977 	bl	8000540 <__aeabi_dmul>
 8006252:	e7cb      	b.n	80061ec <scalbn+0x4c>
 8006254:	a10a      	add	r1, pc, #40	; (adr r1, 8006280 <scalbn+0xe0>)
 8006256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0b8      	beq.n	80061d0 <scalbn+0x30>
 800625e:	a10e      	add	r1, pc, #56	; (adr r1, 8006298 <scalbn+0xf8>)
 8006260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006264:	e7b4      	b.n	80061d0 <scalbn+0x30>
 8006266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800626a:	3236      	adds	r2, #54	; 0x36
 800626c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006270:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006274:	4620      	mov	r0, r4
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <scalbn+0x108>)
 8006278:	2200      	movs	r2, #0
 800627a:	e7e8      	b.n	800624e <scalbn+0xae>
 800627c:	f3af 8000 	nop.w
 8006280:	c2f8f359 	.word	0xc2f8f359
 8006284:	01a56e1f 	.word	0x01a56e1f
 8006288:	8800759c 	.word	0x8800759c
 800628c:	7e37e43c 	.word	0x7e37e43c
 8006290:	8800759c 	.word	0x8800759c
 8006294:	fe37e43c 	.word	0xfe37e43c
 8006298:	c2f8f359 	.word	0xc2f8f359
 800629c:	81a56e1f 	.word	0x81a56e1f
 80062a0:	43500000 	.word	0x43500000
 80062a4:	ffff3cb0 	.word	0xffff3cb0
 80062a8:	3c900000 	.word	0x3c900000

080062ac <_init>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	bf00      	nop
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr

080062b8 <_fini>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	bf00      	nop
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr
