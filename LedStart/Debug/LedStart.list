
LedStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001bc8  08001bc8  00011bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf8  08001bf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf8  08001bf8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf8  08001bf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c68  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dfb  00000000  00000000  00023ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d8  00000000  00000000  00024aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000350  00000000  00000000  00024e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b59f  00000000  00000000  000251c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005040  00000000  00000000  00040767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4048  00000000  00000000  000457a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e97ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d70  00000000  00000000  000e9840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001bb0 	.word	0x08001bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001bb0 	.word	0x08001bb0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f916 	bl	80003fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f844 	bl	800025c <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80001d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d8:	481f      	ldr	r0, [pc, #124]	; (8000258 <main+0x90>)
 80001da:	f000 fa7e 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f972 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80001e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e8:	481b      	ldr	r0, [pc, #108]	; (8000258 <main+0x90>)
 80001ea:	f000 fa76 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80001ee:	2064      	movs	r0, #100	; 0x64
 80001f0:	f000 f96a 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80001f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f8:	4817      	ldr	r0, [pc, #92]	; (8000258 <main+0x90>)
 80001fa:	f000 fa6e 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	; 0x64
 8000200:	f000 f962 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000208:	4813      	ldr	r0, [pc, #76]	; (8000258 <main+0x90>)
 800020a:	f000 fa66 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800020e:	2064      	movs	r0, #100	; 0x64
 8000210:	f000 f95a 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8000214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000218:	480f      	ldr	r0, [pc, #60]	; (8000258 <main+0x90>)
 800021a:	f000 fa5e 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800021e:	2064      	movs	r0, #100	; 0x64
 8000220:	f000 f952 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8000224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000228:	480b      	ldr	r0, [pc, #44]	; (8000258 <main+0x90>)
 800022a:	f000 fa56 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800022e:	2064      	movs	r0, #100	; 0x64
 8000230:	f000 f94a 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 8000234:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000238:	4807      	ldr	r0, [pc, #28]	; (8000258 <main+0x90>)
 800023a:	f000 fa4e 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800023e:	2064      	movs	r0, #100	; 0x64
 8000240:	f000 f942 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8000244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <main+0x90>)
 800024a:	f000 fa46 	bl	80006da <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f000 f93a 	bl	80004c8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000254:	e7be      	b.n	80001d4 <main+0xc>
 8000256:	bf00      	nop
 8000258:	48001000 	.word	0x48001000

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fc98 	bl	8001ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2310      	movs	r3, #16
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028e:	2300      	movs	r3, #0
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000292:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fa37 	bl	8000710 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a8:	f000 f819 	bl	80002de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fa60 	bl	800178c <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002d2:	f000 f804 	bl	80002de <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	; 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e2:	b672      	cpsid	i
}
 80002e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <Error_Handler+0x8>

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <HAL_MspInit+0x44>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <HAL_MspInit+0x44>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <HAL_MspInit+0x44>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <HAL_MspInit+0x44>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4a08      	ldr	r2, [pc, #32]	; (800032c <HAL_MspInit+0x44>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000310:	61d3      	str	r3, [r2, #28]
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_MspInit+0x44>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800031e:	2007      	movs	r0, #7
 8000320:	f000 f9a8 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40021000 	.word	0x40021000

08000330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <NMI_Handler+0x4>

08000336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <HardFault_Handler+0x4>

0800033c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <MemManage_Handler+0x4>

08000342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <BusFault_Handler+0x4>

08000348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <UsageFault_Handler+0x4>

0800034e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037c:	f000 f884 	bl	8000488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <SystemInit+0x20>)
 800038a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038e:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <SystemInit+0x20>)
 8000390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80003ac:	f7ff ffea 	bl	8000384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d6:	f001 fbbf 	bl	8001b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003da:	f7ff fef5 	bl	80001c8 <main>

080003de <LoopForever>:

LoopForever:
    b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003ec:	08001c00 	.word	0x08001c00
  ldr r2, =_sbss
 80003f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003f4:	2000002c 	.word	0x2000002c

080003f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC1_2_IRQHandler>
	...

080003fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <HAL_Init+0x28>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a07      	ldr	r2, [pc, #28]	; (8000424 <HAL_Init+0x28>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800040c:	2003      	movs	r0, #3
 800040e:	f000 f931 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000412:	2000      	movs	r0, #0
 8000414:	f000 f808 	bl	8000428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000418:	f7ff ff66 	bl	80002e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800041c:	2300      	movs	r3, #0
}
 800041e:	4618      	mov	r0, r3
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40022000 	.word	0x40022000

08000428 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <HAL_InitTick+0x54>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_InitTick+0x58>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000442:	fbb2 f3f3 	udiv	r3, r2, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f93b 	bl	80006c2 <HAL_SYSTICK_Config>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
 8000454:	e00e      	b.n	8000474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b0f      	cmp	r3, #15
 800045a:	d80a      	bhi.n	8000472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800045c:	2200      	movs	r2, #0
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	f04f 30ff 	mov.w	r0, #4294967295
 8000464:	f000 f911 	bl	800068a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000468:	4a06      	ldr	r2, [pc, #24]	; (8000484 <HAL_InitTick+0x5c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800046e:	2300      	movs	r3, #0
 8000470:	e000      	b.n	8000474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000472:	2301      	movs	r3, #1
}
 8000474:	4618      	mov	r0, r3
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000000 	.word	0x20000000
 8000480:	20000008 	.word	0x20000008
 8000484:	20000004 	.word	0x20000004

08000488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_IncTick+0x20>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_IncTick+0x24>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_IncTick+0x24>)
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000008 	.word	0x20000008
 80004ac:	20000028 	.word	0x20000028

080004b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <HAL_GetTick+0x14>)
 80004b6:	681b      	ldr	r3, [r3, #0]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000028 	.word	0x20000028

080004c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004d0:	f7ff ffee 	bl	80004b0 <HAL_GetTick>
 80004d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004e0:	d005      	beq.n	80004ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_Delay+0x44>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	461a      	mov	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004ee:	bf00      	nop
 80004f0:	f7ff ffde 	bl	80004b0 <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d8f7      	bhi.n	80004f0 <HAL_Delay+0x28>
  {
  }
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000008 	.word	0x20000008

08000510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__NVIC_SetPriorityGrouping+0x44>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800052c:	4013      	ands	r3, r2
 800052e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800053c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <__NVIC_SetPriorityGrouping+0x44>)
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	60d3      	str	r3, [r2, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <__NVIC_GetPriorityGrouping+0x18>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f003 0307 	and.w	r3, r3, #7
}
 8000566:	4618      	mov	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	db0a      	blt.n	800059e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	b2da      	uxtb	r2, r3
 800058c:	490c      	ldr	r1, [pc, #48]	; (80005c0 <__NVIC_SetPriority+0x4c>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	0112      	lsls	r2, r2, #4
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	440b      	add	r3, r1
 8000598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800059c:	e00a      	b.n	80005b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4908      	ldr	r1, [pc, #32]	; (80005c4 <__NVIC_SetPriority+0x50>)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	3b04      	subs	r3, #4
 80005ac:	0112      	lsls	r2, r2, #4
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	440b      	add	r3, r1
 80005b2:	761a      	strb	r2, [r3, #24]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000e100 	.word	0xe000e100
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b089      	sub	sp, #36	; 0x24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	f1c3 0307 	rsb	r3, r3, #7
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	bf28      	it	cs
 80005e6:	2304      	movcs	r3, #4
 80005e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3304      	adds	r3, #4
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d902      	bls.n	80005f8 <NVIC_EncodePriority+0x30>
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3b03      	subs	r3, #3
 80005f6:	e000      	b.n	80005fa <NVIC_EncodePriority+0x32>
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43da      	mvns	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	401a      	ands	r2, r3
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000610:	f04f 31ff 	mov.w	r1, #4294967295
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43d9      	mvns	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	4313      	orrs	r3, r2
         );
}
 8000622:	4618      	mov	r0, r3
 8000624:	3724      	adds	r7, #36	; 0x24
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3b01      	subs	r3, #1
 800063c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000640:	d301      	bcc.n	8000646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000642:	2301      	movs	r3, #1
 8000644:	e00f      	b.n	8000666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <SysTick_Config+0x40>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064e:	210f      	movs	r1, #15
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f7ff ff8e 	bl	8000574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SysTick_Config+0x40>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <SysTick_Config+0x40>)
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010

08000674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff47 	bl	8000510 <__NVIC_SetPriorityGrouping>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800069c:	f7ff ff5c 	bl	8000558 <__NVIC_GetPriorityGrouping>
 80006a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	68b9      	ldr	r1, [r7, #8]
 80006a6:	6978      	ldr	r0, [r7, #20]
 80006a8:	f7ff ff8e 	bl	80005c8 <NVIC_EncodePriority>
 80006ac:	4602      	mov	r2, r0
 80006ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff5d 	bl	8000574 <__NVIC_SetPriority>
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffb0 	bl	8000630 <SysTick_Config>
 80006d0:	4603      	mov	r3, r0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006da:	b480      	push	{r7}
 80006dc:	b085      	sub	sp, #20
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	460b      	mov	r3, r1
 80006e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80006ec:	887a      	ldrh	r2, [r7, #2]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4013      	ands	r3, r2
 80006f2:	041a      	lsls	r2, r3, #16
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	400b      	ands	r3, r1
 80006fc:	431a      	orrs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	619a      	str	r2, [r3, #24]
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000716:	af00      	add	r7, sp, #0
 8000718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800071c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000720:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d102      	bne.n	8000736 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000730:	2301      	movs	r3, #1
 8000732:	f001 b823 	b.w	800177c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800073a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	f000 817d 	beq.w	8000a46 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800074c:	4bbc      	ldr	r3, [pc, #752]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f003 030c 	and.w	r3, r3, #12
 8000754:	2b04      	cmp	r3, #4
 8000756:	d00c      	beq.n	8000772 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000758:	4bb9      	ldr	r3, [pc, #740]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f003 030c 	and.w	r3, r3, #12
 8000760:	2b08      	cmp	r3, #8
 8000762:	d15c      	bne.n	800081e <HAL_RCC_OscConfig+0x10e>
 8000764:	4bb6      	ldr	r3, [pc, #728]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800076c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000770:	d155      	bne.n	800081e <HAL_RCC_OscConfig+0x10e>
 8000772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000776:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800077a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800077e:	fa93 f3a3 	rbit	r3, r3
 8000782:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000786:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800078a:	fab3 f383 	clz	r3, r3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	095b      	lsrs	r3, r3, #5
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b01      	cmp	r3, #1
 800079c:	d102      	bne.n	80007a4 <HAL_RCC_OscConfig+0x94>
 800079e:	4ba8      	ldr	r3, [pc, #672]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	e015      	b.n	80007d0 <HAL_RCC_OscConfig+0xc0>
 80007a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007a8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80007b0:	fa93 f3a3 	rbit	r3, r3
 80007b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80007b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80007c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80007c4:	fa93 f3a3 	rbit	r3, r3
 80007c8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80007cc:	4b9c      	ldr	r3, [pc, #624]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 80007ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007d4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80007d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80007dc:	fa92 f2a2 	rbit	r2, r2
 80007e0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80007e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80007e8:	fab2 f282 	clz	r2, r2
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	f042 0220 	orr.w	r2, r2, #32
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	f002 021f 	and.w	r2, r2, #31
 80007f8:	2101      	movs	r1, #1
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	4013      	ands	r3, r2
 8000800:	2b00      	cmp	r3, #0
 8000802:	f000 811f 	beq.w	8000a44 <HAL_RCC_OscConfig+0x334>
 8000806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800080a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8116 	bne.w	8000a44 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	f000 bfaf 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800081e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800082e:	d106      	bne.n	800083e <HAL_RCC_OscConfig+0x12e>
 8000830:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a82      	ldr	r2, [pc, #520]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	e036      	b.n	80008ac <HAL_RCC_OscConfig+0x19c>
 800083e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10c      	bne.n	8000868 <HAL_RCC_OscConfig+0x158>
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a7b      	ldr	r2, [pc, #492]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	4b79      	ldr	r3, [pc, #484]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a78      	ldr	r2, [pc, #480]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e021      	b.n	80008ac <HAL_RCC_OscConfig+0x19c>
 8000868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800086c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000878:	d10c      	bne.n	8000894 <HAL_RCC_OscConfig+0x184>
 800087a:	4b71      	ldr	r3, [pc, #452]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a70      	ldr	r2, [pc, #448]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	4b6e      	ldr	r3, [pc, #440]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a6d      	ldr	r2, [pc, #436]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 800088c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e00b      	b.n	80008ac <HAL_RCC_OscConfig+0x19c>
 8000894:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a69      	ldr	r2, [pc, #420]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 800089a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a66      	ldr	r2, [pc, #408]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 80008a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008ac:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	f023 020f 	bic.w	r2, r3, #15
 80008b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	495f      	ldr	r1, [pc, #380]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 80008c2:	4313      	orrs	r3, r2
 80008c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d059      	beq.n	800098a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d6:	f7ff fdeb 	bl	80004b0 <HAL_GetTick>
 80008da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008de:	e00a      	b.n	80008f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008e0:	f7ff fde6 	bl	80004b0 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b64      	cmp	r3, #100	; 0x64
 80008ee:	d902      	bls.n	80008f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80008f0:	2303      	movs	r3, #3
 80008f2:	f000 bf43 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
 80008f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000902:	fa93 f3a3 	rbit	r3, r3
 8000906:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800090a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090e:	fab3 f383 	clz	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b01      	cmp	r3, #1
 8000920:	d102      	bne.n	8000928 <HAL_RCC_OscConfig+0x218>
 8000922:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	e015      	b.n	8000954 <HAL_RCC_OscConfig+0x244>
 8000928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800092c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000930:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000934:	fa93 f3a3 	rbit	r3, r3
 8000938:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800093c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000940:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000944:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000948:	fa93 f3a3 	rbit	r3, r3
 800094c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000950:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000954:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000958:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800095c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000960:	fa92 f2a2 	rbit	r2, r2
 8000964:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000968:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800096c:	fab2 f282 	clz	r2, r2
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	f042 0220 	orr.w	r2, r2, #32
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	f002 021f 	and.w	r2, r2, #31
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4013      	ands	r3, r2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0ab      	beq.n	80008e0 <HAL_RCC_OscConfig+0x1d0>
 8000988:	e05d      	b.n	8000a46 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098a:	f7ff fd91 	bl	80004b0 <HAL_GetTick>
 800098e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000992:	e00a      	b.n	80009aa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000994:	f7ff fd8c 	bl	80004b0 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	2b64      	cmp	r3, #100	; 0x64
 80009a2:	d902      	bls.n	80009aa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80009a4:	2303      	movs	r3, #3
 80009a6:	f000 bee9 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
 80009aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80009b6:	fa93 f3a3 	rbit	r3, r3
 80009ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80009be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c2:	fab3 f383 	clz	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	095b      	lsrs	r3, r3, #5
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d102      	bne.n	80009dc <HAL_RCC_OscConfig+0x2cc>
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	e015      	b.n	8000a08 <HAL_RCC_OscConfig+0x2f8>
 80009dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80009e8:	fa93 f3a3 	rbit	r3, r3
 80009ec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80009f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009f4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80009f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80009fc:	fa93 f3a3 	rbit	r3, r3
 8000a00:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_RCC_OscConfig+0x330>)
 8000a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a0c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000a10:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a14:	fa92 f2a2 	rbit	r2, r2
 8000a18:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000a1c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	f042 0220 	orr.w	r2, r2, #32
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	f002 021f 	and.w	r2, r2, #31
 8000a30:	2101      	movs	r1, #1
 8000a32:	fa01 f202 	lsl.w	r2, r1, r2
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1ab      	bne.n	8000994 <HAL_RCC_OscConfig+0x284>
 8000a3c:	e003      	b.n	8000a46 <HAL_RCC_OscConfig+0x336>
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 817d 	beq.w	8000d56 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a5c:	4ba6      	ldr	r3, [pc, #664]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 030c 	and.w	r3, r3, #12
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a68:	4ba3      	ldr	r3, [pc, #652]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 030c 	and.w	r3, r3, #12
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d172      	bne.n	8000b5a <HAL_RCC_OscConfig+0x44a>
 8000a74:	4ba0      	ldr	r3, [pc, #640]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d16c      	bne.n	8000b5a <HAL_RCC_OscConfig+0x44a>
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a86:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000a92:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a96:	fab3 f383 	clz	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	095b      	lsrs	r3, r3, #5
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x3a0>
 8000aaa:	4b93      	ldr	r3, [pc, #588]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	e013      	b.n	8000ad8 <HAL_RCC_OscConfig+0x3c8>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ac8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000acc:	fa93 f3a3 	rbit	r3, r3
 8000ad0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000ad4:	4b88      	ldr	r3, [pc, #544]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	2202      	movs	r2, #2
 8000ada:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ade:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ae2:	fa92 f2a2 	rbit	r2, r2
 8000ae6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000aea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	f042 0220 	orr.w	r2, r2, #32
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	f002 021f 	and.w	r2, r2, #31
 8000afe:	2101      	movs	r1, #1
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00a      	beq.n	8000b20 <HAL_RCC_OscConfig+0x410>
 8000b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d002      	beq.n	8000b20 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f000 be2e 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b20:	4b75      	ldr	r3, [pc, #468]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	21f8      	movs	r1, #248	; 0xf8
 8000b36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000b3e:	fa91 f1a1 	rbit	r1, r1
 8000b42:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000b46:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000b4a:	fab1 f181 	clz	r1, r1
 8000b4e:	b2c9      	uxtb	r1, r1
 8000b50:	408b      	lsls	r3, r1
 8000b52:	4969      	ldr	r1, [pc, #420]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000b54:	4313      	orrs	r3, r2
 8000b56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b58:	e0fd      	b.n	8000d56 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8088 	beq.w	8000c7c <HAL_RCC_OscConfig+0x56c>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000b76:	fa93 f3a3 	rbit	r3, r3
 8000b7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000b7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b82:	fab3 f383 	clz	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	461a      	mov	r2, r3
 8000b94:	2301      	movs	r3, #1
 8000b96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b98:	f7ff fc8a 	bl	80004b0 <HAL_GetTick>
 8000b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba0:	e00a      	b.n	8000bb8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fc85 	bl	80004b0 <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d902      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	f000 bde2 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
 8000bb8:	2302      	movs	r3, #2
 8000bba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000bc2:	fa93 f3a3 	rbit	r3, r3
 8000bc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000bca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bce:	fab3 f383 	clz	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	095b      	lsrs	r3, r3, #5
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d102      	bne.n	8000be8 <HAL_RCC_OscConfig+0x4d8>
 8000be2:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	e013      	b.n	8000c10 <HAL_RCC_OscConfig+0x500>
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000bf2:	fa93 f3a3 	rbit	r3, r3
 8000bf6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000c04:	fa93 f3a3 	rbit	r3, r3
 8000c08:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	2202      	movs	r2, #2
 8000c12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000c16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c1a:	fa92 f2a2 	rbit	r2, r2
 8000c1e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000c22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	f042 0220 	orr.w	r2, r2, #32
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	f002 021f 	and.w	r2, r2, #31
 8000c36:	2101      	movs	r1, #1
 8000c38:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0af      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	21f8      	movs	r1, #248	; 0xf8
 8000c58:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000c60:	fa91 f1a1 	rbit	r1, r1
 8000c64:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000c68:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000c6c:	fab1 f181 	clz	r1, r1
 8000c70:	b2c9      	uxtb	r1, r1
 8000c72:	408b      	lsls	r3, r1
 8000c74:	4920      	ldr	r1, [pc, #128]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
 8000c7a:	e06c      	b.n	8000d56 <HAL_RCC_OscConfig+0x646>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000c8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c92:	fab3 f383 	clz	r3, r3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fc02 	bl	80004b0 <HAL_GetTick>
 8000cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb0:	e00a      	b.n	8000cc8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb2:	f7ff fbfd 	bl	80004b0 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d902      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	f000 bd5a 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000cd2:	fa93 f3a3 	rbit	r3, r3
 8000cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cde:	fab3 f383 	clz	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	095b      	lsrs	r3, r3, #5
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d104      	bne.n	8000cfc <HAL_RCC_OscConfig+0x5ec>
 8000cf2:	4b01      	ldr	r3, [pc, #4]	; (8000cf8 <HAL_RCC_OscConfig+0x5e8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	e015      	b.n	8000d24 <HAL_RCC_OscConfig+0x614>
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000d20:	4bc8      	ldr	r3, [pc, #800]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	2202      	movs	r2, #2
 8000d26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000d2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d2e:	fa92 f2a2 	rbit	r2, r2
 8000d32:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000d36:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	f042 0220 	orr.w	r2, r2, #32
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	f002 021f 	and.w	r2, r2, #31
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1ad      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8110 	beq.w	8000f8c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d079      	beq.n	8000e70 <HAL_RCC_OscConfig+0x760>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8000d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4bab      	ldr	r3, [pc, #684]	; (8001048 <HAL_RCC_OscConfig+0x938>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	461a      	mov	r2, r3
 8000da2:	2301      	movs	r3, #1
 8000da4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fb83 	bl	80004b0 <HAL_GetTick>
 8000daa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	e00a      	b.n	8000dc6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fb7e 	bl	80004b0 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d902      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	f000 bcdb 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ddc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000de0:	2202      	movs	r2, #2
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	fa93 f2a3 	rbit	r2, r3
 8000df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e04:	2202      	movs	r2, #2
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	fa93 f2a3 	rbit	r2, r3
 8000e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e20:	4b88      	ldr	r3, [pc, #544]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8000e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	6019      	str	r1, [r3, #0]
 8000e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	fa93 f1a3 	rbit	r1, r3
 8000e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e46:	6019      	str	r1, [r3, #0]
  return result;
 8000e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0a0      	beq.n	8000db0 <HAL_RCC_OscConfig+0x6a0>
 8000e6e:	e08d      	b.n	8000f8c <HAL_RCC_OscConfig+0x87c>
 8000e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	fa93 f2a3 	rbit	r2, r3
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000e92:	601a      	str	r2, [r3, #0]
  return result;
 8000e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000e9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b68      	ldr	r3, [pc, #416]	; (8001048 <HAL_RCC_OscConfig+0x938>)
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	461a      	mov	r2, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fafd 	bl	80004b0 <HAL_GetTick>
 8000eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eba:	e00a      	b.n	8000ed2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff faf8 	bl	80004b0 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d902      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f000 bc55 	b.w	800177c <HAL_RCC_OscConfig+0x106c>
 8000ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000eda:	2202      	movs	r2, #2
 8000edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	fa93 f2a3 	rbit	r2, r3
 8000eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000efe:	2202      	movs	r2, #2
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	fa93 f2a3 	rbit	r2, r3
 8000f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f22:	2202      	movs	r2, #2
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	fa93 f2a3 	rbit	r2, r3
 8000f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8000f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	6019      	str	r1, [r3, #0]
 8000f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	fa93 f1a3 	rbit	r1, r3
 8000f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f64:	6019      	str	r1, [r3, #0]
  return result;
 8000f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f6a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	fab3 f383 	clz	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d197      	bne.n	8000ebc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 81a1 	beq.w	80012e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d116      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a22      	ldr	r2, [pc, #136]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	61d3      	str	r3, [r2, #28]
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fcc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000fda:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_RCC_OscConfig+0x93c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11a      	bne.n	8001024 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_RCC_OscConfig+0x93c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_RCC_OscConfig+0x93c>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fa59 	bl	80004b0 <HAL_GetTick>
 8000ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	e009      	b.n	8001018 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001004:	f7ff fa54 	bl	80004b0 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e3b1      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_RCC_OscConfig+0x93c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0ef      	beq.n	8001004 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10d      	bne.n	8001050 <HAL_RCC_OscConfig+0x940>
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a02      	ldr	r2, [pc, #8]	; (8001044 <HAL_RCC_OscConfig+0x934>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	e03c      	b.n	80010bc <HAL_RCC_OscConfig+0x9ac>
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	10908120 	.word	0x10908120
 800104c:	40007000 	.word	0x40007000
 8001050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10c      	bne.n	800107a <HAL_RCC_OscConfig+0x96a>
 8001060:	4bc1      	ldr	r3, [pc, #772]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4ac0      	ldr	r2, [pc, #768]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	4bbe      	ldr	r3, [pc, #760]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4abd      	ldr	r2, [pc, #756]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	e020      	b.n	80010bc <HAL_RCC_OscConfig+0x9ac>
 800107a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b05      	cmp	r3, #5
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x994>
 800108a:	4bb7      	ldr	r3, [pc, #732]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4ab6      	ldr	r2, [pc, #728]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	4bb4      	ldr	r3, [pc, #720]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4ab3      	ldr	r2, [pc, #716]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0x9ac>
 80010a4:	4bb0      	ldr	r3, [pc, #704]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4aaf      	ldr	r2, [pc, #700]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	4bad      	ldr	r3, [pc, #692]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4aac      	ldr	r2, [pc, #688]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8081 	beq.w	80011d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff f9ef 	bl	80004b0 <HAL_GetTick>
 80010d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d8:	f7ff f9ea 	bl	80004b0 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e345      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
 80010f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010f8:	2202      	movs	r2, #2
 80010fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	fa93 f2a3 	rbit	r2, r3
 800110a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800110e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001118:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800111c:	2202      	movs	r2, #2
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001124:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	fa93 f2a3 	rbit	r2, r3
 800112e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001132:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001136:	601a      	str	r2, [r3, #0]
  return result;
 8001138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001140:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0xa4c>
 8001156:	4b84      	ldr	r3, [pc, #528]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	e013      	b.n	8001184 <HAL_RCC_OscConfig+0xa74>
 800115c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001160:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001164:	2202      	movs	r2, #2
 8001166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	fa93 f2a3 	rbit	r2, r3
 8001176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	4b79      	ldr	r3, [pc, #484]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001188:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800118c:	2102      	movs	r1, #2
 800118e:	6011      	str	r1, [r2, #0]
 8001190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001194:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	fa92 f1a2 	rbit	r1, r2
 800119e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80011a6:	6011      	str	r1, [r2, #0]
  return result;
 80011a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011ac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	fab2 f282 	clz	r2, r2
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	f002 021f 	and.w	r2, r2, #31
 80011c2:	2101      	movs	r1, #1
 80011c4:	fa01 f202 	lsl.w	r2, r1, r2
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d084      	beq.n	80010d8 <HAL_RCC_OscConfig+0x9c8>
 80011ce:	e07f      	b.n	80012d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d0:	f7ff f96e 	bl	80004b0 <HAL_GetTick>
 80011d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d8:	e00b      	b.n	80011f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff f969 	bl	80004b0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e2c4      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
 80011f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80011fa:	2202      	movs	r2, #2
 80011fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001202:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	fa93 f2a3 	rbit	r2, r3
 800120c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001210:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800121a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800121e:	2202      	movs	r2, #2
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001226:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	fa93 f2a3 	rbit	r2, r3
 8001230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001234:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001238:	601a      	str	r2, [r3, #0]
  return result;
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001242:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d102      	bne.n	800125e <HAL_RCC_OscConfig+0xb4e>
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	e013      	b.n	8001286 <HAL_RCC_OscConfig+0xb76>
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001266:	2202      	movs	r2, #2
 8001268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	fa93 f2a3 	rbit	r2, r3
 8001278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800128a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800128e:	2102      	movs	r1, #2
 8001290:	6011      	str	r1, [r2, #0]
 8001292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001296:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	fa92 f1a2 	rbit	r1, r2
 80012a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80012a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80012a8:	6011      	str	r1, [r2, #0]
  return result;
 80012aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80012ae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	fab2 f282 	clz	r2, r2
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f002 021f 	and.w	r2, r2, #31
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d184      	bne.n	80011da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d105      	bne.n	80012e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 80012de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8242 	beq.w	800177a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_RCC_OscConfig+0xc58>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b08      	cmp	r3, #8
 8001300:	f000 8213 	beq.w	800172a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b02      	cmp	r3, #2
 8001312:	f040 8162 	bne.w	80015da <HAL_RCC_OscConfig+0xeca>
 8001316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800131e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001328:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	fa93 f2a3 	rbit	r2, r3
 8001332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001336:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800133a:	601a      	str	r2, [r3, #0]
  return result;
 800133c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001340:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001344:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	461a      	mov	r2, r3
 8001358:	2300      	movs	r3, #0
 800135a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff f8a8 	bl	80004b0 <HAL_GetTick>
 8001360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001364:	e00c      	b.n	8001380 <HAL_RCC_OscConfig+0xc70>
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff f8a0 	bl	80004b0 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1fd      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
 8001380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001384:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800138c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001392:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013a4:	601a      	str	r2, [r3, #0]
  return result;
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d102      	bne.n	80013ca <HAL_RCC_OscConfig+0xcba>
 80013c4:	4bb0      	ldr	r3, [pc, #704]	; (8001688 <HAL_RCC_OscConfig+0xf78>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	e027      	b.n	800141a <HAL_RCC_OscConfig+0xd0a>
 80013ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80013d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fa93 f2a3 	rbit	r2, r3
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80013f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f2a3 	rbit	r2, r3
 800140c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001410:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	4b9c      	ldr	r3, [pc, #624]	; (8001688 <HAL_RCC_OscConfig+0xf78>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800141e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001422:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001426:	6011      	str	r1, [r2, #0]
 8001428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800142c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	fa92 f1a2 	rbit	r1, r2
 8001436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800143a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800143e:	6011      	str	r1, [r2, #0]
  return result;
 8001440:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001444:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	fab2 f282 	clz	r2, r2
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f002 021f 	and.w	r2, r2, #31
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d182      	bne.n	800136c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001466:	4b88      	ldr	r3, [pc, #544]	; (8001688 <HAL_RCC_OscConfig+0xf78>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	430b      	orrs	r3, r1
 8001488:	497f      	ldr	r1, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0xf78>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001496:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800149a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80014b2:	601a      	str	r2, [r3, #0]
  return result;
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80014bc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	461a      	mov	r2, r3
 80014d0:	2301      	movs	r3, #1
 80014d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7fe ffec 	bl	80004b0 <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014de:	f7fe ffe7 	bl	80004b0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e144      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80014fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f2a3 	rbit	r2, r3
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001516:	601a      	str	r2, [r3, #0]
  return result;
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001520:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	095b      	lsrs	r3, r3, #5
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d102      	bne.n	800153c <HAL_RCC_OscConfig+0xe2c>
 8001536:	4b54      	ldr	r3, [pc, #336]	; (8001688 <HAL_RCC_OscConfig+0xf78>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	e027      	b.n	800158c <HAL_RCC_OscConfig+0xe7c>
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fa93 f2a3 	rbit	r2, r3
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001566:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800156a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001574:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_RCC_OscConfig+0xf78>)
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001590:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001594:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800159e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	fa92 f1a2 	rbit	r1, r2
 80015a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80015b0:	6011      	str	r1, [r2, #0]
  return result;
 80015b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	fab2 f282 	clz	r2, r2
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	f002 021f 	and.w	r2, r2, #31
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d082      	beq.n	80014de <HAL_RCC_OscConfig+0xdce>
 80015d8:	e0cf      	b.n	800177a <HAL_RCC_OscConfig+0x106a>
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80015e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015fe:	601a      	str	r2, [r3, #0]
  return result;
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001608:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	461a      	mov	r2, r3
 800161c:	2300      	movs	r3, #0
 800161e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7fe ff46 	bl	80004b0 <HAL_GetTick>
 8001624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	e009      	b.n	800163e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7fe ff41 	bl	80004b0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e09e      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001646:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001650:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f2a3 	rbit	r2, r3
 800165a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001662:	601a      	str	r2, [r3, #0]
  return result;
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800166c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	095b      	lsrs	r3, r3, #5
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d104      	bne.n	800168c <HAL_RCC_OscConfig+0xf7c>
 8001682:	4b01      	ldr	r3, [pc, #4]	; (8001688 <HAL_RCC_OscConfig+0xf78>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	e029      	b.n	80016dc <HAL_RCC_OscConfig+0xfcc>
 8001688:	40021000 	.word	0x40021000
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80016ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_RCC_OscConfig+0x1078>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80016e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016e8:	6011      	str	r1, [r2, #0]
 80016ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016ee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	fa92 f1a2 	rbit	r1, r2
 80016f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001700:	6011      	str	r1, [r2, #0]
  return result;
 8001702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001706:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f042 0220 	orr.w	r2, r2, #32
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d180      	bne.n	800162a <HAL_RCC_OscConfig+0xf1a>
 8001728:	e027      	b.n	800177a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e01e      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_RCC_OscConfig+0x1078>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001746:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800174a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	429a      	cmp	r2, r3
 800175c:	d10b      	bne.n	8001776 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800175e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09e      	sub	sp, #120	; 0x78
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e162      	b.n	8001a6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d910      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b8d      	ldr	r3, [pc, #564]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	498b      	ldr	r1, [pc, #556]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e14a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b82      	ldr	r3, [pc, #520]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	497f      	ldr	r1, [pc, #508]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80dc 	beq.w	80019b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d13c      	bne.n	8001882 <HAL_RCC_ClockConfig+0xf6>
 8001808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d102      	bne.n	8001832 <HAL_RCC_ClockConfig+0xa6>
 800182c:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	e00f      	b.n	8001852 <HAL_RCC_ClockConfig+0xc6>
 8001832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	667b      	str	r3, [r7, #100]	; 0x64
 8001840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001844:	663b      	str	r3, [r7, #96]	; 0x60
 8001846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001856:	65ba      	str	r2, [r7, #88]	; 0x58
 8001858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800185a:	fa92 f2a2 	rbit	r2, r2
 800185e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f002 021f 	and.w	r2, r2, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d17b      	bne.n	8001976 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0f3      	b.n	8001a6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d13c      	bne.n	8001904 <HAL_RCC_ClockConfig+0x178>
 800188a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x128>
 80018ae:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	e00f      	b.n	80018d4 <HAL_RCC_ClockConfig+0x148>
 80018b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
 80018c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
 80018c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018d0:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80018da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018dc:	fa92 f2a2 	rbit	r2, r2
 80018e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80018e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f042 0220 	orr.w	r2, r2, #32
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	f002 021f 	and.w	r2, r2, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d13a      	bne.n	8001976 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0b2      	b.n	8001a6a <HAL_RCC_ClockConfig+0x2de>
 8001904:	2302      	movs	r3, #2
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <HAL_RCC_ClockConfig+0x1a0>
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	e00d      	b.n	8001948 <HAL_RCC_ClockConfig+0x1bc>
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2202      	movs	r2, #2
 800194a:	61ba      	str	r2, [r7, #24]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	fa92 f2a2 	rbit	r2, r2
 8001952:	617a      	str	r2, [r7, #20]
  return result;
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	fab2 f282 	clz	r2, r2
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f042 0220 	orr.w	r2, r2, #32
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f002 021f 	and.w	r2, r2, #31
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e079      	b.n	8001a6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	491a      	ldr	r1, [pc, #104]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7fe fd92 	bl	80004b0 <HAL_GetTick>
 800198c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7fe fd8e 	bl	80004b0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e061      	b.n	8001a6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_ClockConfig+0x260>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d214      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4906      	ldr	r1, [pc, #24]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_ClockConfig+0x25c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e040      	b.n	8001a6a <HAL_RCC_ClockConfig+0x2de>
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_ClockConfig+0x2e8>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	491a      	ldr	r1, [pc, #104]	; (8001a74 <HAL_RCC_ClockConfig+0x2e8>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_RCC_ClockConfig+0x2e8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4912      	ldr	r1, [pc, #72]	; (8001a74 <HAL_RCC_ClockConfig+0x2e8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a2e:	f000 f829 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a32:	4601      	mov	r1, r0
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_RCC_ClockConfig+0x2e8>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a3c:	22f0      	movs	r2, #240	; 0xf0
 8001a3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	fa92 f2a2 	rbit	r2, r2
 8001a46:	60fa      	str	r2, [r7, #12]
  return result;
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	fab2 f282 	clz	r2, r2
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	40d3      	lsrs	r3, r2
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_RCC_ClockConfig+0x2ec>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	fa21 f303 	lsr.w	r3, r1, r3
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_RCC_ClockConfig+0x2f0>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_RCC_ClockConfig+0x2f4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fce0 	bl	8000428 <HAL_InitTick>
  
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3778      	adds	r7, #120	; 0x78
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08001bc8 	.word	0x08001bc8
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x36>
 8001ab2:	e03c      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ab6:	623b      	str	r3, [r7, #32]
      break;
 8001ab8:	e03c      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ac0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ac4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	fa92 f2a2 	rbit	r2, r2
 8001acc:	607a      	str	r2, [r7, #4]
  return result;
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	40d3      	lsrs	r3, r2
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	fa92 f2a2 	rbit	r2, r2
 8001af0:	60fa      	str	r2, [r7, #12]
  return result;
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	40d3      	lsrs	r3, r2
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e004      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	623b      	str	r3, [r7, #32]
      break;
 8001b2c:	e002      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b30:	623b      	str	r3, [r7, #32]
      break;
 8001b32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b34:	6a3b      	ldr	r3, [r7, #32]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	007a1200 	.word	0x007a1200
 8001b4c:	08001bd8 	.word	0x08001bd8
 8001b50:	08001be8 	.word	0x08001be8
 8001b54:	003d0900 	.word	0x003d0900

08001b58 <__libc_init_array>:
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	4d0d      	ldr	r5, [pc, #52]	; (8001b90 <__libc_init_array+0x38>)
 8001b5c:	4c0d      	ldr	r4, [pc, #52]	; (8001b94 <__libc_init_array+0x3c>)
 8001b5e:	1b64      	subs	r4, r4, r5
 8001b60:	10a4      	asrs	r4, r4, #2
 8001b62:	2600      	movs	r6, #0
 8001b64:	42a6      	cmp	r6, r4
 8001b66:	d109      	bne.n	8001b7c <__libc_init_array+0x24>
 8001b68:	4d0b      	ldr	r5, [pc, #44]	; (8001b98 <__libc_init_array+0x40>)
 8001b6a:	4c0c      	ldr	r4, [pc, #48]	; (8001b9c <__libc_init_array+0x44>)
 8001b6c:	f000 f820 	bl	8001bb0 <_init>
 8001b70:	1b64      	subs	r4, r4, r5
 8001b72:	10a4      	asrs	r4, r4, #2
 8001b74:	2600      	movs	r6, #0
 8001b76:	42a6      	cmp	r6, r4
 8001b78:	d105      	bne.n	8001b86 <__libc_init_array+0x2e>
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b80:	4798      	blx	r3
 8001b82:	3601      	adds	r6, #1
 8001b84:	e7ee      	b.n	8001b64 <__libc_init_array+0xc>
 8001b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b8a:	4798      	blx	r3
 8001b8c:	3601      	adds	r6, #1
 8001b8e:	e7f2      	b.n	8001b76 <__libc_init_array+0x1e>
 8001b90:	08001bf8 	.word	0x08001bf8
 8001b94:	08001bf8 	.word	0x08001bf8
 8001b98:	08001bf8 	.word	0x08001bf8
 8001b9c:	08001bfc 	.word	0x08001bfc

08001ba0 <memset>:
 8001ba0:	4402      	add	r2, r0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d100      	bne.n	8001baa <memset+0xa>
 8001ba8:	4770      	bx	lr
 8001baa:	f803 1b01 	strb.w	r1, [r3], #1
 8001bae:	e7f9      	b.n	8001ba4 <memset+0x4>

08001bb0 <_init>:
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	bf00      	nop
 8001bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb6:	bc08      	pop	{r3}
 8001bb8:	469e      	mov	lr, r3
 8001bba:	4770      	bx	lr

08001bbc <_fini>:
 8001bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbe:	bf00      	nop
 8001bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc2:	bc08      	pop	{r3}
 8001bc4:	469e      	mov	lr, r3
 8001bc6:	4770      	bx	lr
