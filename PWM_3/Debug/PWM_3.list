
PWM_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003370  08003370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c44  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001763  00000000  00000000  00029c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000938  00000000  00000000  0002bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c671  00000000  00000000  0002c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b69f  00000000  00000000  00048d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae357  00000000  00000000  00054420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102777  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002930  00000000  00000000  001027c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003358 	.word	0x08003358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003358 	.word	0x08003358

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa20 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8e2 	bl	800039c <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8c2 	bl	8000360 <MX_DMA_Init>
  MX_TIM3_Init();
 80001dc:	f000 f84a 	bl	8000274 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80001e0:	210c      	movs	r1, #12
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <main+0x24>)
 80001e4:	f002 f908 	bl	80023f8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <main+0x20>
 80001ea:	bf00      	nop
 80001ec:	20000028 	.word	0x20000028

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 f8a2 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021e:	2302      	movs	r3, #2
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000222:	2300      	movs	r3, #0
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000226:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800022a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fe05 	bl	8000e40 <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800023c:	f000 f8c6 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000244:	2302      	movs	r3, #2
 8000246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2101      	movs	r1, #1
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fe2e 	bl	8001ebc <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000266:	f000 f8b1 	bl	80003cc <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3740      	adds	r7, #64	; 0x40
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08e      	sub	sp, #56	; 0x38
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000288:	f107 031c 	add.w	r3, r7, #28
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000294:	463b      	mov	r3, r7
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
 80002a2:	615a      	str	r2, [r3, #20]
 80002a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002a6:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002a8:	4a2c      	ldr	r2, [pc, #176]	; (800035c <MX_TIM3_Init+0xe8>)
 80002aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002ae:	222f      	movs	r2, #47	; 0x2f
 80002b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b2:	4b29      	ldr	r3, [pc, #164]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80002b8:	4b27      	ldr	r3, [pc, #156]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002ba:	2263      	movs	r2, #99	; 0x63
 80002bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002be:	4b26      	ldr	r3, [pc, #152]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80002ca:	4823      	ldr	r0, [pc, #140]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002cc:	f001 ffdc 	bl	8002288 <HAL_TIM_Base_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80002d6:	f000 f879 	bl	80003cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80002e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e4:	4619      	mov	r1, r3
 80002e6:	481c      	ldr	r0, [pc, #112]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002e8:	f002 fa9a 	bl	8002820 <HAL_TIM_ConfigClockSource>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80002f2:	f000 f86b 	bl	80003cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <MX_TIM3_Init+0xe4>)
 80002f8:	f002 f81d 	bl	8002336 <HAL_TIM_PWM_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000302:	f000 f863 	bl	80003cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800030a:	2300      	movs	r3, #0
 800030c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800030e:	f107 031c 	add.w	r3, r7, #28
 8000312:	4619      	mov	r1, r3
 8000314:	4810      	ldr	r0, [pc, #64]	; (8000358 <MX_TIM3_Init+0xe4>)
 8000316:	f002 ff73 	bl	8003200 <HAL_TIMEx_MasterConfigSynchronization>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000320:	f000 f854 	bl	80003cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000324:	2360      	movs	r3, #96	; 0x60
 8000326:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000328:	2332      	movs	r3, #50	; 0x32
 800032a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	220c      	movs	r2, #12
 8000338:	4619      	mov	r1, r3
 800033a:	4807      	ldr	r0, [pc, #28]	; (8000358 <MX_TIM3_Init+0xe4>)
 800033c:	f002 f95c 	bl	80025f8 <HAL_TIM_PWM_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000346:	f000 f841 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800034a:	4803      	ldr	r0, [pc, #12]	; (8000358 <MX_TIM3_Init+0xe4>)
 800034c:	f000 f8b8 	bl	80004c0 <HAL_TIM_MspPostInit>

}
 8000350:	bf00      	nop
 8000352:	3738      	adds	r7, #56	; 0x38
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028
 800035c:	40000400 	.word	0x40000400

08000360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_DMA_Init+0x38>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <MX_DMA_Init+0x38>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_DMA_Init+0x38>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	200d      	movs	r0, #13
 8000384:	f000 fa85 	bl	8000892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000388:	200d      	movs	r0, #13
 800038a:	f000 fa9e 	bl	80008ca <HAL_NVIC_EnableIRQ>

}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_GPIO_Init+0x2c>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <MX_GPIO_Init+0x2c>)
 80003a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_GPIO_Init+0x2c>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <HAL_MspInit+0x44>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <HAL_MspInit+0x44>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <HAL_MspInit+0x44>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <HAL_MspInit+0x44>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a08      	ldr	r2, [pc, #32]	; (800041c <HAL_MspInit+0x44>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_MspInit+0x44>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800040e:	2007      	movs	r0, #7
 8000410:	f000 fa34 	bl	800087c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000

08000420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a20      	ldr	r2, [pc, #128]	; (80004b0 <HAL_TIM_Base_MspInit+0x90>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d139      	bne.n	80004a6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <HAL_TIM_Base_MspInit+0x94>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <HAL_TIM_Base_MspInit+0x94>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <HAL_TIM_Base_MspInit+0x94>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <HAL_TIM_Base_MspInit+0x9c>)
 800044e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 8000452:	2210      	movs	r2, #16
 8000454:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 8000464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000468:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 800046c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000470:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800047e:	480e      	ldr	r0, [pc, #56]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 8000480:	f000 fa3d 	bl	80008fe <HAL_DMA_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800048a:	f7ff ff9f 	bl	80003cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a09      	ldr	r2, [pc, #36]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
 8000494:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 800049e:	621a      	str	r2, [r3, #32]
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <HAL_TIM_Base_MspInit+0x98>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40000400 	.word	0x40000400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	20000074 	.word	0x20000074
 80004bc:	40020030 	.word	0x40020030

080004c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <HAL_TIM_MspPostInit+0x64>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d11b      	bne.n	800051a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <HAL_TIM_MspPostInit+0x68>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a10      	ldr	r2, [pc, #64]	; (8000528 <HAL_TIM_MspPostInit+0x68>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_TIM_MspPostInit+0x68>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE5     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004fa:	2320      	movs	r3, #32
 80004fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <HAL_TIM_MspPostInit+0x6c>)
 8000516:	f000 fb19 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40000400 	.word	0x40000400
 8000528:	40021000 	.word	0x40021000
 800052c:	48001000 	.word	0x48001000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f88e 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <DMA1_Channel3_IRQHandler+0x10>)
 800058a:	f000 f9ff 	bl	800098c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000074 	.word	0x20000074

08000598 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemInit+0x20>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <SystemInit+0x20>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c0:	f7ff ffea 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ea:	f002 fe89 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ee:	f7ff fdeb 	bl	80001c8 <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000600:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000608:	200000bc 	.word	0x200000bc

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>
	...

08000610 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_Init+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x28>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f92b 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f808 	bl	800063c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f7ff fed4 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x54>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x58>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	fbb3 f3f1 	udiv	r3, r3, r1
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f943 	bl	80008e6 <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d80a      	bhi.n	8000686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f90b 	bl	8000892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_InitTick+0x5c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x20>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_IncTick+0x24>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000008 	.word	0x20000008
 80006c0:	200000b8 	.word	0x200000b8

080006c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_GetTick+0x14>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000b8 	.word	0x200000b8

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db0b      	blt.n	800076a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f003 021f 	and.w	r2, r3, #31
 8000758:	4907      	ldr	r1, [pc, #28]	; (8000778 <__NVIC_EnableIRQ+0x38>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	2001      	movs	r0, #1
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f7ff ff8e 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff29 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff3e 	bl	8000724 <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff8e 	bl	80007d0 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5d 	bl	800077c <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff31 	bl	8000740 <__NVIC_EnableIRQ>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffa2 	bl	8000838 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e037      	b.n	8000984 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2202      	movs	r2, #2
 8000918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800092a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800092e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	4313      	orrs	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f8b4 	bl	8000ad4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
}  
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	2204      	movs	r2, #4
 80009aa:	409a      	lsls	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4013      	ands	r3, r2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d024      	beq.n	80009fe <HAL_DMA_IRQHandler+0x72>
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d01f      	beq.n	80009fe <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d107      	bne.n	80009dc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f022 0204 	bic.w	r2, r2, #4
 80009da:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009e4:	2104      	movs	r1, #4
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d06a      	beq.n	8000aca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80009fc:	e065      	b.n	8000aca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	2202      	movs	r2, #2
 8000a04:	409a      	lsls	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d02c      	beq.n	8000a68 <HAL_DMA_IRQHandler+0xdc>
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d027      	beq.n	8000a68 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10b      	bne.n	8000a3e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 020a 	bic.w	r2, r2, #10
 8000a34:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a46:	2102      	movs	r1, #2
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d035      	beq.n	8000aca <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000a66:	e030      	b.n	8000aca <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4013      	ands	r3, r2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d028      	beq.n	8000aca <HAL_DMA_IRQHandler+0x13e>
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d023      	beq.n	8000aca <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f022 020e 	bic.w	r2, r2, #14
 8000a90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d004      	beq.n	8000aca <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	4798      	blx	r3
    }
  }
}  
 8000ac8:	e7ff      	b.n	8000aca <HAL_DMA_IRQHandler+0x13e>
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <DMA_CalcBaseAndBitshift+0x60>)
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d80f      	bhi.n	8000b08 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <DMA_CalcBaseAndBitshift+0x64>)
 8000af0:	4413      	add	r3, r2
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <DMA_CalcBaseAndBitshift+0x68>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	009a      	lsls	r2, r3, #2
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <DMA_CalcBaseAndBitshift+0x6c>)
 8000b04:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000b06:	e00e      	b.n	8000b26 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <DMA_CalcBaseAndBitshift+0x70>)
 8000b10:	4413      	add	r3, r2
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <DMA_CalcBaseAndBitshift+0x68>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	091b      	lsrs	r3, r3, #4
 8000b1a:	009a      	lsls	r2, r3, #2
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <DMA_CalcBaseAndBitshift+0x74>)
 8000b24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40020407 	.word	0x40020407
 8000b38:	bffdfff8 	.word	0xbffdfff8
 8000b3c:	cccccccd 	.word	0xcccccccd
 8000b40:	40020000 	.word	0x40020000
 8000b44:	bffdfbf8 	.word	0xbffdfbf8
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e154      	b.n	8000e06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8146 	beq.w	8000e00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d005      	beq.n	8000b8c <HAL_GPIO_Init+0x40>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d130      	bne.n	8000bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	f003 0201 	and.w	r2, r3, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d017      	beq.n	8000c2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d123      	bne.n	8000c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	6939      	ldr	r1, [r7, #16]
 8000c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0203 	and.w	r2, r3, #3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80a0 	beq.w	8000e00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc0:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <HAL_GPIO_Init+0x2d8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <HAL_GPIO_Init+0x2d8>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b55      	ldr	r3, [pc, #340]	; (8000e24 <HAL_GPIO_Init+0x2d8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd8:	4a53      	ldr	r2, [pc, #332]	; (8000e28 <HAL_GPIO_Init+0x2dc>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d02:	d019      	beq.n	8000d38 <HAL_GPIO_Init+0x1ec>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a49      	ldr	r2, [pc, #292]	; (8000e2c <HAL_GPIO_Init+0x2e0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d013      	beq.n	8000d34 <HAL_GPIO_Init+0x1e8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a48      	ldr	r2, [pc, #288]	; (8000e30 <HAL_GPIO_Init+0x2e4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d00d      	beq.n	8000d30 <HAL_GPIO_Init+0x1e4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a47      	ldr	r2, [pc, #284]	; (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d007      	beq.n	8000d2c <HAL_GPIO_Init+0x1e0>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a46      	ldr	r2, [pc, #280]	; (8000e38 <HAL_GPIO_Init+0x2ec>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d101      	bne.n	8000d28 <HAL_GPIO_Init+0x1dc>
 8000d24:	2304      	movs	r3, #4
 8000d26:	e008      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d28:	2305      	movs	r3, #5
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x1ee>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4a:	4937      	ldr	r1, [pc, #220]	; (8000e28 <HAL_GPIO_Init+0x2dc>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d7c:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da6:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f aea3 	bne.w	8000b5c <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	48000c00 	.word	0x48000c00
 8000e38:	48001000 	.word	0x48001000
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f001 b823 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 817d 	beq.w	8001176 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e7c:	4bbc      	ldr	r3, [pc, #752]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 030c 	and.w	r3, r3, #12
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d00c      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e88:	4bb9      	ldr	r3, [pc, #740]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 030c 	and.w	r3, r3, #12
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d15c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x10e>
 8000e94:	4bb6      	ldr	r3, [pc, #728]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea0:	d155      	bne.n	8000f4e <HAL_RCC_OscConfig+0x10e>
 8000ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	095b      	lsrs	r3, r3, #5
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d102      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x94>
 8000ece:	4ba8      	ldr	r3, [pc, #672]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	e015      	b.n	8000f00 <HAL_RCC_OscConfig+0xc0>
 8000ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000edc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ef0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000efc:	4b9c      	ldr	r3, [pc, #624]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f0c:	fa92 f2a2 	rbit	r2, r2
 8000f10:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f18:	fab2 f282 	clz	r2, r2
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	f042 0220 	orr.w	r2, r2, #32
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	f002 021f 	and.w	r2, r2, #31
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 811f 	beq.w	8001174 <HAL_RCC_OscConfig+0x334>
 8000f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f040 8116 	bne.w	8001174 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f000 bfaf 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x12e>
 8000f60:	4b83      	ldr	r3, [pc, #524]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a82      	ldr	r2, [pc, #520]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e036      	b.n	8000fdc <HAL_RCC_OscConfig+0x19c>
 8000f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x158>
 8000f7e:	4b7c      	ldr	r3, [pc, #496]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7b      	ldr	r2, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b79      	ldr	r3, [pc, #484]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a78      	ldr	r2, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e021      	b.n	8000fdc <HAL_RCC_OscConfig+0x19c>
 8000f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x184>
 8000faa:	4b71      	ldr	r3, [pc, #452]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a70      	ldr	r2, [pc, #448]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b6e      	ldr	r3, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a6d      	ldr	r2, [pc, #436]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0x19c>
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a69      	ldr	r2, [pc, #420]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b67      	ldr	r3, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a66      	ldr	r2, [pc, #408]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fdc:	4b64      	ldr	r3, [pc, #400]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	f023 020f 	bic.w	r2, r3, #15
 8000fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	495f      	ldr	r1, [pc, #380]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d059      	beq.n	80010ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fb5d 	bl	80006c4 <HAL_GetTick>
 800100a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	e00a      	b.n	8001026 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fb58 	bl	80006c4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b64      	cmp	r3, #100	; 0x64
 800101e:	d902      	bls.n	8001026 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	f000 bf43 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
 8001026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800103a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0x218>
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e015      	b.n	8001084 <HAL_RCC_OscConfig+0x244>
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800106c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001070:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001074:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001088:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800108c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001090:	fa92 f2a2 	rbit	r2, r2
 8001094:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001098:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800109c:	fab2 f282 	clz	r2, r2
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	f042 0220 	orr.w	r2, r2, #32
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f002 021f 	and.w	r2, r2, #31
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ab      	beq.n	8001010 <HAL_RCC_OscConfig+0x1d0>
 80010b8:	e05d      	b.n	8001176 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fb03 	bl	80006c4 <HAL_GetTick>
 80010be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	e00a      	b.n	80010da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fafe 	bl	80006c4 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b64      	cmp	r3, #100	; 0x64
 80010d2:	d902      	bls.n	80010da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f000 bee9 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
 80010da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	095b      	lsrs	r3, r3, #5
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d102      	bne.n	800110c <HAL_RCC_OscConfig+0x2cc>
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	e015      	b.n	8001138 <HAL_RCC_OscConfig+0x2f8>
 800110c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001110:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001124:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001128:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_RCC_OscConfig+0x330>)
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800113c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001140:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001144:	fa92 f2a2 	rbit	r2, r2
 8001148:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800114c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001150:	fab2 f282 	clz	r2, r2
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	f042 0220 	orr.w	r2, r2, #32
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	f002 021f 	and.w	r2, r2, #31
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ab      	bne.n	80010c4 <HAL_RCC_OscConfig+0x284>
 800116c:	e003      	b.n	8001176 <HAL_RCC_OscConfig+0x336>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 817d 	beq.w	8001486 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800118c:	4ba6      	ldr	r3, [pc, #664]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001198:	4ba3      	ldr	r3, [pc, #652]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d172      	bne.n	800128a <HAL_RCC_OscConfig+0x44a>
 80011a4:	4ba0      	ldr	r3, [pc, #640]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d16c      	bne.n	800128a <HAL_RCC_OscConfig+0x44a>
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	095b      	lsrs	r3, r3, #5
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d102      	bne.n	80011e0 <HAL_RCC_OscConfig+0x3a0>
 80011da:	4b93      	ldr	r3, [pc, #588]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	e013      	b.n	8001208 <HAL_RCC_OscConfig+0x3c8>
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001204:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	2202      	movs	r2, #2
 800120a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800120e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001212:	fa92 f2a2 	rbit	r2, r2
 8001216:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800121a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800121e:	fab2 f282 	clz	r2, r2
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	f042 0220 	orr.w	r2, r2, #32
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f002 021f 	and.w	r2, r2, #31
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <HAL_RCC_OscConfig+0x410>
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	f000 be2e 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b75      	ldr	r3, [pc, #468]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	21f8      	movs	r1, #248	; 0xf8
 8001266:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800126e:	fa91 f1a1 	rbit	r1, r1
 8001272:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001276:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800127a:	fab1 f181 	clz	r1, r1
 800127e:	b2c9      	uxtb	r1, r1
 8001280:	408b      	lsls	r3, r1
 8001282:	4969      	ldr	r1, [pc, #420]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001288:	e0fd      	b.n	8001486 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8088 	beq.w	80013ac <HAL_RCC_OscConfig+0x56c>
 800129c:	2301      	movs	r3, #1
 800129e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	461a      	mov	r2, r3
 80012c4:	2301      	movs	r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff f9fc 	bl	80006c4 <HAL_GetTick>
 80012cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff f9f7 	bl	80006c4 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d902      	bls.n	80012e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f000 bde2 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	095b      	lsrs	r3, r3, #5
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <HAL_RCC_OscConfig+0x4d8>
 8001312:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	e013      	b.n	8001340 <HAL_RCC_OscConfig+0x500>
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001330:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001334:	fa93 f3a3 	rbit	r3, r3
 8001338:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	2202      	movs	r2, #2
 8001342:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001346:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800134a:	fa92 f2a2 	rbit	r2, r2
 800134e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001352:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001356:	fab2 f282 	clz	r2, r2
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	f042 0220 	orr.w	r2, r2, #32
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	f002 021f 	and.w	r2, r2, #31
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0af      	beq.n	80012d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	21f8      	movs	r1, #248	; 0xf8
 8001388:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001390:	fa91 f1a1 	rbit	r1, r1
 8001394:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001398:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800139c:	fab1 f181 	clz	r1, r1
 80013a0:	b2c9      	uxtb	r1, r1
 80013a2:	408b      	lsls	r3, r1
 80013a4:	4920      	ldr	r1, [pc, #128]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
 80013aa:	e06c      	b.n	8001486 <HAL_RCC_OscConfig+0x646>
 80013ac:	2301      	movs	r3, #1
 80013ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	461a      	mov	r2, r3
 80013d4:	2300      	movs	r3, #0
 80013d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff f974 	bl	80006c4 <HAL_GetTick>
 80013dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff f96f 	bl	80006c4 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d902      	bls.n	80013f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f000 bd5a 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800140a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	095b      	lsrs	r3, r3, #5
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d104      	bne.n	800142c <HAL_RCC_OscConfig+0x5ec>
 8001422:	4b01      	ldr	r3, [pc, #4]	; (8001428 <HAL_RCC_OscConfig+0x5e8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	e015      	b.n	8001454 <HAL_RCC_OscConfig+0x614>
 8001428:	40021000 	.word	0x40021000
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001444:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001450:	4bc8      	ldr	r3, [pc, #800]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	2202      	movs	r2, #2
 8001456:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800145a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800145e:	fa92 f2a2 	rbit	r2, r2
 8001462:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001466:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800146a:	fab2 f282 	clz	r2, r2
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	f042 0220 	orr.w	r2, r2, #32
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f002 021f 	and.w	r2, r2, #31
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ad      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8110 	beq.w	80016bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d079      	beq.n	80015a0 <HAL_RCC_OscConfig+0x760>
 80014ac:	2301      	movs	r3, #1
 80014ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4bab      	ldr	r3, [pc, #684]	; (8001778 <HAL_RCC_OscConfig+0x938>)
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	2301      	movs	r3, #1
 80014d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f8f5 	bl	80006c4 <HAL_GetTick>
 80014da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff f8f0 	bl	80006c4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d902      	bls.n	80014f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f000 bcdb 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001510:	2202      	movs	r2, #2
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001534:	2202      	movs	r2, #2
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f2a3 	rbit	r2, r3
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800154e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 8001552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001558:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800155c:	2102      	movs	r1, #2
 800155e:	6019      	str	r1, [r3, #0]
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f1a3 	rbit	r1, r3
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001576:	6019      	str	r1, [r3, #0]
  return result;
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0a0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x6a0>
 800159e:	e08d      	b.n	80016bc <HAL_RCC_OscConfig+0x87c>
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015c2:	601a      	str	r2, [r3, #0]
  return result;
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x938>)
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	461a      	mov	r2, r3
 80015de:	2300      	movs	r3, #0
 80015e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff f86f 	bl	80006c4 <HAL_GetTick>
 80015e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff f86a 	bl	80006c4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d902      	bls.n	8001602 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f000 bc55 	b.w	8001eac <HAL_RCC_OscConfig+0x106c>
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001612:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f2a3 	rbit	r2, r3
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800166c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 8001670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800167a:	2102      	movs	r1, #2
 800167c:	6019      	str	r1, [r3, #0]
 800167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001682:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f1a3 	rbit	r1, r3
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001694:	6019      	str	r1, [r3, #0]
  return result;
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d197      	bne.n	80015ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 81a1 	beq.w	8001a14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d116      	bne.n	8001712 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ee:	61d3      	str	r3, [r2, #28]
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800170a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800170c:	2301      	movs	r3, #1
 800170e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_RCC_OscConfig+0x93c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11a      	bne.n	8001754 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_RCC_OscConfig+0x93c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a16      	ldr	r2, [pc, #88]	; (800177c <HAL_RCC_OscConfig+0x93c>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7fe ffcb 	bl	80006c4 <HAL_GetTick>
 800172e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	e009      	b.n	8001748 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7fe ffc6 	bl	80006c4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b64      	cmp	r3, #100	; 0x64
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e3b1      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_RCC_OscConfig+0x93c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001758:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10d      	bne.n	8001780 <HAL_RCC_OscConfig+0x940>
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a02      	ldr	r2, [pc, #8]	; (8001774 <HAL_RCC_OscConfig+0x934>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e03c      	b.n	80017ec <HAL_RCC_OscConfig+0x9ac>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	10908120 	.word	0x10908120
 800177c:	40007000 	.word	0x40007000
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x96a>
 8001790:	4bc1      	ldr	r3, [pc, #772]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4ac0      	ldr	r2, [pc, #768]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6213      	str	r3, [r2, #32]
 800179c:	4bbe      	ldr	r3, [pc, #760]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4abd      	ldr	r2, [pc, #756]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	e020      	b.n	80017ec <HAL_RCC_OscConfig+0x9ac>
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x994>
 80017ba:	4bb7      	ldr	r3, [pc, #732]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4ab6      	ldr	r2, [pc, #728]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	4bb4      	ldr	r3, [pc, #720]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4ab3      	ldr	r2, [pc, #716]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0x9ac>
 80017d4:	4bb0      	ldr	r3, [pc, #704]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4aaf      	ldr	r2, [pc, #700]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	4bad      	ldr	r3, [pc, #692]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4aac      	ldr	r2, [pc, #688]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 8081 	beq.w	8001900 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7fe ff61 	bl	80006c4 <HAL_GetTick>
 8001802:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7fe ff5c 	bl	80006c4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e345      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001828:	2202      	movs	r2, #2
 800182a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	fa93 f2a3 	rbit	r2, r3
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001866:	601a      	str	r2, [r3, #0]
  return result;
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001870:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d102      	bne.n	800188c <HAL_RCC_OscConfig+0xa4c>
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	e013      	b.n	80018b4 <HAL_RCC_OscConfig+0xa74>
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001894:	2202      	movs	r2, #2
 8001896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fa93 f2a3 	rbit	r2, r3
 80018a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	4b79      	ldr	r3, [pc, #484]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018bc:	2102      	movs	r1, #2
 80018be:	6011      	str	r1, [r2, #0]
 80018c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	fa92 f1a2 	rbit	r1, r2
 80018ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018d6:	6011      	str	r1, [r2, #0]
  return result;
 80018d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	fab2 f282 	clz	r2, r2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f002 021f 	and.w	r2, r2, #31
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d084      	beq.n	8001808 <HAL_RCC_OscConfig+0x9c8>
 80018fe:	e07f      	b.n	8001a00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7fe fee0 	bl	80006c4 <HAL_GetTick>
 8001904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7fe fedb 	bl	80006c4 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e2c4      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001968:	601a      	str	r2, [r3, #0]
  return result;
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001972:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d102      	bne.n	800198e <HAL_RCC_OscConfig+0xb4e>
 8001988:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	e013      	b.n	80019b6 <HAL_RCC_OscConfig+0xb76>
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001996:	2202      	movs	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019be:	2102      	movs	r1, #2
 80019c0:	6011      	str	r1, [r2, #0]
 80019c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	fa92 f1a2 	rbit	r1, r2
 80019d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019d8:	6011      	str	r1, [r2, #0]
  return result;
 80019da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	fab2 f282 	clz	r2, r2
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f002 021f 	and.w	r2, r2, #31
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d184      	bne.n	800190a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a00:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8242 	beq.w	8001eaa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_RCC_OscConfig+0xc58>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	f000 8213 	beq.w	8001e5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	f040 8162 	bne.w	8001d0a <HAL_RCC_OscConfig+0xeca>
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fa93 f2a3 	rbit	r2, r3
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a6a:	601a      	str	r2, [r3, #0]
  return result;
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	461a      	mov	r2, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fe1a 	bl	80006c4 <HAL_GetTick>
 8001a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a94:	e00c      	b.n	8001ab0 <HAL_RCC_OscConfig+0xc70>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7fe fe12 	bl	80006c4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1fd      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ad4:	601a      	str	r2, [r3, #0]
  return result;
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ade:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0xcba>
 8001af4:	4bb0      	ldr	r3, [pc, #704]	; (8001db8 <HAL_RCC_OscConfig+0xf78>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	e027      	b.n	8001b4a <HAL_RCC_OscConfig+0xd0a>
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b9c      	ldr	r3, [pc, #624]	; (8001db8 <HAL_RCC_OscConfig+0xf78>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b56:	6011      	str	r1, [r2, #0]
 8001b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fa92 f1a2 	rbit	r1, r2
 8001b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b6e:	6011      	str	r1, [r2, #0]
  return result;
 8001b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	fab2 f282 	clz	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f042 0220 	orr.w	r2, r2, #32
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f002 021f 	and.w	r2, r2, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d182      	bne.n	8001a9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b96:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <HAL_RCC_OscConfig+0xf78>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	497f      	ldr	r1, [pc, #508]	; (8001db8 <HAL_RCC_OscConfig+0xf78>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001be2:	601a      	str	r2, [r3, #0]
  return result;
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2301      	movs	r3, #1
 8001c02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7fe fd5e 	bl	80006c4 <HAL_GetTick>
 8001c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7fe fd59 	bl	80006c4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e144      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c46:	601a      	str	r2, [r3, #0]
  return result;
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <HAL_RCC_OscConfig+0xe2c>
 8001c66:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <HAL_RCC_OscConfig+0xf78>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	e027      	b.n	8001cbc <HAL_RCC_OscConfig+0xe7c>
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_OscConfig+0xf78>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc8:	6011      	str	r1, [r2, #0]
 8001cca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	fa92 f1a2 	rbit	r1, r2
 8001cd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cdc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ce0:	6011      	str	r1, [r2, #0]
  return result;
 8001ce2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d082      	beq.n	8001c0e <HAL_RCC_OscConfig+0xdce>
 8001d08:	e0cf      	b.n	8001eaa <HAL_RCC_OscConfig+0x106a>
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d2e:	601a      	str	r2, [r3, #0]
  return result;
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe fcb8 	bl	80006c4 <HAL_GetTick>
 8001d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	e009      	b.n	8001d6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7fe fcb3 	bl	80006c4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e09e      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	fa93 f2a3 	rbit	r2, r3
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d92:	601a      	str	r2, [r3, #0]
  return result;
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d104      	bne.n	8001dbc <HAL_RCC_OscConfig+0xf7c>
 8001db2:	4b01      	ldr	r3, [pc, #4]	; (8001db8 <HAL_RCC_OscConfig+0xf78>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	e029      	b.n	8001e0c <HAL_RCC_OscConfig+0xfcc>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_RCC_OscConfig+0x1078>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e18:	6011      	str	r1, [r2, #0]
 8001e1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	fa92 f1a2 	rbit	r1, r2
 8001e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e30:	6011      	str	r1, [r2, #0]
  return result;
 8001e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d180      	bne.n	8001d5a <HAL_RCC_OscConfig+0xf1a>
 8001e58:	e027      	b.n	8001eaa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e01e      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_OscConfig+0x1078>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b09e      	sub	sp, #120	; 0x78
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e162      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b90      	ldr	r3, [pc, #576]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	498b      	ldr	r1, [pc, #556]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e14a      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b82      	ldr	r3, [pc, #520]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	497f      	ldr	r1, [pc, #508]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80dc 	beq.w	80020e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d13c      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xf6>
 8001f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d102      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xa6>
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e00f      	b.n	8001f82 <HAL_RCC_ClockConfig+0xc6>
 8001f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	663b      	str	r3, [r7, #96]	; 0x60
 8001f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f7e:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f8a:	fa92 f2a2 	rbit	r2, r2
 8001f8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f92:	fab2 f282 	clz	r2, r2
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f002 021f 	and.w	r2, r2, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d17b      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0f3      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d13c      	bne.n	8002034 <HAL_RCC_ClockConfig+0x178>
 8001fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x128>
 8001fde:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_ClockConfig+0x148>
 8001fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002000:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	63ba      	str	r2, [r7, #56]	; 0x38
 800200a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800200c:	fa92 f2a2 	rbit	r2, r2
 8002010:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13a      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b2      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
 8002034:	2302      	movs	r3, #2
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d102      	bne.n	800205c <HAL_RCC_ClockConfig+0x1a0>
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	e00d      	b.n	8002078 <HAL_RCC_ClockConfig+0x1bc>
 800205c:	2302      	movs	r3, #2
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2202      	movs	r2, #2
 800207a:	61ba      	str	r2, [r7, #24]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	fa92 f2a2 	rbit	r2, r2
 8002082:	617a      	str	r2, [r7, #20]
  return result;
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e079      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	491a      	ldr	r1, [pc, #104]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fb04 	bl	80006c4 <HAL_GetTick>
 80020bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7fe fb00 	bl	80006c4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e061      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_RCC_ClockConfig+0x260>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d214      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4906      	ldr	r1, [pc, #24]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_RCC_ClockConfig+0x25c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e040      	b.n	800219a <HAL_RCC_ClockConfig+0x2de>
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	491a      	ldr	r1, [pc, #104]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800215e:	f000 f829 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002162:	4601      	mov	r1, r0
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216c:	22f0      	movs	r2, #240	; 0xf0
 800216e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	fa92 f2a2 	rbit	r2, r2
 8002176:	60fa      	str	r2, [r7, #12]
  return result;
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	40d3      	lsrs	r3, r2
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	fa21 f303 	lsr.w	r3, r1, r3
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_RCC_ClockConfig+0x2f0>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fa52 	bl	800063c <HAL_InitTick>
  
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3778      	adds	r7, #120	; 0x78
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08003370 	.word	0x08003370
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x30>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x36>
 80021e2:	e03c      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e6:	623b      	str	r3, [r7, #32]
      break;
 80021e8:	e03c      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	607a      	str	r2, [r7, #4]
  return result;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	40d3      	lsrs	r3, r2
 8002208:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_RCC_GetSysClockFreq+0xc8>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	220f      	movs	r2, #15
 8002218:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	60fa      	str	r2, [r7, #12]
  return result;
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	40d3      	lsrs	r3, r2
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_RCC_GetSysClockFreq+0xcc>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc4>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	fbb2 f2f3 	udiv	r2, r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	e004      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	623b      	str	r3, [r7, #32]
      break;
 800225c:	e002      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002260:	623b      	str	r3, [r7, #32]
      break;
 8002262:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002264:	6a3b      	ldr	r3, [r7, #32]
}
 8002266:	4618      	mov	r0, r3
 8002268:	372c      	adds	r7, #44	; 0x2c
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	007a1200 	.word	0x007a1200
 800227c:	08003380 	.word	0x08003380
 8002280:	08003390 	.word	0x08003390
 8002284:	003d0900 	.word	0x003d0900

08002288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e049      	b.n	800232e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe f8b6 	bl	8000420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f000 fb74 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e049      	b.n	80023dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f841 	bl	80023e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f000 fb1d 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_TIM_PWM_Start+0x24>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e03c      	b.n	8002496 <HAL_TIM_PWM_Start+0x9e>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d109      	bne.n	8002436 <HAL_TIM_PWM_Start+0x3e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	e02f      	b.n	8002496 <HAL_TIM_PWM_Start+0x9e>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d109      	bne.n	8002450 <HAL_TIM_PWM_Start+0x58>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e022      	b.n	8002496 <HAL_TIM_PWM_Start+0x9e>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d109      	bne.n	800246a <HAL_TIM_PWM_Start+0x72>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	e015      	b.n	8002496 <HAL_TIM_PWM_Start+0x9e>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b10      	cmp	r3, #16
 800246e:	d109      	bne.n	8002484 <HAL_TIM_PWM_Start+0x8c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e008      	b.n	8002496 <HAL_TIM_PWM_Start+0x9e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e097      	b.n	80025ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d104      	bne.n	80024ae <HAL_TIM_PWM_Start+0xb6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ac:	e023      	b.n	80024f6 <HAL_TIM_PWM_Start+0xfe>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d104      	bne.n	80024be <HAL_TIM_PWM_Start+0xc6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024bc:	e01b      	b.n	80024f6 <HAL_TIM_PWM_Start+0xfe>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d104      	bne.n	80024ce <HAL_TIM_PWM_Start+0xd6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024cc:	e013      	b.n	80024f6 <HAL_TIM_PWM_Start+0xfe>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d104      	bne.n	80024de <HAL_TIM_PWM_Start+0xe6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024dc:	e00b      	b.n	80024f6 <HAL_TIM_PWM_Start+0xfe>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d104      	bne.n	80024ee <HAL_TIM_PWM_Start+0xf6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ec:	e003      	b.n	80024f6 <HAL_TIM_PWM_Start+0xfe>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fe58 	bl	80031b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <HAL_TIM_PWM_Start+0x1e0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <HAL_TIM_PWM_Start+0x13e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_TIM_PWM_Start+0x1e4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00e      	beq.n	8002536 <HAL_TIM_PWM_Start+0x13e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <HAL_TIM_PWM_Start+0x1e8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_TIM_PWM_Start+0x13e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <HAL_TIM_PWM_Start+0x1ec>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_TIM_PWM_Start+0x13e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <HAL_TIM_PWM_Start+0x1f0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_TIM_PWM_Start+0x142>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_TIM_PWM_Start+0x144>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a20      	ldr	r2, [pc, #128]	; (80025d8 <HAL_TIM_PWM_Start+0x1e0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d018      	beq.n	800258c <HAL_TIM_PWM_Start+0x194>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d013      	beq.n	800258c <HAL_TIM_PWM_Start+0x194>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <HAL_TIM_PWM_Start+0x1f4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00e      	beq.n	800258c <HAL_TIM_PWM_Start+0x194>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <HAL_TIM_PWM_Start+0x1f8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_TIM_PWM_Start+0x194>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_TIM_PWM_Start+0x1e4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_TIM_PWM_Start+0x194>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_TIM_PWM_Start+0x1e8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d115      	bne.n	80025b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_TIM_PWM_Start+0x1fc>)
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d015      	beq.n	80025ca <HAL_TIM_PWM_Start+0x1d2>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d011      	beq.n	80025ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b6:	e008      	b.n	80025ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e000      	b.n	80025cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40013400 	.word	0x40013400
 80025e0:	40014000 	.word	0x40014000
 80025e4:	40014400 	.word	0x40014400
 80025e8:	40014800 	.word	0x40014800
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	00010007 	.word	0x00010007

080025f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002612:	2302      	movs	r3, #2
 8002614:	e0ff      	b.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b14      	cmp	r3, #20
 8002622:	f200 80f0 	bhi.w	8002806 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002681 	.word	0x08002681
 8002630:	08002807 	.word	0x08002807
 8002634:	08002807 	.word	0x08002807
 8002638:	08002807 	.word	0x08002807
 800263c:	080026c1 	.word	0x080026c1
 8002640:	08002807 	.word	0x08002807
 8002644:	08002807 	.word	0x08002807
 8002648:	08002807 	.word	0x08002807
 800264c:	08002703 	.word	0x08002703
 8002650:	08002807 	.word	0x08002807
 8002654:	08002807 	.word	0x08002807
 8002658:	08002807 	.word	0x08002807
 800265c:	08002743 	.word	0x08002743
 8002660:	08002807 	.word	0x08002807
 8002664:	08002807 	.word	0x08002807
 8002668:	08002807 	.word	0x08002807
 800266c:	08002785 	.word	0x08002785
 8002670:	08002807 	.word	0x08002807
 8002674:	08002807 	.word	0x08002807
 8002678:	08002807 	.word	0x08002807
 800267c:	080027c5 	.word	0x080027c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fa24 	bl	8002ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6999      	ldr	r1, [r3, #24]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	619a      	str	r2, [r3, #24]
      break;
 80026be:	e0a5      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fa94 	bl	8002bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6999      	ldr	r1, [r3, #24]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	021a      	lsls	r2, r3, #8
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	619a      	str	r2, [r3, #24]
      break;
 8002700:	e084      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fafd 	bl	8002d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0208 	orr.w	r2, r2, #8
 800271c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0204 	bic.w	r2, r2, #4
 800272c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69d9      	ldr	r1, [r3, #28]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
      break;
 8002740:	e064      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fb65 	bl	8002e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	61da      	str	r2, [r3, #28]
      break;
 8002782:	e043      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fbae 	bl	8002eec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0208 	orr.w	r2, r2, #8
 800279e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0204 	bic.w	r2, r2, #4
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027c2:	e023      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fbf2 	bl	8002fb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002804:	e002      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
      break;
 800280a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002814:	7dfb      	ldrb	r3, [r7, #23]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop

08002820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_TIM_ConfigClockSource+0x1c>
 8002838:	2302      	movs	r3, #2
 800283a:	e0b6      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x18a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002878:	d03e      	beq.n	80028f8 <HAL_TIM_ConfigClockSource+0xd8>
 800287a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287e:	f200 8087 	bhi.w	8002990 <HAL_TIM_ConfigClockSource+0x170>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	f000 8086 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x176>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	d87f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 8002890:	2b70      	cmp	r3, #112	; 0x70
 8002892:	d01a      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xaa>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d87b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 8002898:	2b60      	cmp	r3, #96	; 0x60
 800289a:	d050      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x11e>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d877      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028a0:	2b50      	cmp	r3, #80	; 0x50
 80028a2:	d03c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xfe>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d873      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d058      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x13e>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d86f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028b0:	2b30      	cmp	r3, #48	; 0x30
 80028b2:	d064      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d86b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d060      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d867      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d05a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15e>
 80028c8:	e062      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f000 fc4b 	bl	8003174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]
      break;
 80028f6:	e04f      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f000 fc34 	bl	8003174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e03c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	461a      	mov	r2, r3
 800292c:	f000 fba8 	bl	8003080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2150      	movs	r1, #80	; 0x50
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fc01 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 800293c:	e02c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 fbc7 	bl	80030de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2160      	movs	r1, #96	; 0x60
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fbf1 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 800295c:	e01c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 fb88 	bl	8003080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fbe1 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 800297c:	e00c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 fbd8 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 800298e:	e003      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e000      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3c      	ldr	r2, [pc, #240]	; (8002ab8 <TIM_Base_SetConfig+0x104>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00f      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d00b      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a39      	ldr	r2, [pc, #228]	; (8002abc <TIM_Base_SetConfig+0x108>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a38      	ldr	r2, [pc, #224]	; (8002ac0 <TIM_Base_SetConfig+0x10c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a37      	ldr	r2, [pc, #220]	; (8002ac4 <TIM_Base_SetConfig+0x110>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d108      	bne.n	80029fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2d      	ldr	r2, [pc, #180]	; (8002ab8 <TIM_Base_SetConfig+0x104>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01b      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d017      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <TIM_Base_SetConfig+0x108>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <TIM_Base_SetConfig+0x10c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <TIM_Base_SetConfig+0x110>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <TIM_Base_SetConfig+0x118>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <TIM_Base_SetConfig+0x104>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00f      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <TIM_Base_SetConfig+0x110>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <TIM_Base_SetConfig+0x118>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0xe8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40013400 	.word	0x40013400
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40014400 	.word	0x40014400
 8002ad0:	40014800 	.word	0x40014800

08002ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 0302 	bic.w	r3, r3, #2
 8002b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a2c      	ldr	r2, [pc, #176]	; (8002be0 <TIM_OC1_SetConfig+0x10c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00f      	beq.n	8002b54 <TIM_OC1_SetConfig+0x80>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <TIM_OC1_SetConfig+0x110>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00b      	beq.n	8002b54 <TIM_OC1_SetConfig+0x80>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <TIM_OC1_SetConfig+0x114>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <TIM_OC1_SetConfig+0x80>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <TIM_OC1_SetConfig+0x118>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d003      	beq.n	8002b54 <TIM_OC1_SetConfig+0x80>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <TIM_OC1_SetConfig+0x11c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10c      	bne.n	8002b6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0308 	bic.w	r3, r3, #8
 8002b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <TIM_OC1_SetConfig+0x10c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00f      	beq.n	8002b96 <TIM_OC1_SetConfig+0xc2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <TIM_OC1_SetConfig+0x110>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_OC1_SetConfig+0xc2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <TIM_OC1_SetConfig+0x114>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_OC1_SetConfig+0xc2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <TIM_OC1_SetConfig+0x118>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_OC1_SetConfig+0xc2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <TIM_OC1_SetConfig+0x11c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d111      	bne.n	8002bba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	621a      	str	r2, [r3, #32]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40013400 	.word	0x40013400
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40014400 	.word	0x40014400
 8002bf0:	40014800 	.word	0x40014800

08002bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f023 0210 	bic.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f023 0320 	bic.w	r3, r3, #32
 8002c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a28      	ldr	r2, [pc, #160]	; (8002cf4 <TIM_OC2_SetConfig+0x100>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_OC2_SetConfig+0x6c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <TIM_OC2_SetConfig+0x104>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d10d      	bne.n	8002c7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <TIM_OC2_SetConfig+0x100>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00f      	beq.n	8002ca4 <TIM_OC2_SetConfig+0xb0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <TIM_OC2_SetConfig+0x104>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_OC2_SetConfig+0xb0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <TIM_OC2_SetConfig+0x108>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_OC2_SetConfig+0xb0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <TIM_OC2_SetConfig+0x10c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_OC2_SetConfig+0xb0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <TIM_OC2_SetConfig+0x110>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d113      	bne.n	8002ccc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002caa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40013400 	.word	0x40013400
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40014400 	.word	0x40014400
 8002d04:	40014800 	.word	0x40014800

08002d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <TIM_OC3_SetConfig+0xfc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_OC3_SetConfig+0x6a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a26      	ldr	r2, [pc, #152]	; (8002e08 <TIM_OC3_SetConfig+0x100>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10d      	bne.n	8002d8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <TIM_OC3_SetConfig+0xfc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <TIM_OC3_SetConfig+0xae>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <TIM_OC3_SetConfig+0x100>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_OC3_SetConfig+0xae>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <TIM_OC3_SetConfig+0x104>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_OC3_SetConfig+0xae>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <TIM_OC3_SetConfig+0x108>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_OC3_SetConfig+0xae>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <TIM_OC3_SetConfig+0x10c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d113      	bne.n	8002dde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	621a      	str	r2, [r3, #32]
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40013400 	.word	0x40013400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800

08002e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	031b      	lsls	r3, r3, #12
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <TIM_OC4_SetConfig+0xc0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00f      	beq.n	8002e9c <TIM_OC4_SetConfig+0x84>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <TIM_OC4_SetConfig+0xc4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <TIM_OC4_SetConfig+0x84>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <TIM_OC4_SetConfig+0xc8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <TIM_OC4_SetConfig+0x84>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <TIM_OC4_SetConfig+0xcc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_OC4_SetConfig+0x84>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <TIM_OC4_SetConfig+0xd0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d109      	bne.n	8002eb0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	019b      	lsls	r3, r3, #6
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40013400 	.word	0x40013400
 8002ee0:	40014000 	.word	0x40014000
 8002ee4:	40014400 	.word	0x40014400
 8002ee8:	40014800 	.word	0x40014800

08002eec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <TIM_OC5_SetConfig+0xb4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00f      	beq.n	8002f66 <TIM_OC5_SetConfig+0x7a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <TIM_OC5_SetConfig+0xb8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <TIM_OC5_SetConfig+0x7a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <TIM_OC5_SetConfig+0xbc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <TIM_OC5_SetConfig+0x7a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a14      	ldr	r2, [pc, #80]	; (8002fac <TIM_OC5_SetConfig+0xc0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_OC5_SetConfig+0x7a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <TIM_OC5_SetConfig+0xc4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d109      	bne.n	8002f7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	621a      	str	r2, [r3, #32]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40013400 	.word	0x40013400
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800

08002fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <TIM_OC6_SetConfig+0xb8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00f      	beq.n	8003030 <TIM_OC6_SetConfig+0x7c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a17      	ldr	r2, [pc, #92]	; (8003070 <TIM_OC6_SetConfig+0xbc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00b      	beq.n	8003030 <TIM_OC6_SetConfig+0x7c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a16      	ldr	r2, [pc, #88]	; (8003074 <TIM_OC6_SetConfig+0xc0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <TIM_OC6_SetConfig+0x7c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a15      	ldr	r2, [pc, #84]	; (8003078 <TIM_OC6_SetConfig+0xc4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_OC6_SetConfig+0x7c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a14      	ldr	r2, [pc, #80]	; (800307c <TIM_OC6_SetConfig+0xc8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d109      	bne.n	8003044 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	029b      	lsls	r3, r3, #10
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40013400 	.word	0x40013400
 8003074:	40014000 	.word	0x40014000
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800

08003080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f023 0201 	bic.w	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 030a 	bic.w	r3, r3, #10
 80030bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0210 	bic.w	r2, r3, #16
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	031b      	lsls	r3, r3, #12
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800311a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	f043 0307 	orr.w	r3, r3, #7
 8003160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	431a      	orrs	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2201      	movs	r2, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	401a      	ands	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003214:	2302      	movs	r3, #2
 8003216:	e063      	b.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d018      	beq.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d013      	beq.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10c      	bne.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40013400 	.word	0x40013400
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40014000 	.word	0x40014000

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	4d0d      	ldr	r5, [pc, #52]	; (8003338 <__libc_init_array+0x38>)
 8003304:	4c0d      	ldr	r4, [pc, #52]	; (800333c <__libc_init_array+0x3c>)
 8003306:	1b64      	subs	r4, r4, r5
 8003308:	10a4      	asrs	r4, r4, #2
 800330a:	2600      	movs	r6, #0
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	4d0b      	ldr	r5, [pc, #44]	; (8003340 <__libc_init_array+0x40>)
 8003312:	4c0c      	ldr	r4, [pc, #48]	; (8003344 <__libc_init_array+0x44>)
 8003314:	f000 f820 	bl	8003358 <_init>
 8003318:	1b64      	subs	r4, r4, r5
 800331a:	10a4      	asrs	r4, r4, #2
 800331c:	2600      	movs	r6, #0
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f855 3b04 	ldr.w	r3, [r5], #4
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	080033a0 	.word	0x080033a0
 800333c:	080033a0 	.word	0x080033a0
 8003340:	080033a0 	.word	0x080033a0
 8003344:	080033a4 	.word	0x080033a4

08003348 <memset>:
 8003348:	4402      	add	r2, r0
 800334a:	4603      	mov	r3, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	f803 1b01 	strb.w	r1, [r3], #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <_init>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr

08003364 <_fini>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	bf00      	nop
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr
