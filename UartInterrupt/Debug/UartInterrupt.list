
UartInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003c58  08003c58  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c58  08003c58  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000b4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac74  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a12  00000000  00000000  0002acbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0002c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c8  00000000  00000000  0002ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb66  00000000  00000000  0002d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8f8  00000000  00000000  0004a05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac3bf  00000000  00000000  00054956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00100d15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ccc  00000000  00000000  00100d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bf8 	.word	0x08003bf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003bf8 	.word	0x08003bf8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
char TXstring[10] = "Hello";
char RXstring[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  if(strcmp(RXstring,"LEDON")== 0){
 80001e4:	4912      	ldr	r1, [pc, #72]	; (8000230 <HAL_UART_RxCpltCallback+0x54>)
 80001e6:	4813      	ldr	r0, [pc, #76]	; (8000234 <HAL_UART_RxCpltCallback+0x58>)
 80001e8:	f7ff ffee 	bl	80001c8 <strcmp>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d105      	bne.n	80001fe <HAL_UART_RxCpltCallback+0x22>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f8:	480f      	ldr	r0, [pc, #60]	; (8000238 <HAL_UART_RxCpltCallback+0x5c>)
 80001fa:	f000 fd53 	bl	8000ca4 <HAL_GPIO_WritePin>
  }

  if(strcmp(RXstring,"LEDOF")== 0){
 80001fe:	490f      	ldr	r1, [pc, #60]	; (800023c <HAL_UART_RxCpltCallback+0x60>)
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <HAL_UART_RxCpltCallback+0x58>)
 8000202:	f7ff ffe1 	bl	80001c8 <strcmp>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d105      	bne.n	8000218 <HAL_UART_RxCpltCallback+0x3c>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000212:	4809      	ldr	r0, [pc, #36]	; (8000238 <HAL_UART_RxCpltCallback+0x5c>)
 8000214:	f000 fd46 	bl	8000ca4 <HAL_GPIO_WritePin>
  }

  strcpy(RXstring,"");
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <HAL_UART_RxCpltCallback+0x58>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, (unsigned char * )RXstring,5);
 800021e:	2205      	movs	r2, #5
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <HAL_UART_RxCpltCallback+0x58>)
 8000222:	4807      	ldr	r0, [pc, #28]	; (8000240 <HAL_UART_RxCpltCallback+0x64>)
 8000224:	f002 fa26 	bl	8002674 <HAL_UART_Receive_IT>
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	08003c10 	.word	0x08003c10
 8000234:	200000bc 	.word	0x200000bc
 8000238:	48001000 	.word	0x48001000
 800023c:	08003c18 	.word	0x08003c18
 8000240:	20000034 	.word	0x20000034

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 f9c4 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f816 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f89a 	bl	8000388 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000254:	f000 f868 	bl	8000328 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart1,(unsigned char *) TXstring, sizeof(TXstring));
 8000258:	220a      	movs	r2, #10
 800025a:	4905      	ldr	r1, [pc, #20]	; (8000270 <main+0x2c>)
 800025c:	4805      	ldr	r0, [pc, #20]	; (8000274 <main+0x30>)
 800025e:	f002 f9ab 	bl	80025b8 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1,(unsigned char *) RXstring, 5);
 8000262:	2205      	movs	r2, #5
 8000264:	4904      	ldr	r1, [pc, #16]	; (8000278 <main+0x34>)
 8000266:	4803      	ldr	r0, [pc, #12]	; (8000274 <main+0x30>)
 8000268:	f002 fa04 	bl	8002674 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	e7fe      	b.n	800026c <main+0x28>
 800026e:	bf00      	nop
 8000270:	20000000 	.word	0x20000000
 8000274:	20000034 	.word	0x20000034
 8000278:	200000bc 	.word	0x200000bc

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b09e      	sub	sp, #120	; 0x78
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fcac 	bl	8003be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	223c      	movs	r2, #60	; 0x3c
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 fc9e 	bl	8003be8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	2302      	movs	r3, #2
 80002ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2310      	movs	r3, #16
 80002b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	2300      	movs	r3, #0
 80002be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002c4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fd02 	bl	8000cd4 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002d6:	f000 f897 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fd2a 	bl	8001d50 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000302:	f000 f881 	bl	8000408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000306:	2301      	movs	r3, #1
 8000308:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	463b      	mov	r3, r7
 8000310:	4618      	mov	r0, r3
 8000312:	f001 ff53 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800031c:	f000 f874 	bl	8000408 <Error_Handler>
  }
}
 8000320:	bf00      	nop
 8000322:	3778      	adds	r7, #120	; 0x78
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800032e:	4a15      	ldr	r2, [pc, #84]	; (8000384 <MX_USART1_UART_Init+0x5c>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART1_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART1_UART_Init+0x58>)
 800036c:	f002 f8d6 	bl	800251c <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000376:	f000 f847 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000034 	.word	0x20000034
 8000384:	40013800 	.word	0x40013800

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_GPIO_Init+0x78>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a17      	ldr	r2, [pc, #92]	; (8000400 <MX_GPIO_Init+0x78>)
 80003a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_GPIO_Init+0x78>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_GPIO_Init+0x78>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <MX_GPIO_Init+0x78>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_GPIO_Init+0x78>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_GPIO_Init+0x7c>)
 80003d6:	f000 fc65 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80003da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80003de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	4619      	mov	r1, r3
 80003f2:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_GPIO_Init+0x7c>)
 80003f4:	f000 fadc 	bl	80009b0 <HAL_GPIO_Init>

}
 80003f8:	bf00      	nop
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	48001000 	.word	0x48001000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	e7fe      	b.n	8000410 <Error_Handler+0x8>
	...

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x44>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x44>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x44>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_MspInit+0x44>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <HAL_MspInit+0x44>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_MspInit+0x44>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800044a:	2007      	movs	r0, #7
 800044c:	f000 f9f8 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <HAL_UART_MspInit+0x90>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d131      	bne.n	80004e2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <HAL_UART_MspInit+0x94>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <HAL_UART_MspInit+0x94>)
 8000484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <HAL_UART_MspInit+0x94>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000496:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <HAL_UART_MspInit+0x94>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <HAL_UART_MspInit+0x94>)
 800049c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <HAL_UART_MspInit+0x94>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004bc:	2303      	movs	r3, #3
 80004be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004c0:	2307      	movs	r3, #7
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4619      	mov	r1, r3
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ce:	f000 fa6f 	bl	80009b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2025      	movs	r0, #37	; 0x25
 80004d8:	f000 f9bd 	bl	8000856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004dc:	2025      	movs	r0, #37	; 0x25
 80004de:	f000 f9d6 	bl	800088e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40013800 	.word	0x40013800
 80004f0:	40021000 	.word	0x40021000

080004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <NMI_Handler+0x4>

080004fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler+0x4>

08000506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <BusFault_Handler+0x4>

0800050c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <UsageFault_Handler+0x4>

08000512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000540:	f000 f88e 	bl	8000660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <USART1_IRQHandler+0x10>)
 800054e:	f002 f8d5 	bl	80026fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000034 	.word	0x20000034

0800055c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <SystemInit+0x20>)
 8000562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <SystemInit+0x20>)
 8000568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800056c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000584:	f7ff ffea 	bl	800055c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <LoopForever+0x6>)
  ldr r1, =_edata
 800058a:	490d      	ldr	r1, [pc, #52]	; (80005c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <LoopForever+0xe>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a0:	4c0a      	ldr	r4, [pc, #40]	; (80005cc <LoopForever+0x16>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ae:	f003 faf7 	bl	8003ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b2:	f7ff fe47 	bl	8000244 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80005c4:	08003c60 	.word	0x08003c60
  ldr r2, =_sbss
 80005c8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80005cc:	200000cc 	.word	0x200000cc

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_Init+0x28>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_Init+0x28>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f92b 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f808 	bl	8000600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f7ff ff10 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40022000 	.word	0x40022000

08000600 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x54>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x58>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f943 	bl	80008aa <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d80a      	bhi.n	800064a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f90b 	bl	8000856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_InitTick+0x5c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000000c 	.word	0x2000000c
 8000658:	20000014 	.word	0x20000014
 800065c:	20000010 	.word	0x20000010

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x20>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x24>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_IncTick+0x24>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000014 	.word	0x20000014
 8000684:	200000c8 	.word	0x200000c8

08000688 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;  
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_GetTick+0x14>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	200000c8 	.word	0x200000c8

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db0b      	blt.n	800072e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <__NVIC_EnableIRQ+0x38>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff8e 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff29 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff3e 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff8e 	bl	8000794 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff5d 	bl	8000740 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff31 	bl	8000704 <__NVIC_EnableIRQ>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ffa2 	bl	80007fc <SysTick_Config>
 80008b8:	4603      	mov	r3, r0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d008      	beq.n	80008e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2204      	movs	r2, #4
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e020      	b.n	8000928 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f022 020e 	bic.w	r2, r2, #14
 80008f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f022 0201 	bic.w	r2, r2, #1
 8000904:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f202 	lsl.w	r2, r1, r2
 8000914:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000946:	2b02      	cmp	r3, #2
 8000948:	d005      	beq.n	8000956 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2204      	movs	r2, #4
 800094e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e027      	b.n	80009a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f022 020e 	bic.w	r2, r2, #14
 8000964:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 0201 	bic.w	r2, r2, #1
 8000974:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2201      	movs	r2, #1
 800098a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	4798      	blx	r3
    } 
  }
  return status;
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e154      	b.n	8000c6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8146 	beq.w	8000c64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d005      	beq.n	80009f0 <HAL_GPIO_Init+0x40>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d130      	bne.n	8000a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a26:	2201      	movs	r2, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	091b      	lsrs	r3, r3, #4
 8000a3c:	f003 0201 	and.w	r2, r3, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d017      	beq.n	8000a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d123      	bne.n	8000ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	08da      	lsrs	r2, r3, #3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3208      	adds	r2, #8
 8000aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	08da      	lsrs	r2, r3, #3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	6939      	ldr	r1, [r7, #16]
 8000ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0203 	and.w	r2, r3, #3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 80a0 	beq.w	8000c64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <HAL_GPIO_Init+0x2d8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a57      	ldr	r2, [pc, #348]	; (8000c88 <HAL_GPIO_Init+0x2d8>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <HAL_GPIO_Init+0x2d8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b3c:	4a53      	ldr	r2, [pc, #332]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	220f      	movs	r2, #15
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b66:	d019      	beq.n	8000b9c <HAL_GPIO_Init+0x1ec>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d013      	beq.n	8000b98 <HAL_GPIO_Init+0x1e8>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <HAL_GPIO_Init+0x2e4>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d00d      	beq.n	8000b94 <HAL_GPIO_Init+0x1e4>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <HAL_GPIO_Init+0x2e8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d007      	beq.n	8000b90 <HAL_GPIO_Init+0x1e0>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a46      	ldr	r2, [pc, #280]	; (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d101      	bne.n	8000b8c <HAL_GPIO_Init+0x1dc>
 8000b88:	2304      	movs	r3, #4
 8000b8a:	e008      	b.n	8000b9e <HAL_GPIO_Init+0x1ee>
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	e006      	b.n	8000b9e <HAL_GPIO_Init+0x1ee>
 8000b90:	2303      	movs	r3, #3
 8000b92:	e004      	b.n	8000b9e <HAL_GPIO_Init+0x1ee>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e002      	b.n	8000b9e <HAL_GPIO_Init+0x1ee>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <HAL_GPIO_Init+0x1ee>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	f002 0203 	and.w	r2, r2, #3
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	4093      	lsls	r3, r2
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bae:	4937      	ldr	r1, [pc, #220]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbc:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be0:	4a2f      	ldr	r2, [pc, #188]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0a:	4a25      	ldr	r2, [pc, #148]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_GPIO_Init+0x2f0>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3301      	adds	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa22 f303 	lsr.w	r3, r2, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f47f aea3 	bne.w	80009c0 <HAL_GPIO_Init+0x10>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000800 	.word	0x48000800
 8000c98:	48000c00 	.word	0x48000c00
 8000c9c:	48001000 	.word	0x48001000
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb4:	787b      	ldrb	r3, [r7, #1]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc2:	887a      	ldrh	r2, [r7, #2]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ce4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f001 b823 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 817d 	beq.w	800100a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d10:	4bbc      	ldr	r3, [pc, #752]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d00c      	beq.n	8000d36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d1c:	4bb9      	ldr	r3, [pc, #740]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d15c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x10e>
 8000d28:	4bb6      	ldr	r3, [pc, #728]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d34:	d155      	bne.n	8000de2 <HAL_RCC_OscConfig+0x10e>
 8000d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	095b      	lsrs	r3, r3, #5
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <HAL_RCC_OscConfig+0x94>
 8000d62:	4ba8      	ldr	r3, [pc, #672]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	e015      	b.n	8000d94 <HAL_RCC_OscConfig+0xc0>
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d90:	4b9c      	ldr	r3, [pc, #624]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000da0:	fa92 f2a2 	rbit	r2, r2
 8000da4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000da8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dac:	fab2 f282 	clz	r2, r2
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	f042 0220 	orr.w	r2, r2, #32
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	f002 021f 	and.w	r2, r2, #31
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 811f 	beq.w	8001008 <HAL_RCC_OscConfig+0x334>
 8000dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 8116 	bne.w	8001008 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f000 bfaf 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x12e>
 8000df4:	4b83      	ldr	r3, [pc, #524]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a82      	ldr	r2, [pc, #520]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e036      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x158>
 8000e12:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7b      	ldr	r2, [pc, #492]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b79      	ldr	r3, [pc, #484]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a78      	ldr	r2, [pc, #480]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e021      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x184>
 8000e3e:	4b71      	ldr	r3, [pc, #452]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a70      	ldr	r2, [pc, #448]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b6e      	ldr	r3, [pc, #440]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a6d      	ldr	r2, [pc, #436]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e58:	4b6a      	ldr	r3, [pc, #424]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a69      	ldr	r2, [pc, #420]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b67      	ldr	r3, [pc, #412]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a66      	ldr	r2, [pc, #408]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e70:	4b64      	ldr	r3, [pc, #400]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	f023 020f 	bic.w	r2, r3, #15
 8000e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	495f      	ldr	r1, [pc, #380]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d059      	beq.n	8000f4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fbf5 	bl	8000688 <HAL_GetTick>
 8000e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	e00a      	b.n	8000eba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fbf0 	bl	8000688 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	; 0x64
 8000eb2:	d902      	bls.n	8000eba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f000 bf43 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ece:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	095b      	lsrs	r3, r3, #5
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d102      	bne.n	8000eec <HAL_RCC_OscConfig+0x218>
 8000ee6:	4b47      	ldr	r3, [pc, #284]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	e015      	b.n	8000f18 <HAL_RCC_OscConfig+0x244>
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f24:	fa92 f2a2 	rbit	r2, r2
 8000f28:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f30:	fab2 f282 	clz	r2, r2
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f002 021f 	and.w	r2, r2, #31
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0ab      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x1d0>
 8000f4c:	e05d      	b.n	800100a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fb9b 	bl	8000688 <HAL_GetTick>
 8000f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fb96 	bl	8000688 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d902      	bls.n	8000f6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	f000 bee9 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 8000f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	fab3 f383 	clz	r3, r3
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	095b      	lsrs	r3, r3, #5
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2cc>
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	e015      	b.n	8000fcc <HAL_RCC_OscConfig+0x2f8>
 8000fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fc0:	fa93 f3a3 	rbit	r3, r3
 8000fc4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_RCC_OscConfig+0x330>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fd8:	fa92 f2a2 	rbit	r2, r2
 8000fdc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fe0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fe4:	fab2 f282 	clz	r2, r2
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	f042 0220 	orr.w	r2, r2, #32
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	f002 021f 	and.w	r2, r2, #31
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1ab      	bne.n	8000f58 <HAL_RCC_OscConfig+0x284>
 8001000:	e003      	b.n	800100a <HAL_RCC_OscConfig+0x336>
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 817d 	beq.w	800131a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001020:	4ba6      	ldr	r3, [pc, #664]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102c:	4ba3      	ldr	r3, [pc, #652]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b08      	cmp	r3, #8
 8001036:	d172      	bne.n	800111e <HAL_RCC_OscConfig+0x44a>
 8001038:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d16c      	bne.n	800111e <HAL_RCC_OscConfig+0x44a>
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001056:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x3a0>
 800106e:	4b93      	ldr	r3, [pc, #588]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	e013      	b.n	800109c <HAL_RCC_OscConfig+0x3c8>
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800108c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001098:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2202      	movs	r2, #2
 800109e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f002 021f 	and.w	r2, r2, #31
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <HAL_RCC_OscConfig+0x410>
 80010ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d002      	beq.n	80010e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f000 be2e 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b75      	ldr	r3, [pc, #468]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	21f8      	movs	r1, #248	; 0xf8
 80010fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001102:	fa91 f1a1 	rbit	r1, r1
 8001106:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800110a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800110e:	fab1 f181 	clz	r1, r1
 8001112:	b2c9      	uxtb	r1, r1
 8001114:	408b      	lsls	r3, r1
 8001116:	4969      	ldr	r1, [pc, #420]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111c:	e0fd      	b.n	800131a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8088 	beq.w	8001240 <HAL_RCC_OscConfig+0x56c>
 8001130:	2301      	movs	r3, #1
 8001132:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001142:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	2301      	movs	r3, #1
 800115a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fa94 	bl	8000688 <HAL_GetTick>
 8001160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fa8f 	bl	8000688 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d902      	bls.n	800117c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	f000 bde2 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800118e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x4d8>
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x500>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	2202      	movs	r2, #2
 80011d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011de:	fa92 f2a2 	rbit	r2, r2
 80011e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	f002 021f 	and.w	r2, r2, #31
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0af      	beq.n	8001166 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	21f8      	movs	r1, #248	; 0xf8
 800121c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001224:	fa91 f1a1 	rbit	r1, r1
 8001228:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800122c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001230:	fab1 f181 	clz	r1, r1
 8001234:	b2c9      	uxtb	r1, r1
 8001236:	408b      	lsls	r3, r1
 8001238:	4920      	ldr	r1, [pc, #128]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
 800123e:	e06c      	b.n	800131a <HAL_RCC_OscConfig+0x646>
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001252:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001260:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	461a      	mov	r2, r3
 8001268:	2300      	movs	r3, #0
 800126a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fa0c 	bl	8000688 <HAL_GetTick>
 8001270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001276:	f7ff fa07 	bl	8000688 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d902      	bls.n	800128c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f000 bd5a 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800129e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d104      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5ec>
 80012b6:	4b01      	ldr	r3, [pc, #4]	; (80012bc <HAL_RCC_OscConfig+0x5e8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e015      	b.n	80012e8 <HAL_RCC_OscConfig+0x614>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012e4:	4bc8      	ldr	r3, [pc, #800]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2202      	movs	r2, #2
 80012ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f002 021f 	and.w	r2, r2, #31
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ad      	bne.n	8001276 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8110 	beq.w	8001550 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d079      	beq.n	8001434 <HAL_RCC_OscConfig+0x760>
 8001340:	2301      	movs	r3, #1
 8001342:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4bab      	ldr	r3, [pc, #684]	; (800160c <HAL_RCC_OscConfig+0x938>)
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	461a      	mov	r2, r3
 8001366:	2301      	movs	r3, #1
 8001368:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff f98d 	bl	8000688 <HAL_GetTick>
 800136e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	e00a      	b.n	800138a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff f988 	bl	8000688 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d902      	bls.n	800138a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	f000 bcdb 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013a4:	2202      	movs	r2, #2
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013c8:	2202      	movs	r2, #2
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fa93 f2a3 	rbit	r2, r3
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80013e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013f0:	2102      	movs	r1, #2
 80013f2:	6019      	str	r1, [r3, #0]
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f1a3 	rbit	r1, r3
 8001402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001406:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800140a:	6019      	str	r1, [r3, #0]
  return result;
 800140c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001410:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0a0      	beq.n	8001374 <HAL_RCC_OscConfig+0x6a0>
 8001432:	e08d      	b.n	8001550 <HAL_RCC_OscConfig+0x87c>
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f2a3 	rbit	r2, r3
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001456:	601a      	str	r2, [r3, #0]
  return result;
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001460:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x938>)
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	461a      	mov	r2, r3
 8001472:	2300      	movs	r3, #0
 8001474:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff f907 	bl	8000688 <HAL_GetTick>
 800147a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff f902 	bl	8000688 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d902      	bls.n	8001496 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	f000 bc55 	b.w	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800149e:	2202      	movs	r2, #2
 80014a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014c2:	2202      	movs	r2, #2
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fa93 f2a3 	rbit	r2, r3
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014e6:	2202      	movs	r2, #2
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001500:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 8001504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800150e:	2102      	movs	r1, #2
 8001510:	6019      	str	r1, [r3, #0]
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f1a3 	rbit	r1, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001528:	6019      	str	r1, [r3, #0]
  return result;
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d197      	bne.n	8001480 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 81a1 	beq.w	80018a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d116      	bne.n	80015a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	61d3      	str	r3, [r2, #28]
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800159e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d11a      	bne.n	80015e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff f863 	bl	8000688 <HAL_GetTick>
 80015c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	e009      	b.n	80015dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c8:	f7ff f85e 	bl	8000688 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e3b1      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_RCC_OscConfig+0x93c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ef      	beq.n	80015c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10d      	bne.n	8001614 <HAL_RCC_OscConfig+0x940>
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a02      	ldr	r2, [pc, #8]	; (8001608 <HAL_RCC_OscConfig+0x934>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e03c      	b.n	8001680 <HAL_RCC_OscConfig+0x9ac>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	10908120 	.word	0x10908120
 8001610:	40007000 	.word	0x40007000
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x96a>
 8001624:	4bc1      	ldr	r3, [pc, #772]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4ac0      	ldr	r2, [pc, #768]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	4bbe      	ldr	r3, [pc, #760]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4abd      	ldr	r2, [pc, #756]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e020      	b.n	8001680 <HAL_RCC_OscConfig+0x9ac>
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x994>
 800164e:	4bb7      	ldr	r3, [pc, #732]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4ab6      	ldr	r2, [pc, #728]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4bb4      	ldr	r3, [pc, #720]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4ab3      	ldr	r2, [pc, #716]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0x9ac>
 8001668:	4bb0      	ldr	r3, [pc, #704]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4aaf      	ldr	r2, [pc, #700]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	4bad      	ldr	r3, [pc, #692]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4aac      	ldr	r2, [pc, #688]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800167a:	f023 0304 	bic.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8081 	beq.w	8001794 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7fe fff9 	bl	8000688 <HAL_GetTick>
 8001696:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7fe fff4 	bl	8000688 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e345      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016e0:	2202      	movs	r2, #2
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016fa:	601a      	str	r2, [r3, #0]
  return result;
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001704:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	095b      	lsrs	r3, r3, #5
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d102      	bne.n	8001720 <HAL_RCC_OscConfig+0xa4c>
 800171a:	4b84      	ldr	r3, [pc, #528]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	e013      	b.n	8001748 <HAL_RCC_OscConfig+0xa74>
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001728:	2202      	movs	r2, #2
 800172a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fa93 f2a3 	rbit	r2, r3
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	4b79      	ldr	r3, [pc, #484]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800174c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001750:	2102      	movs	r1, #2
 8001752:	6011      	str	r1, [r2, #0]
 8001754:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001758:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	fa92 f1a2 	rbit	r1, r2
 8001762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001766:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800176a:	6011      	str	r1, [r2, #0]
  return result;
 800176c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001770:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f002 021f 	and.w	r2, r2, #31
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d084      	beq.n	800169c <HAL_RCC_OscConfig+0x9c8>
 8001792:	e07f      	b.n	8001894 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7fe ff78 	bl	8000688 <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00b      	b.n	80017b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7fe ff73 	bl	8000688 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e2c4      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017fc:	601a      	str	r2, [r3, #0]
  return result;
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001806:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0xb4e>
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	e013      	b.n	800184a <HAL_RCC_OscConfig+0xb76>
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800184e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001852:	2102      	movs	r1, #2
 8001854:	6011      	str	r1, [r2, #0]
 8001856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fa92 f1a2 	rbit	r1, r2
 8001864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001868:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800186c:	6011      	str	r1, [r2, #0]
  return result;
 800186e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001872:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	fab2 f282 	clz	r2, r2
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f002 021f 	and.w	r2, r2, #31
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d184      	bne.n	800179e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001894:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8242 	beq.w	8001d3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_RCC_OscConfig+0xc58>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	f000 8213 	beq.w	8001cee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	f040 8162 	bne.w	8001b9e <HAL_RCC_OscConfig+0xeca>
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018fe:	601a      	str	r2, [r3, #0]
  return result;
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001908:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001914:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	461a      	mov	r2, r3
 800191c:	2300      	movs	r3, #0
 800191e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7fe feb2 	bl	8000688 <HAL_GetTick>
 8001924:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e00c      	b.n	8001944 <HAL_RCC_OscConfig+0xc70>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7fe feaa 	bl	8000688 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1fd      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800194c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001968:	601a      	str	r2, [r3, #0]
  return result;
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001972:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d102      	bne.n	800198e <HAL_RCC_OscConfig+0xcba>
 8001988:	4bb0      	ldr	r3, [pc, #704]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e027      	b.n	80019de <HAL_RCC_OscConfig+0xd0a>
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	4b9c      	ldr	r3, [pc, #624]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ea:	6011      	str	r1, [r2, #0]
 80019ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	fa92 f1a2 	rbit	r1, r2
 80019fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a02:	6011      	str	r1, [r2, #0]
  return result;
 8001a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a08:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	fab2 f282 	clz	r2, r2
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f042 0220 	orr.w	r2, r2, #32
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	f002 021f 	and.w	r2, r2, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f202 	lsl.w	r2, r1, r2
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d182      	bne.n	8001930 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	497f      	ldr	r1, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f2a3 	rbit	r2, r3
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a76:	601a      	str	r2, [r3, #0]
  return result;
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	461a      	mov	r2, r3
 8001a94:	2301      	movs	r3, #1
 8001a96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe fdf6 	bl	8000688 <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe fdf1 	bl	8000688 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e144      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001abe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ae4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0xe2c>
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e027      	b.n	8001b50 <HAL_RCC_OscConfig+0xe7c>
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b54:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b5c:	6011      	str	r1, [r2, #0]
 8001b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b62:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fa92 f1a2 	rbit	r1, r2
 8001b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b74:	6011      	str	r1, [r2, #0]
  return result;
 8001b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f002 021f 	and.w	r2, r2, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f202 	lsl.w	r2, r1, r2
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d082      	beq.n	8001aa2 <HAL_RCC_OscConfig+0xdce>
 8001b9c:	e0cf      	b.n	8001d3e <HAL_RCC_OscConfig+0x106a>
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bc2:	601a      	str	r2, [r3, #0]
  return result;
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	461a      	mov	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7fe fd50 	bl	8000688 <HAL_GetTick>
 8001be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7fe fd4b 	bl	8000688 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e09e      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c26:	601a      	str	r2, [r3, #0]
  return result;
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d104      	bne.n	8001c50 <HAL_RCC_OscConfig+0xf7c>
 8001c46:	4b01      	ldr	r3, [pc, #4]	; (8001c4c <HAL_RCC_OscConfig+0xf78>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e029      	b.n	8001ca0 <HAL_RCC_OscConfig+0xfcc>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_OscConfig+0x1078>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ca8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cac:	6011      	str	r1, [r2, #0]
 8001cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fa92 f1a2 	rbit	r1, r2
 8001cbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cc4:	6011      	str	r1, [r2, #0]
  return result;
 8001cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f002 021f 	and.w	r2, r2, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d180      	bne.n	8001bee <HAL_RCC_OscConfig+0xf1a>
 8001cec:	e027      	b.n	8001d3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e01e      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x1078>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d10b      	bne.n	8001d3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b09e      	sub	sp, #120	; 0x78
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e162      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b90      	ldr	r3, [pc, #576]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b8d      	ldr	r3, [pc, #564]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	498b      	ldr	r1, [pc, #556]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e14a      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	497f      	ldr	r1, [pc, #508]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80dc 	beq.w	8001f7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d13c      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xf6>
 8001dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xa6>
 8001df0:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e00f      	b.n	8001e16 <HAL_RCC_ClockConfig+0xc6>
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	667b      	str	r3, [r7, #100]	; 0x64
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e1e:	fa92 f2a2 	rbit	r2, r2
 8001e22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e26:	fab2 f282 	clz	r2, r2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f042 0220 	orr.w	r2, r2, #32
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f002 021f 	and.w	r2, r2, #31
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d17b      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0f3      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d13c      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x178>
 8001e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x128>
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_ClockConfig+0x148>
 8001e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea0:	fa92 f2a2 	rbit	r2, r2
 8001ea4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0220 	orr.w	r2, r2, #32
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d13a      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b2      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x1a0>
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e00d      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1bc>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	61ba      	str	r2, [r7, #24]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	fa92 f2a2 	rbit	r2, r2
 8001f16:	617a      	str	r2, [r7, #20]
  return result;
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e079      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fb9c 	bl	8000688 <HAL_GetTick>
 8001f50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7fe fb98 	bl	8000688 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e061      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d214      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4906      	ldr	r1, [pc, #24]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e040      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	491a      	ldr	r1, [pc, #104]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4912      	ldr	r1, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff2:	f000 f829 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002000:	22f0      	movs	r2, #240	; 0xf0
 8002002:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	60fa      	str	r2, [r7, #12]
  return result;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	40d3      	lsrs	r3, r2
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x2ec>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	fa21 f303 	lsr.w	r3, r1, r3
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_RCC_ClockConfig+0x2f0>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_ClockConfig+0x2f4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe faea 	bl	8000600 <HAL_InitTick>
  
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3778      	adds	r7, #120	; 0x78
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	08003c20 	.word	0x08003c20
 8002040:	2000000c 	.word	0x2000000c
 8002044:	20000010 	.word	0x20000010

08002048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b08b      	sub	sp, #44	; 0x2c
 800204c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x30>
 8002072:	2b08      	cmp	r3, #8
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x36>
 8002076:	e03c      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	e03c      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002084:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002088:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	fa92 f2a2 	rbit	r2, r2
 8002090:	607a      	str	r2, [r7, #4]
  return result;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	40d3      	lsrs	r3, r2
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc8>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	220f      	movs	r2, #15
 80020ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	fa92 f2a2 	rbit	r2, r2
 80020b4:	60fa      	str	r2, [r7, #12]
  return result;
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	40d3      	lsrs	r3, r2
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	e004      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	e002      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	372c      	adds	r7, #44	; 0x2c
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	08003c38 	.word	0x08003c38
 8002114:	08003c48 	.word	0x08003c48
 8002118:	003d0900 	.word	0x003d0900

0800211c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_GetHCLKFreq+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800213a:	f7ff ffef 	bl	800211c <HAL_RCC_GetHCLKFreq>
 800213e:	4601      	mov	r1, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002148:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800214c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	603a      	str	r2, [r7, #0]
  return result;
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	40d3      	lsrs	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08003c30 	.word	0x08003c30

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800217e:	f7ff ffcd 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002182:	4601      	mov	r1, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800218c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002190:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	fa92 f2a2 	rbit	r2, r2
 8002198:	603a      	str	r2, [r7, #0]
  return result;
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	40d3      	lsrs	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08003c30 	.word	0x08003c30

080021bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b092      	sub	sp, #72	; 0x48
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80d4 	beq.w	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10e      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
 80021f8:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b45      	ldr	r3, [pc, #276]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a41      	ldr	r2, [pc, #260]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe fa31 	bl	8000688 <HAL_GetTick>
 8002226:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe fa2d 	bl	8000688 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	; 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e169      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8084 	beq.w	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002262:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002264:	429a      	cmp	r2, r3
 8002266:	d07c      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	461a      	mov	r2, r3
 80022b6:	2300      	movs	r3, #0
 80022b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d04b      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe f9dd 	bl	8000688 <HAL_GetTick>
 80022ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe f9d9 	bl	8000688 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e113      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80022e8:	2302      	movs	r3, #2
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	2302      	movs	r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002300:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d108      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002316:	4b01      	ldr	r3, [pc, #4]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	e00d      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	10908100 	.word	0x10908100
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	4b78      	ldr	r3, [pc, #480]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2202      	movs	r2, #2
 800233a:	613a      	str	r2, [r7, #16]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	60fa      	str	r2, [r7, #12]
  return result;
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0b7      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002362:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	496a      	ldr	r1, [pc, #424]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a65      	ldr	r2, [pc, #404]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002394:	4b60      	ldr	r3, [pc, #384]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f023 0203 	bic.w	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	495d      	ldr	r1, [pc, #372]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b2:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4956      	ldr	r1, [pc, #344]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023d0:	4b51      	ldr	r3, [pc, #324]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	494e      	ldr	r1, [pc, #312]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f023 0210 	bic.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4947      	ldr	r1, [pc, #284]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800240c:	4b42      	ldr	r3, [pc, #264]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	493f      	ldr	r1, [pc, #252]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f023 0220 	bic.w	r2, r3, #32
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4938      	ldr	r1, [pc, #224]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002448:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	4930      	ldr	r1, [pc, #192]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	4929      	ldr	r1, [pc, #164]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002474:	4313      	orrs	r3, r2
 8002476:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	4921      	ldr	r1, [pc, #132]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	491a      	ldr	r1, [pc, #104]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	4912      	ldr	r1, [pc, #72]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	490b      	ldr	r1, [pc, #44]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002508:	4903      	ldr	r1, [pc, #12]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250a:	4313      	orrs	r3, r2
 800250c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3748      	adds	r7, #72	; 0x48
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e040      	b.n	80025b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fd ff8c 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fbd4 	bl	8002d08 <UART_SetConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e022      	b.n	80025b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fd9c 	bl	80030b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fe23 	bl	80031f4 <UART_CheckIdleState>
 80025ae:	4603      	mov	r3, r0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b08b      	sub	sp, #44	; 0x2c
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d147      	bne.n	800265e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_UART_Transmit_IT+0x22>
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e040      	b.n	8002660 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2221      	movs	r2, #33	; 0x21
 8002606:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d107      	bne.n	8002622 <HAL_UART_Transmit_IT+0x6a>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <HAL_UART_Transmit_IT+0xb4>)
 800261e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002620:	e002      	b.n	8002628 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_UART_Transmit_IT+0xb8>)
 8002626:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	613b      	str	r3, [r7, #16]
   return(result);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	69f9      	ldr	r1, [r7, #28]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	61bb      	str	r3, [r7, #24]
   return(result);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e6      	bne.n	8002628 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	372c      	adds	r7, #44	; 0x2c
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	08003729 	.word	0x08003729
 8002670:	08003671 	.word	0x08003671

08002674 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002688:	2b20      	cmp	r3, #32
 800268a:	d132      	bne.n	80026f2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_UART_Receive_IT+0x24>
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e02b      	b.n	80026f4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d018      	beq.n	80026e2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	613b      	str	r3, [r7, #16]
   return(result);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	69f9      	ldr	r1, [r7, #28]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	61bb      	str	r3, [r7, #24]
   return(result);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e6      	bne.n	80026b0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	461a      	mov	r2, r3
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fe93 	bl	8003414 <UART_Start_Receive_IT>
 80026ee:	4603      	mov	r3, r0
 80026f0:	e000      	b.n	80026f4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ba      	sub	sp, #232	; 0xe8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002726:	f640 030f 	movw	r3, #2063	; 0x80f
 800272a:	4013      	ands	r3, r2
 800272c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d115      	bne.n	8002764 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00f      	beq.n	8002764 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 82ab 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
      }
      return;
 8002762:	e2a5      	b.n	8002cb0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8117 	beq.w	800299c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800276e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800277a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800277e:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_UART_IRQHandler+0x298>)
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 810a 	beq.w	800299c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <HAL_UART_IRQHandler+0xbc>
 8002794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d011      	beq.n	80027e8 <HAL_UART_IRQHandler+0xec>
 80027c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2202      	movs	r2, #2
 80027d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027de:	f043 0204 	orr.w	r2, r3, #4
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d011      	beq.n	8002818 <HAL_UART_IRQHandler+0x11c>
 80027f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00b      	beq.n	8002818 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2204      	movs	r2, #4
 8002806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280e:	f043 0202 	orr.w	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002834:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284a:	f043 0208 	orr.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_UART_IRQHandler+0x18a>
 8002860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8211 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800289e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d005      	beq.n	80028de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04f      	beq.n	800297e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fe4c 	bl	800357c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d141      	bne.n	8002976 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3308      	adds	r3, #8
 80028f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002900:	e853 3f00 	ldrex	r3, [r3]
 8002904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800290c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3308      	adds	r3, #8
 800291a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800291e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800292a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800292e:	e841 2300 	strex	r3, r2, [r1]
 8002932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1d9      	bne.n	80028f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002942:	2b00      	cmp	r3, #0
 8002944:	d013      	beq.n	800296e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_UART_IRQHandler+0x29c>)
 800294c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd ffee 	bl	8000934 <HAL_DMA_Abort_IT>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d017      	beq.n	800298e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002968:	4610      	mov	r0, r2
 800296a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	e00f      	b.n	800298e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9b4 	bl	8002cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002974:	e00b      	b.n	800298e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f9b0 	bl	8002cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	e007      	b.n	800298e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9ac 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800298c:	e192      	b.n	8002cb4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298e:	bf00      	nop
    return;
 8002990:	e190      	b.n	8002cb4 <HAL_UART_IRQHandler+0x5b8>
 8002992:	bf00      	nop
 8002994:	04000120 	.word	0x04000120
 8002998:	08003645 	.word	0x08003645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 814b 	bne.w	8002c3c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8144 	beq.w	8002c3c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 813d 	beq.w	8002c3c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2210      	movs	r2, #16
 80029c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	f040 80b5 	bne.w	8002b44 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8164 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029fa:	429a      	cmp	r2, r3
 80029fc:	f080 815c 	bcs.w	8002cb8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	f000 8086 	beq.w	8002b22 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1da      	bne.n	8002a16 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3308      	adds	r3, #8
 8002a66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6a:	e853 3f00 	ldrex	r3, [r3]
 8002a6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e1      	bne.n	8002a60 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3308      	adds	r3, #8
 8002abc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ac0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ac6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e3      	bne.n	8002a9c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aea:	e853 3f00 	ldrex	r3, [r3]
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af2:	f023 0310 	bic.w	r3, r3, #16
 8002af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b0c:	e841 2300 	strex	r3, r2, [r1]
 8002b10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e4      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fed0 	bl	80008c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f8d7 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b42:	e0b9      	b.n	8002cb8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80ab 	beq.w	8002cbc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80a6 	beq.w	8002cbc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b92:	647b      	str	r3, [r7, #68]	; 0x44
 8002b94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e4      	bne.n	8002b70 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3308      	adds	r3, #8
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bca:	633a      	str	r2, [r7, #48]	; 0x30
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e3      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0310 	bic.w	r3, r3, #16
 8002c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c18:	69b9      	ldr	r1, [r7, #24]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	e841 2300 	strex	r3, r2, [r1]
 8002c20:	617b      	str	r3, [r7, #20]
   return(result);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e4      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f85b 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c3a:	e03f      	b.n	8002cbc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <HAL_UART_IRQHandler+0x56a>
 8002c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 ff94 	bl	8003b8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c64:	e02d      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01c      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
    }
    return;
 8002c8e:	e017      	b.n	8002cc0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d012      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
 8002c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fd9d 	bl	80037e8 <UART_EndTransmit_IT>
    return;
 8002cae:	e008      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002cb0:	bf00      	nop
 8002cb2:	e006      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002cb4:	bf00      	nop
 8002cb6:	e004      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002cb8:	bf00      	nop
 8002cba:	e002      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002cbc:	bf00      	nop
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002cc0:	bf00      	nop
  }

}
 8002cc2:	37e8      	adds	r7, #232	; 0xe8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d36:	f023 030c 	bic.w	r3, r3, #12
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	6979      	ldr	r1, [r7, #20]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4aa7      	ldr	r2, [pc, #668]	; (8003020 <UART_SetConfig+0x318>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d120      	bne.n	8002dca <UART_SetConfig+0xc2>
 8002d88:	4ba6      	ldr	r3, [pc, #664]	; (8003024 <UART_SetConfig+0x31c>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d817      	bhi.n	8002dc4 <UART_SetConfig+0xbc>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <UART_SetConfig+0x94>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db9 	.word	0x08002db9
 8002da4:	08002dbf 	.word	0x08002dbf
 8002da8:	08002db3 	.word	0x08002db3
 8002dac:	2301      	movs	r3, #1
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e0b5      	b.n	8002f1e <UART_SetConfig+0x216>
 8002db2:	2302      	movs	r3, #2
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e0b2      	b.n	8002f1e <UART_SetConfig+0x216>
 8002db8:	2304      	movs	r3, #4
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e0af      	b.n	8002f1e <UART_SetConfig+0x216>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e0ac      	b.n	8002f1e <UART_SetConfig+0x216>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e0a9      	b.n	8002f1e <UART_SetConfig+0x216>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a96      	ldr	r2, [pc, #600]	; (8003028 <UART_SetConfig+0x320>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d124      	bne.n	8002e1e <UART_SetConfig+0x116>
 8002dd4:	4b93      	ldr	r3, [pc, #588]	; (8003024 <UART_SetConfig+0x31c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ddc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002de0:	d011      	beq.n	8002e06 <UART_SetConfig+0xfe>
 8002de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002de6:	d817      	bhi.n	8002e18 <UART_SetConfig+0x110>
 8002de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dec:	d011      	beq.n	8002e12 <UART_SetConfig+0x10a>
 8002dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002df2:	d811      	bhi.n	8002e18 <UART_SetConfig+0x110>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <UART_SetConfig+0xf8>
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d006      	beq.n	8002e0c <UART_SetConfig+0x104>
 8002dfe:	e00b      	b.n	8002e18 <UART_SetConfig+0x110>
 8002e00:	2300      	movs	r3, #0
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e08b      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e06:	2302      	movs	r3, #2
 8002e08:	77fb      	strb	r3, [r7, #31]
 8002e0a:	e088      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e085      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e12:	2308      	movs	r3, #8
 8002e14:	77fb      	strb	r3, [r7, #31]
 8002e16:	e082      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e18:	2310      	movs	r3, #16
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e07f      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a82      	ldr	r2, [pc, #520]	; (800302c <UART_SetConfig+0x324>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d124      	bne.n	8002e72 <UART_SetConfig+0x16a>
 8002e28:	4b7e      	ldr	r3, [pc, #504]	; (8003024 <UART_SetConfig+0x31c>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e34:	d011      	beq.n	8002e5a <UART_SetConfig+0x152>
 8002e36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e3a:	d817      	bhi.n	8002e6c <UART_SetConfig+0x164>
 8002e3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e40:	d011      	beq.n	8002e66 <UART_SetConfig+0x15e>
 8002e42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e46:	d811      	bhi.n	8002e6c <UART_SetConfig+0x164>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <UART_SetConfig+0x14c>
 8002e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e50:	d006      	beq.n	8002e60 <UART_SetConfig+0x158>
 8002e52:	e00b      	b.n	8002e6c <UART_SetConfig+0x164>
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e061      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e05e      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e60:	2304      	movs	r3, #4
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e05b      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e66:	2308      	movs	r3, #8
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e058      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e055      	b.n	8002f1e <UART_SetConfig+0x216>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	; (8003030 <UART_SetConfig+0x328>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d124      	bne.n	8002ec6 <UART_SetConfig+0x1be>
 8002e7c:	4b69      	ldr	r3, [pc, #420]	; (8003024 <UART_SetConfig+0x31c>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e88:	d011      	beq.n	8002eae <UART_SetConfig+0x1a6>
 8002e8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e8e:	d817      	bhi.n	8002ec0 <UART_SetConfig+0x1b8>
 8002e90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e94:	d011      	beq.n	8002eba <UART_SetConfig+0x1b2>
 8002e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9a:	d811      	bhi.n	8002ec0 <UART_SetConfig+0x1b8>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <UART_SetConfig+0x1a0>
 8002ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea4:	d006      	beq.n	8002eb4 <UART_SetConfig+0x1ac>
 8002ea6:	e00b      	b.n	8002ec0 <UART_SetConfig+0x1b8>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e037      	b.n	8002f1e <UART_SetConfig+0x216>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e034      	b.n	8002f1e <UART_SetConfig+0x216>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e031      	b.n	8002f1e <UART_SetConfig+0x216>
 8002eba:	2308      	movs	r3, #8
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e02e      	b.n	8002f1e <UART_SetConfig+0x216>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e02b      	b.n	8002f1e <UART_SetConfig+0x216>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a5a      	ldr	r2, [pc, #360]	; (8003034 <UART_SetConfig+0x32c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d124      	bne.n	8002f1a <UART_SetConfig+0x212>
 8002ed0:	4b54      	ldr	r3, [pc, #336]	; (8003024 <UART_SetConfig+0x31c>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002edc:	d011      	beq.n	8002f02 <UART_SetConfig+0x1fa>
 8002ede:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ee2:	d817      	bhi.n	8002f14 <UART_SetConfig+0x20c>
 8002ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ee8:	d011      	beq.n	8002f0e <UART_SetConfig+0x206>
 8002eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eee:	d811      	bhi.n	8002f14 <UART_SetConfig+0x20c>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <UART_SetConfig+0x1f4>
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef8:	d006      	beq.n	8002f08 <UART_SetConfig+0x200>
 8002efa:	e00b      	b.n	8002f14 <UART_SetConfig+0x20c>
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e00d      	b.n	8002f1e <UART_SetConfig+0x216>
 8002f02:	2302      	movs	r3, #2
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e00a      	b.n	8002f1e <UART_SetConfig+0x216>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e007      	b.n	8002f1e <UART_SetConfig+0x216>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e004      	b.n	8002f1e <UART_SetConfig+0x216>
 8002f14:	2310      	movs	r3, #16
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e001      	b.n	8002f1e <UART_SetConfig+0x216>
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f26:	d15b      	bne.n	8002fe0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d827      	bhi.n	8002f7e <UART_SetConfig+0x276>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <UART_SetConfig+0x22c>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f61 	.word	0x08002f61
 8002f3c:	08002f69 	.word	0x08002f69
 8002f40:	08002f7f 	.word	0x08002f7f
 8002f44:	08002f6f 	.word	0x08002f6f
 8002f48:	08002f7f 	.word	0x08002f7f
 8002f4c:	08002f7f 	.word	0x08002f7f
 8002f50:	08002f7f 	.word	0x08002f7f
 8002f54:	08002f77 	.word	0x08002f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7ff f8ec 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	61b8      	str	r0, [r7, #24]
        break;
 8002f5e:	e013      	b.n	8002f88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7ff f90a 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8002f64:	61b8      	str	r0, [r7, #24]
        break;
 8002f66:	e00f      	b.n	8002f88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f68:	4b33      	ldr	r3, [pc, #204]	; (8003038 <UART_SetConfig+0x330>)
 8002f6a:	61bb      	str	r3, [r7, #24]
        break;
 8002f6c:	e00c      	b.n	8002f88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6e:	f7ff f86b 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002f72:	61b8      	str	r0, [r7, #24]
        break;
 8002f74:	e008      	b.n	8002f88 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7a:	61bb      	str	r3, [r7, #24]
        break;
 8002f7c:	e004      	b.n	8002f88 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77bb      	strb	r3, [r7, #30]
        break;
 8002f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8082 	beq.w	8003094 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	005a      	lsls	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	441a      	add	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b0f      	cmp	r3, #15
 8002faa:	d916      	bls.n	8002fda <UART_SetConfig+0x2d2>
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb2:	d212      	bcs.n	8002fda <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f023 030f 	bic.w	r3, r3, #15
 8002fbc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	89fb      	ldrh	r3, [r7, #14]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	89fa      	ldrh	r2, [r7, #14]
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	e05c      	b.n	8003094 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	77bb      	strb	r3, [r7, #30]
 8002fde:	e059      	b.n	8003094 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d835      	bhi.n	8003052 <UART_SetConfig+0x34a>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <UART_SetConfig+0x2e4>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08003011 	.word	0x08003011
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	0800303d 	.word	0x0800303d
 8002ff8:	08003053 	.word	0x08003053
 8002ffc:	08003043 	.word	0x08003043
 8003000:	08003053 	.word	0x08003053
 8003004:	08003053 	.word	0x08003053
 8003008:	08003053 	.word	0x08003053
 800300c:	0800304b 	.word	0x0800304b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7ff f890 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8003014:	61b8      	str	r0, [r7, #24]
        break;
 8003016:	e021      	b.n	800305c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7ff f8ae 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 800301c:	61b8      	str	r0, [r7, #24]
        break;
 800301e:	e01d      	b.n	800305c <UART_SetConfig+0x354>
 8003020:	40013800 	.word	0x40013800
 8003024:	40021000 	.word	0x40021000
 8003028:	40004400 	.word	0x40004400
 800302c:	40004800 	.word	0x40004800
 8003030:	40004c00 	.word	0x40004c00
 8003034:	40005000 	.word	0x40005000
 8003038:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <UART_SetConfig+0x3a4>)
 800303e:	61bb      	str	r3, [r7, #24]
        break;
 8003040:	e00c      	b.n	800305c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003042:	f7ff f801 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8003046:	61b8      	str	r0, [r7, #24]
        break;
 8003048:	e008      	b.n	800305c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304e:	61bb      	str	r3, [r7, #24]
        break;
 8003050:	e004      	b.n	800305c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	77bb      	strb	r3, [r7, #30]
        break;
 800305a:	bf00      	nop
    }

    if (pclk != 0U)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	085a      	lsrs	r2, r3, #1
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	441a      	add	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d909      	bls.n	8003090 <UART_SetConfig+0x388>
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d205      	bcs.n	8003090 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e001      	b.n	8003094 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80030a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	007a1200 	.word	0x007a1200

080030b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01a      	beq.n	80031c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ae:	d10a      	bne.n	80031c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b098      	sub	sp, #96	; 0x60
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003204:	f7fd fa40 	bl	8000688 <HAL_GetTick>
 8003208:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b08      	cmp	r3, #8
 8003216:	d12e      	bne.n	8003276 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003220:	2200      	movs	r2, #0
 8003222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f88c 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d021      	beq.n	8003276 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003246:	653b      	str	r3, [r7, #80]	; 0x50
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003250:	647b      	str	r3, [r7, #68]	; 0x44
 8003252:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800325e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e6      	bne.n	8003232 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e062      	b.n	800333c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b04      	cmp	r3, #4
 8003282:	d149      	bne.n	8003318 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f856 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d03c      	beq.n	8003318 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	623b      	str	r3, [r7, #32]
   return(result);
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
 80032be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e6      	bne.n	800329e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	60fb      	str	r3, [r7, #12]
   return(result);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3308      	adds	r3, #8
 80032ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f0:	61fa      	str	r2, [r7, #28]
 80032f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	69b9      	ldr	r1, [r7, #24]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	e841 2300 	strex	r3, r2, [r1]
 80032fc:	617b      	str	r3, [r7, #20]
   return(result);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e5      	bne.n	80032d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e011      	b.n	800333c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3758      	adds	r7, #88	; 0x58
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003354:	e049      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d045      	beq.n	80033ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fd f993 	bl	8000688 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <UART_WaitOnFlagUntilTimeout+0x30>
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e048      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d031      	beq.n	80033ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b08      	cmp	r3, #8
 8003392:	d110      	bne.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2208      	movs	r2, #8
 800339a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f8ed 	bl	800357c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2208      	movs	r2, #8
 80033a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e029      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c4:	d111      	bne.n	80033ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f8d3 	bl	800357c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e00f      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	429a      	cmp	r2, r3
 8003406:	d0a6      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003414:	b480      	push	{r7}
 8003416:	b097      	sub	sp, #92	; 0x5c
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003446:	d10e      	bne.n	8003466 <UART_Start_Receive_IT+0x52>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <UART_Start_Receive_IT+0x48>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800345a:	e01a      	b.n	8003492 <UART_Start_Receive_IT+0x7e>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	22ff      	movs	r2, #255	; 0xff
 8003460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003464:	e015      	b.n	8003492 <UART_Start_Receive_IT+0x7e>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <UART_Start_Receive_IT+0x76>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <UART_Start_Receive_IT+0x6c>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800347e:	e008      	b.n	8003492 <UART_Start_Receive_IT+0x7e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	227f      	movs	r2, #127	; 0x7f
 8003484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003488:	e003      	b.n	8003492 <UART_Start_Receive_IT+0x7e>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2222      	movs	r2, #34	; 0x22
 800349e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3308      	adds	r3, #8
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	657b      	str	r3, [r7, #84]	; 0x54
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3308      	adds	r3, #8
 80034c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e5      	bne.n	80034a2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	d107      	bne.n	80034f0 <UART_Start_Receive_IT+0xdc>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d103      	bne.n	80034f0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a22      	ldr	r2, [pc, #136]	; (8003574 <UART_Start_Receive_IT+0x160>)
 80034ec:	669a      	str	r2, [r3, #104]	; 0x68
 80034ee:	e002      	b.n	80034f6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a21      	ldr	r2, [pc, #132]	; (8003578 <UART_Start_Receive_IT+0x164>)
 80034f4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d019      	beq.n	8003532 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
 800351e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e6      	bne.n	80034fe <UART_Start_Receive_IT+0xea>
 8003530:	e018      	b.n	8003564 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	613b      	str	r3, [r7, #16]
   return(result);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f043 0320 	orr.w	r3, r3, #32
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	69f9      	ldr	r1, [r7, #28]
 8003556:	6a3a      	ldr	r2, [r7, #32]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	61bb      	str	r3, [r7, #24]
   return(result);
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e6      	bne.n	8003532 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	375c      	adds	r7, #92	; 0x5c
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	080039e5 	.word	0x080039e5
 8003578:	0800383d 	.word	0x0800383d

0800357c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b095      	sub	sp, #84	; 0x54
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40
 80035a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e6      	bne.n	8003584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d118      	bne.n	8003624 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f023 0310 	bic.w	r3, r3, #16
 8003606:	647b      	str	r3, [r7, #68]	; 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	613b      	str	r3, [r7, #16]
   return(result);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003638:	bf00      	nop
 800363a:	3754      	adds	r7, #84	; 0x54
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff fb3a 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b08f      	sub	sp, #60	; 0x3c
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367c:	2b21      	cmp	r3, #33	; 0x21
 800367e:	d14d      	bne.n	800371c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d132      	bne.n	80036f2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	61fb      	str	r3, [r7, #28]
   return(result);
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e6      	bne.n	800368c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e6      	bne.n	80036be <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80036f0:	e014      	b.n	800371c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	b292      	uxth	r2, r2
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800371c:	bf00      	nop
 800371e:	373c      	adds	r7, #60	; 0x3c
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b091      	sub	sp, #68	; 0x44
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003734:	2b21      	cmp	r3, #33	; 0x21
 8003736:	d151      	bne.n	80037dc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d132      	bne.n	80037aa <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	623b      	str	r3, [r7, #32]
   return(result);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003758:	63bb      	str	r3, [r7, #56]	; 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
 8003764:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e6      	bne.n	8003744 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	60fb      	str	r3, [r7, #12]
   return(result);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	637b      	str	r3, [r7, #52]	; 0x34
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	69b9      	ldr	r1, [r7, #24]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	617b      	str	r3, [r7, #20]
   return(result);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e6      	bne.n	8003776 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80037a8:	e018      	b.n	80037dc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80037b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b2:	881a      	ldrh	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037bc:	b292      	uxth	r2, r2
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	1c9a      	adds	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80037dc:	bf00      	nop
 80037de:	3744      	adds	r7, #68	; 0x44
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	613b      	str	r3, [r7, #16]
   return(result);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e6      	bne.n	80037f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fa4a 	bl	8002cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003834:	bf00      	nop
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b09c      	sub	sp, #112	; 0x70
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800384a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003854:	2b22      	cmp	r3, #34	; 0x22
 8003856:	f040 80b9 	bne.w	80039cc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003860:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003868:	b2d9      	uxtb	r1, r3
 800386a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800386e:	b2da      	uxtb	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	400a      	ands	r2, r1
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 809c 	bne.w	80039dc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80038c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e6      	bne.n	80038a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3308      	adds	r3, #8
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	667b      	str	r3, [r7, #100]	; 0x64
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3308      	adds	r3, #8
 80038f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038f6:	647a      	str	r2, [r7, #68]	; 0x44
 80038f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e5      	bne.n	80038d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d018      	beq.n	800395e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	623b      	str	r3, [r7, #32]
   return(result);
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003940:	663b      	str	r3, [r7, #96]	; 0x60
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
 800394c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e6      	bne.n	800392c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	2b01      	cmp	r3, #1
 8003964:	d12e      	bne.n	80039c4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	60fb      	str	r3, [r7, #12]
   return(result);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f023 0310 	bic.w	r3, r3, #16
 8003980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	69b9      	ldr	r1, [r7, #24]
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	617b      	str	r3, [r7, #20]
   return(result);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e6      	bne.n	800396c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d103      	bne.n	80039b4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2210      	movs	r2, #16
 80039b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff f997 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039c2:	e00b      	b.n	80039dc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fc fc09 	bl	80001dc <HAL_UART_RxCpltCallback>
}
 80039ca:	e007      	b.n	80039dc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	619a      	str	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	3770      	adds	r7, #112	; 0x70
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b09c      	sub	sp, #112	; 0x70
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fc:	2b22      	cmp	r3, #34	; 0x22
 80039fe:	f040 80b9 	bne.w	8003b74 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003a16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	1c9a      	adds	r2, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 809c 	bne.w	8003b84 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a60:	667b      	str	r3, [r7, #100]	; 0x64
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a6c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e6      	bne.n	8003a4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	663b      	str	r3, [r7, #96]	; 0x60
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a9e:	643a      	str	r2, [r7, #64]	; 0x40
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e5      	bne.n	8003a7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d018      	beq.n	8003b06 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e6      	bne.n	8003ad4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d12e      	bne.n	8003b6c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6979      	ldr	r1, [r7, #20]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e6      	bne.n	8003b14 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d103      	bne.n	8003b5c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff f8c3 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b6a:	e00b      	b.n	8003b84 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fc fb35 	bl	80001dc <HAL_UART_RxCpltCallback>
}
 8003b72:	e007      	b.n	8003b84 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0208 	orr.w	r2, r2, #8
 8003b82:	619a      	str	r2, [r3, #24]
}
 8003b84:	bf00      	nop
 8003b86:	3770      	adds	r7, #112	; 0x70
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <__libc_init_array>:
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	4d0d      	ldr	r5, [pc, #52]	; (8003bd8 <__libc_init_array+0x38>)
 8003ba4:	4c0d      	ldr	r4, [pc, #52]	; (8003bdc <__libc_init_array+0x3c>)
 8003ba6:	1b64      	subs	r4, r4, r5
 8003ba8:	10a4      	asrs	r4, r4, #2
 8003baa:	2600      	movs	r6, #0
 8003bac:	42a6      	cmp	r6, r4
 8003bae:	d109      	bne.n	8003bc4 <__libc_init_array+0x24>
 8003bb0:	4d0b      	ldr	r5, [pc, #44]	; (8003be0 <__libc_init_array+0x40>)
 8003bb2:	4c0c      	ldr	r4, [pc, #48]	; (8003be4 <__libc_init_array+0x44>)
 8003bb4:	f000 f820 	bl	8003bf8 <_init>
 8003bb8:	1b64      	subs	r4, r4, r5
 8003bba:	10a4      	asrs	r4, r4, #2
 8003bbc:	2600      	movs	r6, #0
 8003bbe:	42a6      	cmp	r6, r4
 8003bc0:	d105      	bne.n	8003bce <__libc_init_array+0x2e>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
 8003bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc8:	4798      	blx	r3
 8003bca:	3601      	adds	r6, #1
 8003bcc:	e7ee      	b.n	8003bac <__libc_init_array+0xc>
 8003bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd2:	4798      	blx	r3
 8003bd4:	3601      	adds	r6, #1
 8003bd6:	e7f2      	b.n	8003bbe <__libc_init_array+0x1e>
 8003bd8:	08003c58 	.word	0x08003c58
 8003bdc:	08003c58 	.word	0x08003c58
 8003be0:	08003c58 	.word	0x08003c58
 8003be4:	08003c5c 	.word	0x08003c5c

08003be8 <memset>:
 8003be8:	4402      	add	r2, r0
 8003bea:	4603      	mov	r3, r0
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d100      	bne.n	8003bf2 <memset+0xa>
 8003bf0:	4770      	bx	lr
 8003bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf6:	e7f9      	b.n	8003bec <memset+0x4>

08003bf8 <_init>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr

08003c04 <_fini>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr
