
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002594  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800274c  0800274c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800274c  0800274c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800274c  0800274c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009710  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001547  00000000  00000000  0002974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c8  00000000  00000000  0002b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4ae  00000000  00000000  0002bed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa15  00000000  00000000  0004837e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae0f5  00000000  00000000  00052d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00100e88  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000271c  00000000  00000000  00100ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002704 	.word	0x08002704

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002704 	.word	0x08002704

080001c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  if(htim==&htim16){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d105      	bne.n	80001e4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80001d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001dc:	4809      	ldr	r0, [pc, #36]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80001de:	f000 fcef 	bl	8000bc0 <HAL_GPIO_TogglePin>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80001e2:	e008      	b.n	80001f6 <HAL_TIM_PeriodElapsedCallback+0x2e>
  else if(htim==&htim6){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	4a08      	ldr	r2, [pc, #32]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d104      	bne.n	80001f6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80001ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80001f2:	f000 fce5 	bl	8000bc0 <HAL_GPIO_TogglePin>
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000074 	.word	0x20000074
 8000204:	48001000 	.word	0x48001000
 8000208:	20000028 	.word	0x20000028

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 f9cc 	bl	80005ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f812 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM6_Init();
 8000218:	f000 f852 	bl	80002c0 <MX_TIM6_Init>
  MX_GPIO_Init();
 800021c:	f000 f8ae 	bl	800037c <MX_GPIO_Init>
  MX_TIM16_Init();
 8000220:	f000 f886 	bl	8000330 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <main+0x28>)
 8000226:	f001 ff61 	bl	80020ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <main+0x2c>)
 800022c:	f001 ff5e 	bl	80020ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	e7fe      	b.n	8000230 <main+0x24>
 8000232:	bf00      	nop
 8000234:	20000074 	.word	0x20000074
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	; 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fa52 	bl	80026f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025e:	2302      	movs	r3, #2
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000266:	2310      	movs	r3, #16
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000272:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fcb9 	bl	8000bf4 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000288:	f000 f8aa 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fce2 	bl	8001c70 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002b2:	f000 f895 	bl	80003e0 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	; 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <MX_TIM6_Init+0x68>)
 80002d2:	4a16      	ldr	r2, [pc, #88]	; (800032c <MX_TIM6_Init+0x6c>)
 80002d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9600;
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_TIM6_Init+0x68>)
 80002d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <MX_TIM6_Init+0x68>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <MX_TIM6_Init+0x68>)
 80002e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_TIM6_Init+0x68>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002f2:	480d      	ldr	r0, [pc, #52]	; (8000328 <MX_TIM6_Init+0x68>)
 80002f4:	f001 fea2 	bl	800203c <HAL_TIM_Base_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80002fe:	f000 f86f 	bl	80003e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4806      	ldr	r0, [pc, #24]	; (8000328 <MX_TIM6_Init+0x68>)
 8000310:	f002 f92e 	bl	8002570 <HAL_TIMEx_MasterConfigSynchronization>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800031a:	f000 f861 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028
 800032c:	40001000 	.word	0x40001000

08000330 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_TIM16_Init+0x44>)
 8000336:	4a10      	ldr	r2, [pc, #64]	; (8000378 <MX_TIM16_Init+0x48>)
 8000338:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_TIM16_Init+0x44>)
 800033c:	224f      	movs	r2, #79	; 0x4f
 800033e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_TIM16_Init+0x44>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_TIM16_Init+0x44>)
 8000348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800034c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_TIM16_Init+0x44>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <MX_TIM16_Init+0x44>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_TIM16_Init+0x44>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_TIM16_Init+0x44>)
 8000362:	f001 fe6b 	bl	800203c <HAL_TIM_Base_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800036c:	f000 f838 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000074 	.word	0x20000074
 8000378:	40014400 	.word	0x40014400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_GPIO_Init+0x5c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <MX_GPIO_Init+0x5c>)
 8000396:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_GPIO_Init+0x5c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80003ae:	480b      	ldr	r0, [pc, #44]	; (80003dc <MX_GPIO_Init+0x60>)
 80003b0:	f000 fbee 	bl	8000b90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80003b4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80003b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x60>)
 80003cc:	f000 fa66 	bl	800089c <HAL_GPIO_Init>

}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48001000 	.word	0x48001000

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_MspInit+0x44>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000422:	2007      	movs	r0, #7
 8000424:	f000 f9f8 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a1a      	ldr	r2, [pc, #104]	; (80004ac <HAL_TIM_Base_MspInit+0x78>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d114      	bne.n	8000470 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <HAL_TIM_Base_MspInit+0x7c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a19      	ldr	r2, [pc, #100]	; (80004b0 <HAL_TIM_Base_MspInit+0x7c>)
 800044c:	f043 0310 	orr.w	r3, r3, #16
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <HAL_TIM_Base_MspInit+0x7c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 0310 	and.w	r3, r3, #16
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2036      	movs	r0, #54	; 0x36
 8000464:	f000 f9e3 	bl	800082e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000468:	2036      	movs	r0, #54	; 0x36
 800046a:	f000 f9fc 	bl	8000866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800046e:	e018      	b.n	80004a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <HAL_TIM_Base_MspInit+0x80>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d113      	bne.n	80004a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <HAL_TIM_Base_MspInit+0x7c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <HAL_TIM_Base_MspInit+0x7c>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <HAL_TIM_Base_MspInit+0x7c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	2019      	movs	r0, #25
 8000498:	f000 f9c9 	bl	800082e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800049c:	2019      	movs	r0, #25
 800049e:	f000 f9e2 	bl	8000866 <HAL_NVIC_EnableIRQ>
}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40001000 	.word	0x40001000
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40014400 	.word	0x40014400

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f898 	bl	8000638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000512:	f001 fe55 	bl	80021c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000074 	.word	0x20000074

08000520 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <TIM6_DAC_IRQHandler+0x10>)
 8000526:	f001 fe4b 	bl	80021c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000590 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800055c:	f7ff ffea 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000586:	f002 f891 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f7ff fe3f 	bl	800020c <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000590:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800059c:	08002754 	.word	0x08002754
  ldr r2, =_sbss
 80005a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a4:	200000c4 	.word	0x200000c4

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x28>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f92b 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f7ff ff10 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f943 	bl	8000882 <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f90b 	bl	800082e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000008 	.word	0x20000008
 800065c:	200000c0 	.word	0x200000c0

08000660 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;  
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200000c0 	.word	0x200000c0

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <__NVIC_EnableIRQ+0x38>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff8e 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff29 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff3e 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff8e 	bl	800076c <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5d 	bl	8000718 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff31 	bl	80006dc <__NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffa2 	bl	80007d4 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800089c:	b480      	push	{r7}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008aa:	e154      	b.n	8000b56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f000 8146 	beq.w	8000b50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d005      	beq.n	80008dc <HAL_GPIO_Init+0x40>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d130      	bne.n	800093e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000912:	2201      	movs	r2, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	f003 0201 	and.w	r2, r3, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 0303 	and.w	r3, r3, #3
 8000946:	2b03      	cmp	r3, #3
 8000948:	d017      	beq.n	800097a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d123      	bne.n	80009ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	08da      	lsrs	r2, r3, #3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3208      	adds	r2, #8
 800098e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	220f      	movs	r2, #15
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	691a      	ldr	r2, [r3, #16]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	08da      	lsrs	r2, r3, #3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3208      	adds	r2, #8
 80009c8:	6939      	ldr	r1, [r7, #16]
 80009ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 0203 	and.w	r2, r3, #3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 80a0 	beq.w	8000b50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a10:	4b58      	ldr	r3, [pc, #352]	; (8000b74 <HAL_GPIO_Init+0x2d8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a57      	ldr	r2, [pc, #348]	; (8000b74 <HAL_GPIO_Init+0x2d8>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <HAL_GPIO_Init+0x2d8>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a28:	4a53      	ldr	r2, [pc, #332]	; (8000b78 <HAL_GPIO_Init+0x2dc>)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	220f      	movs	r2, #15
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a52:	d019      	beq.n	8000a88 <HAL_GPIO_Init+0x1ec>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_GPIO_Init+0x2e0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d013      	beq.n	8000a84 <HAL_GPIO_Init+0x1e8>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_GPIO_Init+0x2e4>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d00d      	beq.n	8000a80 <HAL_GPIO_Init+0x1e4>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <HAL_GPIO_Init+0x2e8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d007      	beq.n	8000a7c <HAL_GPIO_Init+0x1e0>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <HAL_GPIO_Init+0x2ec>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d101      	bne.n	8000a78 <HAL_GPIO_Init+0x1dc>
 8000a74:	2304      	movs	r3, #4
 8000a76:	e008      	b.n	8000a8a <HAL_GPIO_Init+0x1ee>
 8000a78:	2305      	movs	r3, #5
 8000a7a:	e006      	b.n	8000a8a <HAL_GPIO_Init+0x1ee>
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e004      	b.n	8000a8a <HAL_GPIO_Init+0x1ee>
 8000a80:	2302      	movs	r3, #2
 8000a82:	e002      	b.n	8000a8a <HAL_GPIO_Init+0x1ee>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <HAL_GPIO_Init+0x1ee>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	f002 0203 	and.w	r2, r2, #3
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	4093      	lsls	r3, r2
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a9a:	4937      	ldr	r1, [pc, #220]	; (8000b78 <HAL_GPIO_Init+0x2dc>)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa8:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000acc:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000af6:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b20:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f47f aea3 	bne.w	80008ac <HAL_GPIO_Init+0x10>
  }
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	48000400 	.word	0x48000400
 8000b80:	48000800 	.word	0x48000800
 8000b84:	48000c00 	.word	0x48000c00
 8000b88:	48001000 	.word	0x48001000
 8000b8c:	40010400 	.word	0x40010400

08000b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bac:	e002      	b.n	8000bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	041a      	lsls	r2, r3, #16
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43d9      	mvns	r1, r3
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	400b      	ands	r3, r1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	619a      	str	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f001 b823 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 817d 	beq.w	8000f2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c30:	4bbc      	ldr	r3, [pc, #752]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d00c      	beq.n	8000c56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c3c:	4bb9      	ldr	r3, [pc, #740]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 030c 	and.w	r3, r3, #12
 8000c44:	2b08      	cmp	r3, #8
 8000c46:	d15c      	bne.n	8000d02 <HAL_RCC_OscConfig+0x10e>
 8000c48:	4bb6      	ldr	r3, [pc, #728]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c54:	d155      	bne.n	8000d02 <HAL_RCC_OscConfig+0x10e>
 8000c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	095b      	lsrs	r3, r3, #5
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d102      	bne.n	8000c88 <HAL_RCC_OscConfig+0x94>
 8000c82:	4ba8      	ldr	r3, [pc, #672]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	e015      	b.n	8000cb4 <HAL_RCC_OscConfig+0xc0>
 8000c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ca4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ca8:	fa93 f3a3 	rbit	r3, r3
 8000cac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000cb0:	4b9c      	ldr	r3, [pc, #624]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000cbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cc0:	fa92 f2a2 	rbit	r2, r2
 8000cc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000cc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	f042 0220 	orr.w	r2, r2, #32
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	f002 021f 	and.w	r2, r2, #31
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 811f 	beq.w	8000f28 <HAL_RCC_OscConfig+0x334>
 8000cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8116 	bne.w	8000f28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f000 bfaf 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d12:	d106      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12e>
 8000d14:	4b83      	ldr	r3, [pc, #524]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a82      	ldr	r2, [pc, #520]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e036      	b.n	8000d90 <HAL_RCC_OscConfig+0x19c>
 8000d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x158>
 8000d32:	4b7c      	ldr	r3, [pc, #496]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7b      	ldr	r2, [pc, #492]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b79      	ldr	r3, [pc, #484]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a78      	ldr	r2, [pc, #480]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e021      	b.n	8000d90 <HAL_RCC_OscConfig+0x19c>
 8000d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x184>
 8000d5e:	4b71      	ldr	r3, [pc, #452]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a70      	ldr	r2, [pc, #448]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b6e      	ldr	r3, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a6d      	ldr	r2, [pc, #436]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e00b      	b.n	8000d90 <HAL_RCC_OscConfig+0x19c>
 8000d78:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a69      	ldr	r2, [pc, #420]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b67      	ldr	r3, [pc, #412]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a66      	ldr	r2, [pc, #408]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d90:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	f023 020f 	bic.w	r2, r3, #15
 8000d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	495f      	ldr	r1, [pc, #380]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d059      	beq.n	8000e6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dba:	f7ff fc51 	bl	8000660 <HAL_GetTick>
 8000dbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc2:	e00a      	b.n	8000dda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fc4c 	bl	8000660 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b64      	cmp	r3, #100	; 0x64
 8000dd2:	d902      	bls.n	8000dda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f000 bf43 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
 8000dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dde:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000dee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	fab3 f383 	clz	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	095b      	lsrs	r3, r3, #5
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d102      	bne.n	8000e0c <HAL_RCC_OscConfig+0x218>
 8000e06:	4b47      	ldr	r3, [pc, #284]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	e015      	b.n	8000e38 <HAL_RCC_OscConfig+0x244>
 8000e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e34:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e44:	fa92 f2a2 	rbit	r2, r2
 8000e48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	f042 0220 	orr.w	r2, r2, #32
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	f002 021f 	and.w	r2, r2, #31
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0ab      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x1d0>
 8000e6c:	e05d      	b.n	8000f2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fbf7 	bl	8000660 <HAL_GetTick>
 8000e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	e00a      	b.n	8000e8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fbf2 	bl	8000660 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b64      	cmp	r3, #100	; 0x64
 8000e86:	d902      	bls.n	8000e8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f000 bee9 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
 8000e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ea2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	095b      	lsrs	r3, r3, #5
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d102      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2cc>
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	e015      	b.n	8000eec <HAL_RCC_OscConfig+0x2f8>
 8000ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000edc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_RCC_OscConfig+0x330>)
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000ef4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ef8:	fa92 f2a2 	rbit	r2, r2
 8000efc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f00:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	f042 0220 	orr.w	r2, r2, #32
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	f002 021f 	and.w	r2, r2, #31
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1ab      	bne.n	8000e78 <HAL_RCC_OscConfig+0x284>
 8000f20:	e003      	b.n	8000f2a <HAL_RCC_OscConfig+0x336>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 817d 	beq.w	800123a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f40:	4ba6      	ldr	r3, [pc, #664]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00b      	beq.n	8000f64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f4c:	4ba3      	ldr	r3, [pc, #652]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d172      	bne.n	800103e <HAL_RCC_OscConfig+0x44a>
 8000f58:	4ba0      	ldr	r3, [pc, #640]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d16c      	bne.n	800103e <HAL_RCC_OscConfig+0x44a>
 8000f64:	2302      	movs	r3, #2
 8000f66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f76:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	095b      	lsrs	r3, r3, #5
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <HAL_RCC_OscConfig+0x3a0>
 8000f8e:	4b93      	ldr	r3, [pc, #588]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e013      	b.n	8000fbc <HAL_RCC_OscConfig+0x3c8>
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000fb8:	4b88      	ldr	r3, [pc, #544]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000fc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fc6:	fa92 f2a2 	rbit	r2, r2
 8000fca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000fce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000fd2:	fab2 f282 	clz	r2, r2
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	f042 0220 	orr.w	r2, r2, #32
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	f002 021f 	and.w	r2, r2, #31
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00a      	beq.n	8001004 <HAL_RCC_OscConfig+0x410>
 8000fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d002      	beq.n	8001004 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f000 be2e 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	4b75      	ldr	r3, [pc, #468]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	21f8      	movs	r1, #248	; 0xf8
 800101a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001022:	fa91 f1a1 	rbit	r1, r1
 8001026:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800102a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800102e:	fab1 f181 	clz	r1, r1
 8001032:	b2c9      	uxtb	r1, r1
 8001034:	408b      	lsls	r3, r1
 8001036:	4969      	ldr	r1, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103c:	e0fd      	b.n	800123a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8088 	beq.w	8001160 <HAL_RCC_OscConfig+0x56c>
 8001050:	2301      	movs	r3, #1
 8001052:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001062:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001066:	fab3 f383 	clz	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	461a      	mov	r2, r3
 8001078:	2301      	movs	r3, #1
 800107a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff faf0 	bl	8000660 <HAL_GetTick>
 8001080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	e00a      	b.n	800109c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff faeb 	bl	8000660 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d902      	bls.n	800109c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	f000 bde2 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	095b      	lsrs	r3, r3, #5
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d102      	bne.n	80010cc <HAL_RCC_OscConfig+0x4d8>
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	e013      	b.n	80010f4 <HAL_RCC_OscConfig+0x500>
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	2202      	movs	r2, #2
 80010f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80010fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010fe:	fa92 f2a2 	rbit	r2, r2
 8001102:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001106:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f042 0220 	orr.w	r2, r2, #32
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f002 021f 	and.w	r2, r2, #31
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0af      	beq.n	8001086 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	21f8      	movs	r1, #248	; 0xf8
 800113c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001144:	fa91 f1a1 	rbit	r1, r1
 8001148:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800114c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001150:	fab1 f181 	clz	r1, r1
 8001154:	b2c9      	uxtb	r1, r1
 8001156:	408b      	lsls	r3, r1
 8001158:	4920      	ldr	r1, [pc, #128]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
 800115e:	e06c      	b.n	800123a <HAL_RCC_OscConfig+0x646>
 8001160:	2301      	movs	r3, #1
 8001162:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001172:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	461a      	mov	r2, r3
 8001188:	2300      	movs	r3, #0
 800118a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fa68 	bl	8000660 <HAL_GetTick>
 8001190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fa63 	bl	8000660 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d902      	bls.n	80011ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f000 bd5a 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d104      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5ec>
 80011d6:	4b01      	ldr	r3, [pc, #4]	; (80011dc <HAL_RCC_OscConfig+0x5e8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e015      	b.n	8001208 <HAL_RCC_OscConfig+0x614>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001204:	4bc8      	ldr	r3, [pc, #800]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	2202      	movs	r2, #2
 800120a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800120e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001212:	fa92 f2a2 	rbit	r2, r2
 8001216:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800121a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800121e:	fab2 f282 	clz	r2, r2
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	f042 0220 	orr.w	r2, r2, #32
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	f002 021f 	and.w	r2, r2, #31
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1ad      	bne.n	8001196 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8110 	beq.w	8001470 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d079      	beq.n	8001354 <HAL_RCC_OscConfig+0x760>
 8001260:	2301      	movs	r3, #1
 8001262:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	4bab      	ldr	r3, [pc, #684]	; (800152c <HAL_RCC_OscConfig+0x938>)
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	461a      	mov	r2, r3
 8001286:	2301      	movs	r3, #1
 8001288:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff f9e9 	bl	8000660 <HAL_GetTick>
 800128e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	e00a      	b.n	80012aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff f9e4 	bl	8000660 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d902      	bls.n	80012aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	f000 bcdb 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012c4:	2202      	movs	r2, #2
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fa93 f2a3 	rbit	r2, r3
 80012d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012e8:	2202      	movs	r2, #2
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	fa93 f2a3 	rbit	r2, r3
 80012fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001302:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001304:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 8001306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001310:	2102      	movs	r1, #2
 8001312:	6019      	str	r1, [r3, #0]
 8001314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001318:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	fa93 f1a3 	rbit	r1, r3
 8001322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001326:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800132a:	6019      	str	r1, [r3, #0]
  return result;
 800132c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001330:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0a0      	beq.n	8001294 <HAL_RCC_OscConfig+0x6a0>
 8001352:	e08d      	b.n	8001470 <HAL_RCC_OscConfig+0x87c>
 8001354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001358:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fa93 f2a3 	rbit	r2, r3
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001376:	601a      	str	r2, [r3, #0]
  return result;
 8001378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001380:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4b68      	ldr	r3, [pc, #416]	; (800152c <HAL_RCC_OscConfig+0x938>)
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	461a      	mov	r2, r3
 8001392:	2300      	movs	r3, #0
 8001394:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff f963 	bl	8000660 <HAL_GetTick>
 800139a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff f95e 	bl	8000660 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d902      	bls.n	80013b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	f000 bc55 	b.w	8001c60 <HAL_RCC_OscConfig+0x106c>
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013be:	2202      	movs	r2, #2
 80013c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fa93 f2a3 	rbit	r2, r3
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013e2:	2202      	movs	r2, #2
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001406:	2202      	movs	r2, #2
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fa93 f2a3 	rbit	r2, r3
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001420:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 8001424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800142e:	2102      	movs	r1, #2
 8001430:	6019      	str	r1, [r3, #0]
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	fa93 f1a3 	rbit	r1, r3
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001448:	6019      	str	r1, [r3, #0]
  return result;
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2101      	movs	r1, #1
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d197      	bne.n	80013a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 81a1 	beq.w	80017c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d116      	bne.n	80014c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	4a22      	ldr	r2, [pc, #136]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	61d3      	str	r3, [r2, #28]
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_RCC_OscConfig+0x93c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d11a      	bne.n	8001508 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_RCC_OscConfig+0x93c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_RCC_OscConfig+0x93c>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff f8bf 	bl	8000660 <HAL_GetTick>
 80014e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	e009      	b.n	80014fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff f8ba 	bl	8000660 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e3b1      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_RCC_OscConfig+0x93c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0ef      	beq.n	80014e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d10d      	bne.n	8001534 <HAL_RCC_OscConfig+0x940>
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a02      	ldr	r2, [pc, #8]	; (8001528 <HAL_RCC_OscConfig+0x934>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e03c      	b.n	80015a0 <HAL_RCC_OscConfig+0x9ac>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	10908120 	.word	0x10908120
 8001530:	40007000 	.word	0x40007000
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x96a>
 8001544:	4bc1      	ldr	r3, [pc, #772]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4ac0      	ldr	r2, [pc, #768]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	4bbe      	ldr	r3, [pc, #760]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4abd      	ldr	r2, [pc, #756]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	e020      	b.n	80015a0 <HAL_RCC_OscConfig+0x9ac>
 800155e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x994>
 800156e:	4bb7      	ldr	r3, [pc, #732]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4ab6      	ldr	r2, [pc, #728]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	4bb4      	ldr	r3, [pc, #720]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4ab3      	ldr	r2, [pc, #716]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0x9ac>
 8001588:	4bb0      	ldr	r3, [pc, #704]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4aaf      	ldr	r2, [pc, #700]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	4bad      	ldr	r3, [pc, #692]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4aac      	ldr	r2, [pc, #688]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8081 	beq.w	80016b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f855 	bl	8000660 <HAL_GetTick>
 80015b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff f850 	bl	8000660 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e345      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001600:	2202      	movs	r2, #2
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001608:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	fa93 f2a3 	rbit	r2, r3
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800161a:	601a      	str	r2, [r3, #0]
  return result;
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001624:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	095b      	lsrs	r3, r3, #5
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d102      	bne.n	8001640 <HAL_RCC_OscConfig+0xa4c>
 800163a:	4b84      	ldr	r3, [pc, #528]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	e013      	b.n	8001668 <HAL_RCC_OscConfig+0xa74>
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001650:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f2a3 	rbit	r2, r3
 800165a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	4b79      	ldr	r3, [pc, #484]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800166c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001670:	2102      	movs	r1, #2
 8001672:	6011      	str	r1, [r2, #0]
 8001674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001678:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	fa92 f1a2 	rbit	r1, r2
 8001682:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001686:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800168a:	6011      	str	r1, [r2, #0]
  return result;
 800168c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001690:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	fab2 f282 	clz	r2, r2
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	f002 021f 	and.w	r2, r2, #31
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d084      	beq.n	80015bc <HAL_RCC_OscConfig+0x9c8>
 80016b2:	e07f      	b.n	80017b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7fe ffd4 	bl	8000660 <HAL_GetTick>
 80016b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7fe ffcf 	bl	8000660 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e2c4      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001702:	2202      	movs	r2, #2
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800171c:	601a      	str	r2, [r3, #0]
  return result;
 800171e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001722:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001726:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d102      	bne.n	8001742 <HAL_RCC_OscConfig+0xb4e>
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	e013      	b.n	800176a <HAL_RCC_OscConfig+0xb76>
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800174a:	2202      	movs	r2, #2
 800174c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800176e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001772:	2102      	movs	r1, #2
 8001774:	6011      	str	r1, [r2, #0]
 8001776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800177a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	fa92 f1a2 	rbit	r1, r2
 8001784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001788:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800178c:	6011      	str	r1, [r2, #0]
  return result;
 800178e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001792:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	fab2 f282 	clz	r2, r2
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f002 021f 	and.w	r2, r2, #31
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f202 	lsl.w	r2, r1, r2
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d184      	bne.n	80016be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8242 	beq.w	8001c5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_RCC_OscConfig+0xc58>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	f000 8213 	beq.w	8001c0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	f040 8162 	bne.w	8001abe <HAL_RCC_OscConfig+0xeca>
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001802:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800181e:	601a      	str	r2, [r3, #0]
  return result;
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001828:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	461a      	mov	r2, r3
 800183c:	2300      	movs	r3, #0
 800183e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7fe ff0e 	bl	8000660 <HAL_GetTick>
 8001844:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	e00c      	b.n	8001864 <HAL_RCC_OscConfig+0xc70>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7fe ff06 	bl	8000660 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1fd      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800186c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001888:	601a      	str	r2, [r3, #0]
  return result;
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001892:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0xcba>
 80018a8:	4bb0      	ldr	r3, [pc, #704]	; (8001b6c <HAL_RCC_OscConfig+0xf78>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e027      	b.n	80018fe <HAL_RCC_OscConfig+0xd0a>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80018dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	4b9c      	ldr	r3, [pc, #624]	; (8001b6c <HAL_RCC_OscConfig+0xf78>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001902:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001906:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800190a:	6011      	str	r1, [r2, #0]
 800190c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001910:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	fa92 f1a2 	rbit	r1, r2
 800191a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800191e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001922:	6011      	str	r1, [r2, #0]
  return result;
 8001924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001928:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	fab2 f282 	clz	r2, r2
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f042 0220 	orr.w	r2, r2, #32
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f002 021f 	and.w	r2, r2, #31
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d182      	bne.n	8001850 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194a:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <HAL_RCC_OscConfig+0xf78>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	430b      	orrs	r3, r1
 800196c:	497f      	ldr	r1, [pc, #508]	; (8001b6c <HAL_RCC_OscConfig+0xf78>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800197a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800197e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	fa93 f2a3 	rbit	r2, r3
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001996:	601a      	str	r2, [r3, #0]
  return result;
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	461a      	mov	r2, r3
 80019b4:	2301      	movs	r3, #1
 80019b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7fe fe52 	bl	8000660 <HAL_GetTick>
 80019bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7fe fe4d 	bl	8000660 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e144      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80019de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fa93 f2a3 	rbit	r2, r3
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80019fa:	601a      	str	r2, [r3, #0]
  return result;
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	095b      	lsrs	r3, r3, #5
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d102      	bne.n	8001a20 <HAL_RCC_OscConfig+0xe2c>
 8001a1a:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <HAL_RCC_OscConfig+0xf78>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	e027      	b.n	8001a70 <HAL_RCC_OscConfig+0xe7c>
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fa93 f2a3 	rbit	r2, r3
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_OscConfig+0xf78>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a7c:	6011      	str	r1, [r2, #0]
 8001a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	fa92 f1a2 	rbit	r1, r2
 8001a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a94:	6011      	str	r1, [r2, #0]
  return result;
 8001a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	fab2 f282 	clz	r2, r2
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f042 0220 	orr.w	r2, r2, #32
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f002 021f 	and.w	r2, r2, #31
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d082      	beq.n	80019c2 <HAL_RCC_OscConfig+0xdce>
 8001abc:	e0cf      	b.n	8001c5e <HAL_RCC_OscConfig+0x106a>
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ae2:	601a      	str	r2, [r3, #0]
  return result;
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001aec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fdac 	bl	8000660 <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7fe fda7 	bl	8000660 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e09e      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b46:	601a      	str	r2, [r3, #0]
  return result;
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d104      	bne.n	8001b70 <HAL_RCC_OscConfig+0xf7c>
 8001b66:	4b01      	ldr	r3, [pc, #4]	; (8001b6c <HAL_RCC_OscConfig+0xf78>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	e029      	b.n	8001bc0 <HAL_RCC_OscConfig+0xfcc>
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_OscConfig+0x1078>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fa92 f1a2 	rbit	r1, r2
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d180      	bne.n	8001b0e <HAL_RCC_OscConfig+0xf1a>
 8001c0c:	e027      	b.n	8001c5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e01e      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_OscConfig+0x1078>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d10b      	bne.n	8001c5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b09e      	sub	sp, #120	; 0x78
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e162      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b90      	ldr	r3, [pc, #576]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b8d      	ldr	r3, [pc, #564]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 0207 	bic.w	r2, r3, #7
 8001c9e:	498b      	ldr	r1, [pc, #556]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b89      	ldr	r3, [pc, #548]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e14a      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4b82      	ldr	r3, [pc, #520]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	497f      	ldr	r1, [pc, #508]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80dc 	beq.w	8001e9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d13c      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xf6>
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xa6>
 8001d10:	4b6f      	ldr	r3, [pc, #444]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e00f      	b.n	8001d36 <HAL_RCC_ClockConfig+0xc6>
 8001d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	667b      	str	r3, [r7, #100]	; 0x64
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	663b      	str	r3, [r7, #96]	; 0x60
 8001d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d3e:	fa92 f2a2 	rbit	r2, r2
 8001d42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d46:	fab2 f282 	clz	r2, r2
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f042 0220 	orr.w	r2, r2, #32
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f002 021f 	and.w	r2, r2, #31
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d17b      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0f3      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d13c      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x178>
 8001d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d92:	4b4f      	ldr	r3, [pc, #316]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_ClockConfig+0x148>
 8001d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	647b      	str	r3, [r7, #68]	; 0x44
 8001da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001daa:	643b      	str	r3, [r7, #64]	; 0x40
 8001dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dc0:	fa92 f2a2 	rbit	r2, r2
 8001dc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f002 021f 	and.w	r2, r2, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d13a      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b2      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2de>
 8001de8:	2302      	movs	r3, #2
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x1a0>
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	e00d      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1bc>
 8001e10:	2302      	movs	r3, #2
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	61ba      	str	r2, [r7, #24]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	617a      	str	r2, [r7, #20]
  return result;
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	fab2 f282 	clz	r2, r2
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f042 0220 	orr.w	r2, r2, #32
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e079      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	491a      	ldr	r1, [pc, #104]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7fe fbf8 	bl	8000660 <HAL_GetTick>
 8001e70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7fe fbf4 	bl	8000660 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e061      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d214      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4906      	ldr	r1, [pc, #24]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_RCC_ClockConfig+0x25c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e040      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2de>
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_ClockConfig+0x2e8>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	491a      	ldr	r1, [pc, #104]	; (8001f58 <HAL_RCC_ClockConfig+0x2e8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x2e8>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4912      	ldr	r1, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x2e8>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f12:	f000 f829 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f16:	4601      	mov	r1, r0
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_RCC_ClockConfig+0x2e8>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f20:	22f0      	movs	r2, #240	; 0xf0
 8001f22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	fa92 f2a2 	rbit	r2, r2
 8001f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	40d3      	lsrs	r3, r2
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x2ec>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_RCC_ClockConfig+0x2f0>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_ClockConfig+0x2f4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fb46 	bl	80005d8 <HAL_InitTick>
  
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3778      	adds	r7, #120	; 0x78
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	0800271c 	.word	0x0800271c
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b08b      	sub	sp, #44	; 0x2c
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x30>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x36>
 8001f96:	e03c      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f9a:	623b      	str	r3, [r7, #32]
      break;
 8001f9c:	e03c      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fa4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fa8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	fa92 f2a2 	rbit	r2, r2
 8001fb0:	607a      	str	r2, [r7, #4]
  return result;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	40d3      	lsrs	r3, r2
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	220f      	movs	r2, #15
 8001fcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	fa92 f2a2 	rbit	r2, r2
 8001fd4:	60fa      	str	r2, [r7, #12]
  return result;
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	fab2 f282 	clz	r2, r2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	40d3      	lsrs	r3, r2
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8002000:	e004      	b.n	800200c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	623b      	str	r3, [r7, #32]
      break;
 8002010:	e002      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002014:	623b      	str	r3, [r7, #32]
      break;
 8002016:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002018:	6a3b      	ldr	r3, [r7, #32]
}
 800201a:	4618      	mov	r0, r3
 800201c:	372c      	adds	r7, #44	; 0x2c
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	007a1200 	.word	0x007a1200
 8002030:	0800272c 	.word	0x0800272c
 8002034:	0800273c 	.word	0x0800273c
 8002038:	003d0900 	.word	0x003d0900

0800203c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e049      	b.n	80020e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe f9e6 	bl	8000434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3304      	adds	r3, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f000 f9e8 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d001      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e04a      	b.n	800219a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x6c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212e:	d013      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x6c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_TIM_Base_Start_IT+0xc0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x6c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x6c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1a      	ldr	r2, [pc, #104]	; (80021b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x6c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d115      	bne.n	8002184 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_TIM_Base_Start_IT+0xd0>)
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b06      	cmp	r3, #6
 8002168:	d015      	beq.n	8002196 <HAL_TIM_Base_Start_IT+0xaa>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d011      	beq.n	8002196 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002182:	e008      	b.n	8002196 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e000      	b.n	8002198 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40013400 	.word	0x40013400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	00010007 	.word	0x00010007

080021c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0202 	mvn.w	r2, #2
 80021ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f905 	bl	8002412 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8f7 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f908 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0204 	mvn.w	r2, #4
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2202      	movs	r2, #2
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8db 	bl	8002412 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8cd 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f8de 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b08      	cmp	r3, #8
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0208 	mvn.w	r2, #8
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2204      	movs	r2, #4
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8b1 	bl	8002412 <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8a3 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f8b4 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d122      	bne.n	8002318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d11b      	bne.n	8002318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0210 	mvn.w	r2, #16
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2208      	movs	r2, #8
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f887 	bl	8002412 <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f879 	bl	80023fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f88a 	bl	8002426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d107      	bne.n	8002344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0201 	mvn.w	r2, #1
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fd ff42 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	2b80      	cmp	r3, #128	; 0x80
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b80      	cmp	r3, #128	; 0x80
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f98a 	bl	8002684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237e:	d10e      	bne.n	800239e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	d107      	bne.n	800239e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f97d 	bl	8002698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d10e      	bne.n	80023ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f838 	bl	800243a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d10e      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d107      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f06f 0220 	mvn.w	r2, #32
 80023ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f93d 	bl	8002670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <TIM_Base_SetConfig+0x104>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00f      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246e:	d00b      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a39      	ldr	r2, [pc, #228]	; (8002558 <TIM_Base_SetConfig+0x108>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a38      	ldr	r2, [pc, #224]	; (800255c <TIM_Base_SetConfig+0x10c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a37      	ldr	r2, [pc, #220]	; (8002560 <TIM_Base_SetConfig+0x110>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d108      	bne.n	800249a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <TIM_Base_SetConfig+0x104>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01b      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a8:	d017      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <TIM_Base_SetConfig+0x108>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a29      	ldr	r2, [pc, #164]	; (800255c <TIM_Base_SetConfig+0x10c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00f      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a28      	ldr	r2, [pc, #160]	; (8002560 <TIM_Base_SetConfig+0x110>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00b      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a27      	ldr	r2, [pc, #156]	; (8002564 <TIM_Base_SetConfig+0x114>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <TIM_Base_SetConfig+0x118>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d003      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a25      	ldr	r2, [pc, #148]	; (800256c <TIM_Base_SetConfig+0x11c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <TIM_Base_SetConfig+0x104>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00f      	beq.n	8002538 <TIM_Base_SetConfig+0xe8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <TIM_Base_SetConfig+0x110>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <TIM_Base_SetConfig+0xe8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <TIM_Base_SetConfig+0x114>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_Base_SetConfig+0xe8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <TIM_Base_SetConfig+0x118>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0xe8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <TIM_Base_SetConfig+0x11c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	40013400 	.word	0x40013400
 8002564:	40014000 	.word	0x40014000
 8002568:	40014400 	.word	0x40014400
 800256c:	40014800 	.word	0x40014800

08002570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002584:	2302      	movs	r3, #2
 8002586:	e063      	b.n	8002650 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2b      	ldr	r2, [pc, #172]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d108      	bne.n	80025ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d018      	beq.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d013      	beq.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00e      	beq.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d004      	beq.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a13      	ldr	r2, [pc, #76]	; (800266c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10c      	bne.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800262a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	4313      	orrs	r3, r2
 8002634:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40013400 	.word	0x40013400
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800
 800266c:	40014000 	.word	0x40014000

08002670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4d0d      	ldr	r5, [pc, #52]	; (80026e4 <__libc_init_array+0x38>)
 80026b0:	4c0d      	ldr	r4, [pc, #52]	; (80026e8 <__libc_init_array+0x3c>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	2600      	movs	r6, #0
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	4d0b      	ldr	r5, [pc, #44]	; (80026ec <__libc_init_array+0x40>)
 80026be:	4c0c      	ldr	r4, [pc, #48]	; (80026f0 <__libc_init_array+0x44>)
 80026c0:	f000 f820 	bl	8002704 <_init>
 80026c4:	1b64      	subs	r4, r4, r5
 80026c6:	10a4      	asrs	r4, r4, #2
 80026c8:	2600      	movs	r6, #0
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	f855 3b04 	ldr.w	r3, [r5], #4
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	0800274c 	.word	0x0800274c
 80026e8:	0800274c 	.word	0x0800274c
 80026ec:	0800274c 	.word	0x0800274c
 80026f0:	08002750 	.word	0x08002750

080026f4 <memset>:
 80026f4:	4402      	add	r2, r0
 80026f6:	4603      	mov	r3, r0
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d100      	bne.n	80026fe <memset+0xa>
 80026fc:	4770      	bx	lr
 80026fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002702:	e7f9      	b.n	80026f8 <memset+0x4>

08002704 <_init>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr

08002710 <_fini>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr
