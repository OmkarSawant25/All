
LedUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b8  080035b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035b8  080035b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b8  080035b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abfa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ea  00000000  00000000  0002ac36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0002c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c0  00000000  00000000  0002cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb66  00000000  00000000  0002d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8cd  00000000  00000000  00049f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac3a9  00000000  00000000  0005486b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00100c14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c88  00000000  00000000  00100c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003568 	.word	0x08003568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003568 	.word	0x08003568

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9be 	bl	800054c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f894 	bl	8000300 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001d8:	f000 f862 	bl	80002a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive(&huart1, RXstring,6, 10);
 80001dc:	230a      	movs	r3, #10
 80001de:	2206      	movs	r2, #6
 80001e0:	4902      	ldr	r1, [pc, #8]	; (80001ec <main+0x24>)
 80001e2:	4803      	ldr	r0, [pc, #12]	; (80001f0 <main+0x28>)
 80001e4:	f002 f9a4 	bl	8002530 <HAL_UART_Receive>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <main+0x20>
 80001ea:	bf00      	nop
 80001ec:	200000b0 	.word	0x200000b0
 80001f0:	20000028 	.word	0x20000028

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b09e      	sub	sp, #120	; 0x78
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 f9a8 	bl	8003558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	223c      	movs	r2, #60	; 0x3c
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 f99a 	bl	8003558 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000224:	2302      	movs	r3, #2
 8000226:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022c:	2310      	movs	r3, #16
 800022e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800023c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fd02 	bl	8000c4c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800024e:	f000 f897 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fd2a 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800027a:	f000 f881 	bl	8000380 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800027e:	2301      	movs	r3, #1
 8000280:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	4618      	mov	r0, r3
 800028a:	f001 ff53 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000294:	f000 f874 	bl	8000380 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3778      	adds	r7, #120	; 0x78
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002a6:	4a15      	ldr	r2, [pc, #84]	; (80002fc <MX_USART1_UART_Init+0x5c>)
 80002a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002c6:	220c      	movs	r2, #12
 80002c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002d8:	2200      	movs	r2, #0
 80002da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002de:	2200      	movs	r2, #0
 80002e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_USART1_UART_Init+0x58>)
 80002e4:	f002 f8d6 	bl	8002494 <HAL_UART_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80002ee:	f000 f847 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000028 	.word	0x20000028
 80002fc:	40013800 	.word	0x40013800

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0x78>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_GPIO_Init+0x78>)
 800031c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000320:	6153      	str	r3, [r2, #20]
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_GPIO_Init+0x78>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_GPIO_Init+0x78>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0x78>)
 8000334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0x78>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <MX_GPIO_Init+0x7c>)
 800034e:	f000 fc65 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	4619      	mov	r1, r3
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0x7c>)
 800036c:	f000 fadc 	bl	8000928 <HAL_GPIO_Init>

}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	48001000 	.word	0x48001000

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <HAL_MspInit+0x44>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <HAL_MspInit+0x44>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <HAL_MspInit+0x44>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <HAL_MspInit+0x44>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <HAL_MspInit+0x44>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_MspInit+0x44>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003c2:	2007      	movs	r0, #7
 80003c4:	f000 f9f8 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40021000 	.word	0x40021000

080003d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <HAL_UART_MspInit+0x90>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d131      	bne.n	800045a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003f6:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <HAL_UART_MspInit+0x94>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <HAL_UART_MspInit+0x94>)
 80003fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b19      	ldr	r3, [pc, #100]	; (8000468 <HAL_UART_MspInit+0x94>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800040a:	613b      	str	r3, [r7, #16]
 800040c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <HAL_UART_MspInit+0x94>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <HAL_UART_MspInit+0x94>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <HAL_UART_MspInit+0x94>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000426:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800042a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042c:	2302      	movs	r3, #2
 800042e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000438:	2307      	movs	r3, #7
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4619      	mov	r1, r3
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f000 fa6f 	bl	8000928 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2025      	movs	r0, #37	; 0x25
 8000450:	f000 f9bd 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000454:	2025      	movs	r0, #37	; 0x25
 8000456:	f000 f9d6 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800045a:	bf00      	nop
 800045c:	3728      	adds	r7, #40	; 0x28
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40013800 	.word	0x40013800
 8000468:	40021000 	.word	0x40021000

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <NMI_Handler+0x4>

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <MemManage_Handler+0x4>

0800047e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <UsageFault_Handler+0x4>

0800048a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b8:	f000 f88e 	bl	80005d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <USART1_IRQHandler+0x10>)
 80004c6:	f002 f8e9 	bl	800269c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000028 	.word	0x20000028

080004d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <SystemInit+0x20>)
 80004da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004de:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <SystemInit+0x20>)
 80004e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000530 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004fc:	f7ff ffea 	bl	80004d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490d      	ldr	r1, [pc, #52]	; (8000538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0a      	ldr	r4, [pc, #40]	; (8000544 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000526:	f002 fff3 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800052a:	f7ff fe4d 	bl	80001c8 <main>

0800052e <LoopForever>:

LoopForever:
    b LoopForever
 800052e:	e7fe      	b.n	800052e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000530:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800053c:	080035c0 	.word	0x080035c0
  ldr r2, =_sbss
 8000540:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000544:	200000c0 	.word	0x200000c0

08000548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_2_IRQHandler>
	...

0800054c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_Init+0x28>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_Init+0x28>)
 8000556:	f043 0310 	orr.w	r3, r3, #16
 800055a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 f92b 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000562:	2000      	movs	r0, #0
 8000564:	f000 f808 	bl	8000578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000568:	f7ff ff10 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40022000 	.word	0x40022000

08000578 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_InitTick+0x54>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_InitTick+0x58>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f943 	bl	8000822 <HAL_SYSTICK_Config>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	e00e      	b.n	80005c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	d80a      	bhi.n	80005c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ac:	2200      	movs	r2, #0
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f000 f90b 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <HAL_InitTick+0x5c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e000      	b.n	80005c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x20>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x24>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_IncTick+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000008 	.word	0x20000008
 80005fc:	200000bc 	.word	0x200000bc

08000600 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return uwTick;  
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_GetTick+0x14>)
 8000606:	681b      	ldr	r3, [r3, #0]
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200000bc 	.word	0x200000bc

08000618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <__NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	2b00      	cmp	r3, #0
 800068c:	db0b      	blt.n	80006a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 021f 	and.w	r2, r3, #31
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <__NVIC_EnableIRQ+0x38>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	095b      	lsrs	r3, r3, #5
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff8e 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff29 	bl	8000618 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff3e 	bl	8000660 <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff8e 	bl	800070c <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff31 	bl	800067c <__NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffa2 	bl	8000774 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000848:	2b02      	cmp	r3, #2
 800084a:	d008      	beq.n	800085e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2204      	movs	r2, #4
 8000850:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e020      	b.n	80008a0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f022 020e 	bic.w	r2, r2, #14
 800086c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f022 0201 	bic.w	r2, r2, #1
 800087c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d005      	beq.n	80008ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2204      	movs	r2, #4
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e027      	b.n	800091e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f022 020e 	bic.w	r2, r2, #14
 80008dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 0201 	bic.w	r2, r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	4798      	blx	r3
    } 
  }
  return status;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	e154      	b.n	8000be2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	2101      	movs	r1, #1
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	fa01 f303 	lsl.w	r3, r1, r3
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	f000 8146 	beq.w	8000bdc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	2b01      	cmp	r3, #1
 800095a:	d005      	beq.n	8000968 <HAL_GPIO_Init+0x40>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	2b02      	cmp	r3, #2
 8000966:	d130      	bne.n	80009ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800099e:	2201      	movs	r2, #1
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	091b      	lsrs	r3, r3, #4
 80009b4:	f003 0201 	and.w	r2, r3, #1
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d017      	beq.n	8000a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	2203      	movs	r2, #3
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d123      	bne.n	8000a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	08da      	lsrs	r2, r3, #3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3208      	adds	r2, #8
 8000a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	220f      	movs	r2, #15
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	691a      	ldr	r2, [r3, #16]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	08da      	lsrs	r2, r3, #3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3208      	adds	r2, #8
 8000a54:	6939      	ldr	r1, [r7, #16]
 8000a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	2203      	movs	r2, #3
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0203 	and.w	r2, r3, #3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 80a0 	beq.w	8000bdc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <HAL_GPIO_Init+0x2d8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ab4:	4a53      	ldr	r2, [pc, #332]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	220f      	movs	r2, #15
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ade:	d019      	beq.n	8000b14 <HAL_GPIO_Init+0x1ec>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <HAL_GPIO_Init+0x2e0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d013      	beq.n	8000b10 <HAL_GPIO_Init+0x1e8>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <HAL_GPIO_Init+0x2e4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d00d      	beq.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a47      	ldr	r2, [pc, #284]	; (8000c10 <HAL_GPIO_Init+0x2e8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x1e0>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a46      	ldr	r2, [pc, #280]	; (8000c14 <HAL_GPIO_Init+0x2ec>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d101      	bne.n	8000b04 <HAL_GPIO_Init+0x1dc>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e008      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b04:	2305      	movs	r3, #5
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b14:	2300      	movs	r3, #0
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b26:	4937      	ldr	r1, [pc, #220]	; (8000c04 <HAL_GPIO_Init+0x2dc>)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b58:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b88:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_GPIO_Init+0x2f0>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f47f aea3 	bne.w	8000938 <HAL_GPIO_Init+0x10>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	48001000 	.word	0x48001000
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f001 b823 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 817d 	beq.w	8000f82 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c88:	4bbc      	ldr	r3, [pc, #752]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d00c      	beq.n	8000cae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c94:	4bb9      	ldr	r3, [pc, #740]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d15c      	bne.n	8000d5a <HAL_RCC_OscConfig+0x10e>
 8000ca0:	4bb6      	ldr	r3, [pc, #728]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cac:	d155      	bne.n	8000d5a <HAL_RCC_OscConfig+0x10e>
 8000cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc6:	fab3 f383 	clz	r3, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	095b      	lsrs	r3, r3, #5
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d102      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x94>
 8000cda:	4ba8      	ldr	r3, [pc, #672]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	e015      	b.n	8000d0c <HAL_RCC_OscConfig+0xc0>
 8000ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cfc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d00:	fa93 f3a3 	rbit	r3, r3
 8000d04:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d08:	4b9c      	ldr	r3, [pc, #624]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d10:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d18:	fa92 f2a2 	rbit	r2, r2
 8000d1c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d20:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	f042 0220 	orr.w	r2, r2, #32
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	f002 021f 	and.w	r2, r2, #31
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 811f 	beq.w	8000f80 <HAL_RCC_OscConfig+0x334>
 8000d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8116 	bne.w	8000f80 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f000 bfaf 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6a:	d106      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12e>
 8000d6c:	4b83      	ldr	r3, [pc, #524]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a82      	ldr	r2, [pc, #520]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e036      	b.n	8000de8 <HAL_RCC_OscConfig+0x19c>
 8000d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x158>
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7b      	ldr	r2, [pc, #492]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b79      	ldr	r3, [pc, #484]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a78      	ldr	r2, [pc, #480]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e021      	b.n	8000de8 <HAL_RCC_OscConfig+0x19c>
 8000da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x184>
 8000db6:	4b71      	ldr	r3, [pc, #452]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a70      	ldr	r2, [pc, #448]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a6d      	ldr	r2, [pc, #436]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e00b      	b.n	8000de8 <HAL_RCC_OscConfig+0x19c>
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a69      	ldr	r2, [pc, #420]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a66      	ldr	r2, [pc, #408]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000de8:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	f023 020f 	bic.w	r2, r3, #15
 8000df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	495f      	ldr	r1, [pc, #380]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d059      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e12:	f7ff fbf5 	bl	8000600 <HAL_GetTick>
 8000e16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	e00a      	b.n	8000e32 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fbf0 	bl	8000600 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b64      	cmp	r3, #100	; 0x64
 8000e2a:	d902      	bls.n	8000e32 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f000 bf43 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8000e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e36:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	fab3 f383 	clz	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	095b      	lsrs	r3, r3, #5
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <HAL_RCC_OscConfig+0x218>
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	e015      	b.n	8000e90 <HAL_RCC_OscConfig+0x244>
 8000e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e68:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e80:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e94:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e98:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ea4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ea8:	fab2 f282 	clz	r2, r2
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	f042 0220 	orr.w	r2, r2, #32
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f002 021f 	and.w	r2, r2, #31
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0ab      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1d0>
 8000ec4:	e05d      	b.n	8000f82 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fb9b 	bl	8000600 <HAL_GetTick>
 8000eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ece:	e00a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fb96 	bl	8000600 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	; 0x64
 8000ede:	d902      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f000 bee9 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8000ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ef2:	fa93 f3a3 	rbit	r3, r3
 8000ef6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000efa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	095b      	lsrs	r3, r3, #5
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d102      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2cc>
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	e015      	b.n	8000f44 <HAL_RCC_OscConfig+0x2f8>
 8000f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f30:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f48:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f4c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f50:	fa92 f2a2 	rbit	r2, r2
 8000f54:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f58:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f5c:	fab2 f282 	clz	r2, r2
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	f042 0220 	orr.w	r2, r2, #32
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	f002 021f 	and.w	r2, r2, #31
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ab      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x284>
 8000f78:	e003      	b.n	8000f82 <HAL_RCC_OscConfig+0x336>
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 817d 	beq.w	8001292 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f98:	4ba6      	ldr	r3, [pc, #664]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fa4:	4ba3      	ldr	r3, [pc, #652]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d172      	bne.n	8001096 <HAL_RCC_OscConfig+0x44a>
 8000fb0:	4ba0      	ldr	r3, [pc, #640]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d16c      	bne.n	8001096 <HAL_RCC_OscConfig+0x44a>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	fab3 f383 	clz	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	095b      	lsrs	r3, r3, #5
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_RCC_OscConfig+0x3a0>
 8000fe6:	4b93      	ldr	r3, [pc, #588]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	e013      	b.n	8001014 <HAL_RCC_OscConfig+0x3c8>
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001004:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001010:	4b88      	ldr	r3, [pc, #544]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	2202      	movs	r2, #2
 8001016:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800101a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800101e:	fa92 f2a2 	rbit	r2, r2
 8001022:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001026:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800102a:	fab2 f282 	clz	r2, r2
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	f042 0220 	orr.w	r2, r2, #32
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f002 021f 	and.w	r2, r2, #31
 800103a:	2101      	movs	r1, #1
 800103c:	fa01 f202 	lsl.w	r2, r1, r2
 8001040:	4013      	ands	r3, r2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00a      	beq.n	800105c <HAL_RCC_OscConfig+0x410>
 8001046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f000 be2e 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b75      	ldr	r3, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	21f8      	movs	r1, #248	; 0xf8
 8001072:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800107a:	fa91 f1a1 	rbit	r1, r1
 800107e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001082:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001086:	fab1 f181 	clz	r1, r1
 800108a:	b2c9      	uxtb	r1, r1
 800108c:	408b      	lsls	r3, r1
 800108e:	4969      	ldr	r1, [pc, #420]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001094:	e0fd      	b.n	8001292 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8088 	beq.w	80011b8 <HAL_RCC_OscConfig+0x56c>
 80010a8:	2301      	movs	r3, #1
 80010aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	2301      	movs	r3, #1
 80010d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fa94 	bl	8000600 <HAL_GetTick>
 80010d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fa8f 	bl	8000600 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d902      	bls.n	80010f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f000 bde2 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001106:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110a:	fab3 f383 	clz	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	095b      	lsrs	r3, r3, #5
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d102      	bne.n	8001124 <HAL_RCC_OscConfig+0x4d8>
 800111e:	4b45      	ldr	r3, [pc, #276]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	e013      	b.n	800114c <HAL_RCC_OscConfig+0x500>
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800113c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	2202      	movs	r2, #2
 800114e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001152:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001156:	fa92 f2a2 	rbit	r2, r2
 800115a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800115e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001162:	fab2 f282 	clz	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	f042 0220 	orr.w	r2, r2, #32
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	f002 021f 	and.w	r2, r2, #31
 8001172:	2101      	movs	r1, #1
 8001174:	fa01 f202 	lsl.w	r2, r1, r2
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0af      	beq.n	80010de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	21f8      	movs	r1, #248	; 0xf8
 8001194:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800119c:	fa91 f1a1 	rbit	r1, r1
 80011a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011a8:	fab1 f181 	clz	r1, r1
 80011ac:	b2c9      	uxtb	r1, r1
 80011ae:	408b      	lsls	r3, r1
 80011b0:	4920      	ldr	r1, [pc, #128]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
 80011b6:	e06c      	b.n	8001292 <HAL_RCC_OscConfig+0x646>
 80011b8:	2301      	movs	r3, #1
 80011ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	461a      	mov	r2, r3
 80011e0:	2300      	movs	r3, #0
 80011e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fa0c 	bl	8000600 <HAL_GetTick>
 80011e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fa07 	bl	8000600 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d902      	bls.n	8001204 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	f000 bd5a 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d104      	bne.n	8001238 <HAL_RCC_OscConfig+0x5ec>
 800122e:	4b01      	ldr	r3, [pc, #4]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	e015      	b.n	8001260 <HAL_RCC_OscConfig+0x614>
 8001234:	40021000 	.word	0x40021000
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001250:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800125c:	4bc8      	ldr	r3, [pc, #800]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	2202      	movs	r2, #2
 8001262:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001266:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800126a:	fa92 f2a2 	rbit	r2, r2
 800126e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001272:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f002 021f 	and.w	r2, r2, #31
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ad      	bne.n	80011ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8110 	beq.w	80014c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d079      	beq.n	80013ac <HAL_RCC_OscConfig+0x760>
 80012b8:	2301      	movs	r3, #1
 80012ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4bab      	ldr	r3, [pc, #684]	; (8001584 <HAL_RCC_OscConfig+0x938>)
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	461a      	mov	r2, r3
 80012de:	2301      	movs	r3, #1
 80012e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff f98d 	bl	8000600 <HAL_GetTick>
 80012e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff f988 	bl	8000600 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d902      	bls.n	8001302 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f000 bcdb 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001318:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800131c:	2202      	movs	r2, #2
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001324:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fa93 f2a3 	rbit	r2, r3
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	fa93 f2a3 	rbit	r2, r3
 8001352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001356:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800135a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 800135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001368:	2102      	movs	r1, #2
 800136a:	6019      	str	r1, [r3, #0]
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f1a3 	rbit	r1, r3
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001382:	6019      	str	r1, [r3, #0]
  return result;
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0a0      	beq.n	80012ec <HAL_RCC_OscConfig+0x6a0>
 80013aa:	e08d      	b.n	80014c8 <HAL_RCC_OscConfig+0x87c>
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f2a3 	rbit	r2, r3
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ce:	601a      	str	r2, [r3, #0]
  return result;
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_RCC_OscConfig+0x938>)
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	461a      	mov	r2, r3
 80013ea:	2300      	movs	r3, #0
 80013ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff f907 	bl	8000600 <HAL_GetTick>
 80013f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f8:	f7ff f902 	bl	8000600 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d902      	bls.n	800140e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	f000 bc55 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 800140e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001412:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fa93 f2a3 	rbit	r2, r3
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	fa93 f2a3 	rbit	r2, r3
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001478:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001486:	2102      	movs	r1, #2
 8001488:	6019      	str	r1, [r3, #0]
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fa93 f1a3 	rbit	r1, r3
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014a0:	6019      	str	r1, [r3, #0]
  return result;
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d197      	bne.n	80013f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 81a1 	beq.w	8001820 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d116      	bne.n	800151e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fa:	61d3      	str	r3, [r2, #28]
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001516:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11a      	bne.n	8001560 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff f863 	bl	8000600 <HAL_GetTick>
 800153a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	e009      	b.n	8001554 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001540:	f7ff f85e 	bl	8000600 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b64      	cmp	r3, #100	; 0x64
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e3b1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ef      	beq.n	8001540 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d10d      	bne.n	800158c <HAL_RCC_OscConfig+0x940>
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a02      	ldr	r2, [pc, #8]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e03c      	b.n	80015f8 <HAL_RCC_OscConfig+0x9ac>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	10908120 	.word	0x10908120
 8001588:	40007000 	.word	0x40007000
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x96a>
 800159c:	4bc1      	ldr	r3, [pc, #772]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4ac0      	ldr	r2, [pc, #768]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	4bbe      	ldr	r3, [pc, #760]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4abd      	ldr	r2, [pc, #756]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e020      	b.n	80015f8 <HAL_RCC_OscConfig+0x9ac>
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x994>
 80015c6:	4bb7      	ldr	r3, [pc, #732]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4ab6      	ldr	r2, [pc, #728]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	4bb4      	ldr	r3, [pc, #720]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4ab3      	ldr	r2, [pc, #716]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6213      	str	r3, [r2, #32]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0x9ac>
 80015e0:	4bb0      	ldr	r3, [pc, #704]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4aaf      	ldr	r2, [pc, #700]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4bad      	ldr	r3, [pc, #692]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4aac      	ldr	r2, [pc, #688]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8081 	beq.w	800170c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7fe fff9 	bl	8000600 <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7fe fff4 	bl	8000600 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e345      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001672:	601a      	str	r2, [r3, #0]
  return result;
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800167c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d102      	bne.n	8001698 <HAL_RCC_OscConfig+0xa4c>
 8001692:	4b84      	ldr	r3, [pc, #528]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	e013      	b.n	80016c0 <HAL_RCC_OscConfig+0xa74>
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016c8:	2102      	movs	r1, #2
 80016ca:	6011      	str	r1, [r2, #0]
 80016cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	fa92 f1a2 	rbit	r1, r2
 80016da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016e2:	6011      	str	r1, [r2, #0]
  return result;
 80016e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d084      	beq.n	8001614 <HAL_RCC_OscConfig+0x9c8>
 800170a:	e07f      	b.n	800180c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7fe ff78 	bl	8000600 <HAL_GetTick>
 8001710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7fe ff73 	bl	8000600 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e2c4      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001736:	2202      	movs	r2, #2
 8001738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800175a:	2202      	movs	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001774:	601a      	str	r2, [r3, #0]
  return result;
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800177e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <HAL_RCC_OscConfig+0xb4e>
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	e013      	b.n	80017c2 <HAL_RCC_OscConfig+0xb76>
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017ca:	2102      	movs	r1, #2
 80017cc:	6011      	str	r1, [r2, #0]
 80017ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	fa92 f1a2 	rbit	r1, r2
 80017dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017e4:	6011      	str	r1, [r2, #0]
  return result;
 80017e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d184      	bne.n	8001716 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800180c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 800181a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8242 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	f000 8213 	beq.w	8001c66 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b02      	cmp	r3, #2
 800184e:	f040 8162 	bne.w	8001b16 <HAL_RCC_OscConfig+0xeca>
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800185a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800185e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f2a3 	rbit	r2, r3
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001876:	601a      	str	r2, [r3, #0]
  return result;
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001880:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7fe feb2 	bl	8000600 <HAL_GetTick>
 800189c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a0:	e00c      	b.n	80018bc <HAL_RCC_OscConfig+0xc70>
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a8:	f7fe feaa 	bl	8000600 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1fd      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018e0:	601a      	str	r2, [r3, #0]
  return result;
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0xcba>
 8001900:	4bb0      	ldr	r3, [pc, #704]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e027      	b.n	8001956 <HAL_RCC_OscConfig+0xd0a>
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800190e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	4b9c      	ldr	r3, [pc, #624]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800195a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800195e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001962:	6011      	str	r1, [r2, #0]
 8001964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001968:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	fa92 f1a2 	rbit	r1, r2
 8001972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001976:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800197a:	6011      	str	r1, [r2, #0]
  return result;
 800197c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001980:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d182      	bne.n	80018a8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	430b      	orrs	r3, r1
 80019c4:	497f      	ldr	r1, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019ee:	601a      	str	r2, [r3, #0]
  return result;
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe fdf6 	bl	8000600 <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7fe fdf1 	bl	8000600 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e144      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a52:	601a      	str	r2, [r3, #0]
  return result;
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0xe2c>
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e027      	b.n	8001ac8 <HAL_RCC_OscConfig+0xe7c>
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001acc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ad0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad4:	6011      	str	r1, [r2, #0]
 8001ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ada:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	fa92 f1a2 	rbit	r1, r2
 8001ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001aec:	6011      	str	r1, [r2, #0]
  return result;
 8001aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d082      	beq.n	8001a1a <HAL_RCC_OscConfig+0xdce>
 8001b14:	e0cf      	b.n	8001cb6 <HAL_RCC_OscConfig+0x106a>
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fa93 f2a3 	rbit	r2, r3
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b3a:	601a      	str	r2, [r3, #0]
  return result;
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	461a      	mov	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7fe fd50 	bl	8000600 <HAL_GetTick>
 8001b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fd4b 	bl	8000600 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e09e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ba8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d104      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xf7c>
 8001bbe:	4b01      	ldr	r3, [pc, #4]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	e029      	b.n	8001c18 <HAL_RCC_OscConfig+0xfcc>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_OscConfig+0x1078>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	fa92 f1a2 	rbit	r1, r2
 8001c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c38:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c3c:	6011      	str	r1, [r2, #0]
  return result;
 8001c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c42:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d180      	bne.n	8001b66 <HAL_RCC_OscConfig+0xf1a>
 8001c64:	e027      	b.n	8001cb6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e01e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_OscConfig+0x1078>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c86:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d10b      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b09e      	sub	sp, #120	; 0x78
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e162      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b90      	ldr	r3, [pc, #576]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d910      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b8d      	ldr	r3, [pc, #564]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	498b      	ldr	r1, [pc, #556]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b89      	ldr	r3, [pc, #548]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e14a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	497f      	ldr	r1, [pc, #508]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80dc 	beq.w	8001ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d13c      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xf6>
 8001d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xa6>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	e00f      	b.n	8001d8e <HAL_RCC_ClockConfig+0xc6>
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d80:	663b      	str	r3, [r7, #96]	; 0x60
 8001d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d17b      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0f3      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d13c      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x178>
 8001dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x128>
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_ClockConfig+0x148>
 8001df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
 8001e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e14:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f002 021f 	and.w	r2, r2, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d13a      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b2      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
 8001e40:	2302      	movs	r3, #2
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e00d      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1bc>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2202      	movs	r2, #2
 8001e86:	61ba      	str	r2, [r7, #24]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	617a      	str	r2, [r7, #20]
  return result;
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e079      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	491a      	ldr	r1, [pc, #104]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fb9c 	bl	8000600 <HAL_GetTick>
 8001ec8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fb98 	bl	8000600 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e061      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d214      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4906      	ldr	r1, [pc, #24]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e040      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4912      	ldr	r1, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f6a:	f000 f829 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4601      	mov	r1, r0
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	22f0      	movs	r2, #240	; 0xf0
 8001f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	60fa      	str	r2, [r7, #12]
  return result;
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	40d3      	lsrs	r3, r2
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	fa21 f303 	lsr.w	r3, r1, r3
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_RCC_ClockConfig+0x2f4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe faea 	bl	8000578 <HAL_InitTick>
  
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3778      	adds	r7, #120	; 0x78
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08003580 	.word	0x08003580
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fee:	e03c      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ff2:	623b      	str	r3, [r7, #32]
      break;
 8001ff4:	e03c      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ffc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002000:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	fa92 f2a2 	rbit	r2, r2
 8002008:	607a      	str	r2, [r7, #4]
  return result;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	40d3      	lsrs	r3, r2
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc0>)
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	220f      	movs	r2, #15
 8002024:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	60fa      	str	r2, [r7, #12]
  return result;
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_RCC_GetSysClockFreq+0xcc>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e004      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_RCC_GetSysClockFreq+0xd0>)
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	623b      	str	r3, [r7, #32]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800206c:	623b      	str	r3, [r7, #32]
      break;
 800206e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002070:	6a3b      	ldr	r3, [r7, #32]
}
 8002072:	4618      	mov	r0, r3
 8002074:	372c      	adds	r7, #44	; 0x2c
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	08003598 	.word	0x08003598
 800208c:	080035a8 	.word	0x080035a8
 8002090:	003d0900 	.word	0x003d0900

08002094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020b2:	f7ff ffef 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	603a      	str	r2, [r7, #0]
  return result;
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	40d3      	lsrs	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08003590 	.word	0x08003590

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020f6:	f7ff ffcd 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020fa:	4601      	mov	r1, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002104:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	fa92 f2a2 	rbit	r2, r2
 8002110:	603a      	str	r2, [r7, #0]
  return result;
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	40d3      	lsrs	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x40>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	08003590 	.word	0x08003590

08002134 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b092      	sub	sp, #72	; 0x48
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80d4 	beq.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002158:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10e      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a4a      	ldr	r2, [pc, #296]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216e:	61d3      	str	r3, [r2, #28]
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7fe fa31 	bl	8000600 <HAL_GetTick>
 800219e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7fe fa2d 	bl	8000600 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b64      	cmp	r3, #100	; 0x64
 80021ae:	d901      	bls.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e169      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8084 	beq.w	80022da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021dc:	429a      	cmp	r2, r3
 80021de:	d07c      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	461a      	mov	r2, r3
 800220a:	2301      	movs	r3, #1
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	461a      	mov	r2, r3
 800222e:	2300      	movs	r3, #0
 8002230:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002232:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002236:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d04b      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe f9dd 	bl	8000600 <HAL_GetTick>
 8002246:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe f9d9 	bl	8000600 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e113      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002260:	2302      	movs	r3, #2
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	61fb      	str	r3, [r7, #28]
  return result;
 8002278:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d108      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800228e:	4b01      	ldr	r3, [pc, #4]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	e00d      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
 800229c:	10908100 	.word	0x10908100
 80022a0:	2302      	movs	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2202      	movs	r2, #2
 80022b2:	613a      	str	r2, [r7, #16]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	fa92 f2a2 	rbit	r2, r2
 80022ba:	60fa      	str	r2, [r7, #12]
  return result;
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f002 021f 	and.w	r2, r2, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0b7      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022da:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	496a      	ldr	r1, [pc, #424]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800230c:	4b60      	ldr	r3, [pc, #384]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f023 0203 	bic.w	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	495d      	ldr	r1, [pc, #372]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800232a:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4956      	ldr	r1, [pc, #344]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002338:	4313      	orrs	r3, r2
 800233a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002348:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	494e      	ldr	r1, [pc, #312]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f023 0210 	bic.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4947      	ldr	r1, [pc, #284]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002384:	4b42      	ldr	r3, [pc, #264]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	493f      	ldr	r1, [pc, #252]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f023 0220 	bic.w	r2, r3, #32
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4938      	ldr	r1, [pc, #224]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	4930      	ldr	r1, [pc, #192]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	4929      	ldr	r1, [pc, #164]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	4921      	ldr	r1, [pc, #132]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	491a      	ldr	r1, [pc, #104]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	4912      	ldr	r1, [pc, #72]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	490b      	ldr	r1, [pc, #44]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3748      	adds	r7, #72	; 0x48
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e040      	b.n	8002528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fd ff8c 	bl	80003d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fbe8 	bl	8002ca8 <UART_SetConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e022      	b.n	8002528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fdb0 	bl	8003050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fe37 	bl	8003194 <UART_CheckIdleState>
 8002526:	4603      	mov	r3, r0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002546:	2b20      	cmp	r3, #32
 8002548:	f040 80a3 	bne.w	8002692 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Receive+0x28>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e09b      	b.n	8002694 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2222      	movs	r2, #34	; 0x22
 8002568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002572:	f7fe f845 	bl	8000600 <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	88fa      	ldrh	r2, [r7, #6]
 8002584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002590:	d10e      	bne.n	80025b0 <HAL_UART_Receive+0x80>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_UART_Receive+0x76>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80025a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025a4:	e01a      	b.n	80025dc <HAL_UART_Receive+0xac>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	22ff      	movs	r2, #255	; 0xff
 80025aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025ae:	e015      	b.n	80025dc <HAL_UART_Receive+0xac>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <HAL_UART_Receive+0xa4>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <HAL_UART_Receive+0x9a>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	22ff      	movs	r2, #255	; 0xff
 80025c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025c8:	e008      	b.n	80025dc <HAL_UART_Receive+0xac>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	227f      	movs	r2, #127	; 0x7f
 80025ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025d2:	e003      	b.n	80025dc <HAL_UART_Receive+0xac>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80025e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ec:	d108      	bne.n	8002600 <HAL_UART_Receive+0xd0>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d104      	bne.n	8002600 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	e003      	b.n	8002608 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002608:	e037      	b.n	800267a <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2200      	movs	r2, #0
 8002612:	2120      	movs	r1, #32
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fe65 	bl	80032e4 <UART_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e033      	b.n	8002694 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002638:	b29a      	uxth	r2, r3
 800263a:	8a7b      	ldrh	r3, [r7, #18]
 800263c:	4013      	ands	r3, r2
 800263e:	b29a      	uxth	r2, r3
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	3302      	adds	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	e00d      	b.n	8002668 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002652:	b29b      	uxth	r3, r3
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8a7b      	ldrh	r3, [r7, #18]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4013      	ands	r3, r2
 800265c:	b2da      	uxtb	r2, r3
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1c1      	bne.n	800260a <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0ba      	sub	sp, #232	; 0xe8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80026ca:	4013      	ands	r3, r2
 80026cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d115      	bne.n	8002704 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00f      	beq.n	8002704 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 82ab 	beq.w	8002c50 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
      }
      return;
 8002702:	e2a5      	b.n	8002c50 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8117 	beq.w	800293c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800270e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800271a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800271e:	4b85      	ldr	r3, [pc, #532]	; (8002934 <HAL_UART_IRQHandler+0x298>)
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 810a 	beq.w	800293c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d011      	beq.n	8002758 <HAL_UART_IRQHandler+0xbc>
 8002734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d011      	beq.n	8002788 <HAL_UART_IRQHandler+0xec>
 8002764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2202      	movs	r2, #2
 8002776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d011      	beq.n	80027b8 <HAL_UART_IRQHandler+0x11c>
 8002794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2204      	movs	r2, #4
 80027a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ae:	f043 0202 	orr.w	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d017      	beq.n	80027f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2208      	movs	r2, #8
 80027e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ea:	f043 0208 	orr.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <HAL_UART_IRQHandler+0x18a>
 8002800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00c      	beq.n	8002826 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8211 	beq.w	8002c54 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00d      	beq.n	800285a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800283e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002860:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d005      	beq.n	800287e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002876:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04f      	beq.n	800291e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fd97 	bl	80033b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d141      	bne.n	8002916 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3308      	adds	r3, #8
 8002898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028a0:	e853 3f00 	ldrex	r3, [r3]
 80028a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3308      	adds	r3, #8
 80028ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1d9      	bne.n	8002892 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d013      	beq.n	800290e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <HAL_UART_IRQHandler+0x29c>)
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd ffda 	bl	80008ac <HAL_DMA_Abort_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d017      	beq.n	800292e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002908:	4610      	mov	r0, r2
 800290a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e00f      	b.n	800292e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9b4 	bl	8002c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002914:	e00b      	b.n	800292e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f9b0 	bl	8002c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	e007      	b.n	800292e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f9ac 	bl	8002c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800292c:	e192      	b.n	8002c54 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292e:	bf00      	nop
    return;
 8002930:	e190      	b.n	8002c54 <HAL_UART_IRQHandler+0x5b8>
 8002932:	bf00      	nop
 8002934:	04000120 	.word	0x04000120
 8002938:	0800347b 	.word	0x0800347b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002940:	2b01      	cmp	r3, #1
 8002942:	f040 814b 	bne.w	8002bdc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8144 	beq.w	8002bdc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 813d 	beq.w	8002bdc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2210      	movs	r2, #16
 8002968:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	f040 80b5 	bne.w	8002ae4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002986:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8164 	beq.w	8002c58 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800299a:	429a      	cmp	r2, r3
 800299c:	f080 815c 	bcs.w	8002c58 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	f000 8086 	beq.w	8002ac2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1da      	bne.n	80029b6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3308      	adds	r3, #8
 8002a06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e1      	bne.n	8002a00 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3308      	adds	r3, #8
 8002a42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e3      	bne.n	8002a3c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a92:	f023 0310 	bic.w	r3, r3, #16
 8002a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aa6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aac:	e841 2300 	strex	r3, r2, [r1]
 8002ab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e4      	bne.n	8002a82 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd febc 	bl	800083a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8d7 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ae2:	e0b9      	b.n	8002c58 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80ab 	beq.w	8002c5c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002b06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80a6 	beq.w	8002c5c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b32:	647b      	str	r3, [r7, #68]	; 0x44
 8002b34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e4      	bne.n	8002b10 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	623b      	str	r3, [r7, #32]
   return(result);
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3308      	adds	r3, #8
 8002b66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b6a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e3      	bne.n	8002b46 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0310 	bic.w	r3, r3, #16
 8002ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb8:	69b9      	ldr	r1, [r7, #24]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	e841 2300 	strex	r3, r2, [r1]
 8002bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e4      	bne.n	8002b92 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f85b 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bda:	e03f      	b.n	8002c5c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00e      	beq.n	8002c06 <HAL_UART_IRQHandler+0x56a>
 8002be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fc7b 	bl	80034fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c04:	e02d      	b.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00e      	beq.n	8002c30 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01c      	beq.n	8002c60 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
    }
    return;
 8002c2e:	e017      	b.n	8002c60 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d012      	beq.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fc2c 	bl	80034a6 <UART_EndTransmit_IT>
    return;
 8002c4e:	e008      	b.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c50:	bf00      	nop
 8002c52:	e006      	b.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c54:	bf00      	nop
 8002c56:	e004      	b.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c58:	bf00      	nop
 8002c5a:	e002      	b.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c5c:	bf00      	nop
 8002c5e:	e000      	b.n	8002c62 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c60:	bf00      	nop
  }

}
 8002c62:	37e8      	adds	r7, #232	; 0xe8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cd6:	f023 030c 	bic.w	r3, r3, #12
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	6979      	ldr	r1, [r7, #20]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4aa7      	ldr	r2, [pc, #668]	; (8002fc0 <UART_SetConfig+0x318>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d120      	bne.n	8002d6a <UART_SetConfig+0xc2>
 8002d28:	4ba6      	ldr	r3, [pc, #664]	; (8002fc4 <UART_SetConfig+0x31c>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d817      	bhi.n	8002d64 <UART_SetConfig+0xbc>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <UART_SetConfig+0x94>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d59 	.word	0x08002d59
 8002d44:	08002d5f 	.word	0x08002d5f
 8002d48:	08002d53 	.word	0x08002d53
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e0b5      	b.n	8002ebe <UART_SetConfig+0x216>
 8002d52:	2302      	movs	r3, #2
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e0b2      	b.n	8002ebe <UART_SetConfig+0x216>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e0af      	b.n	8002ebe <UART_SetConfig+0x216>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e0ac      	b.n	8002ebe <UART_SetConfig+0x216>
 8002d64:	2310      	movs	r3, #16
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e0a9      	b.n	8002ebe <UART_SetConfig+0x216>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a96      	ldr	r2, [pc, #600]	; (8002fc8 <UART_SetConfig+0x320>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d124      	bne.n	8002dbe <UART_SetConfig+0x116>
 8002d74:	4b93      	ldr	r3, [pc, #588]	; (8002fc4 <UART_SetConfig+0x31c>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d80:	d011      	beq.n	8002da6 <UART_SetConfig+0xfe>
 8002d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d86:	d817      	bhi.n	8002db8 <UART_SetConfig+0x110>
 8002d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d8c:	d011      	beq.n	8002db2 <UART_SetConfig+0x10a>
 8002d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d92:	d811      	bhi.n	8002db8 <UART_SetConfig+0x110>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <UART_SetConfig+0xf8>
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d006      	beq.n	8002dac <UART_SetConfig+0x104>
 8002d9e:	e00b      	b.n	8002db8 <UART_SetConfig+0x110>
 8002da0:	2300      	movs	r3, #0
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e08b      	b.n	8002ebe <UART_SetConfig+0x216>
 8002da6:	2302      	movs	r3, #2
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e088      	b.n	8002ebe <UART_SetConfig+0x216>
 8002dac:	2304      	movs	r3, #4
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e085      	b.n	8002ebe <UART_SetConfig+0x216>
 8002db2:	2308      	movs	r3, #8
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e082      	b.n	8002ebe <UART_SetConfig+0x216>
 8002db8:	2310      	movs	r3, #16
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e07f      	b.n	8002ebe <UART_SetConfig+0x216>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a82      	ldr	r2, [pc, #520]	; (8002fcc <UART_SetConfig+0x324>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d124      	bne.n	8002e12 <UART_SetConfig+0x16a>
 8002dc8:	4b7e      	ldr	r3, [pc, #504]	; (8002fc4 <UART_SetConfig+0x31c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002dd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dd4:	d011      	beq.n	8002dfa <UART_SetConfig+0x152>
 8002dd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dda:	d817      	bhi.n	8002e0c <UART_SetConfig+0x164>
 8002ddc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de0:	d011      	beq.n	8002e06 <UART_SetConfig+0x15e>
 8002de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de6:	d811      	bhi.n	8002e0c <UART_SetConfig+0x164>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <UART_SetConfig+0x14c>
 8002dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002df0:	d006      	beq.n	8002e00 <UART_SetConfig+0x158>
 8002df2:	e00b      	b.n	8002e0c <UART_SetConfig+0x164>
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e061      	b.n	8002ebe <UART_SetConfig+0x216>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e05e      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e00:	2304      	movs	r3, #4
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e05b      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e06:	2308      	movs	r3, #8
 8002e08:	77fb      	strb	r3, [r7, #31]
 8002e0a:	e058      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e055      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6e      	ldr	r2, [pc, #440]	; (8002fd0 <UART_SetConfig+0x328>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d124      	bne.n	8002e66 <UART_SetConfig+0x1be>
 8002e1c:	4b69      	ldr	r3, [pc, #420]	; (8002fc4 <UART_SetConfig+0x31c>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e28:	d011      	beq.n	8002e4e <UART_SetConfig+0x1a6>
 8002e2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e2e:	d817      	bhi.n	8002e60 <UART_SetConfig+0x1b8>
 8002e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e34:	d011      	beq.n	8002e5a <UART_SetConfig+0x1b2>
 8002e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3a:	d811      	bhi.n	8002e60 <UART_SetConfig+0x1b8>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <UART_SetConfig+0x1a0>
 8002e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e44:	d006      	beq.n	8002e54 <UART_SetConfig+0x1ac>
 8002e46:	e00b      	b.n	8002e60 <UART_SetConfig+0x1b8>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e037      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e034      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e54:	2304      	movs	r3, #4
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e031      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e02e      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e60:	2310      	movs	r3, #16
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e02b      	b.n	8002ebe <UART_SetConfig+0x216>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <UART_SetConfig+0x32c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d124      	bne.n	8002eba <UART_SetConfig+0x212>
 8002e70:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <UART_SetConfig+0x31c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e7c:	d011      	beq.n	8002ea2 <UART_SetConfig+0x1fa>
 8002e7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e82:	d817      	bhi.n	8002eb4 <UART_SetConfig+0x20c>
 8002e84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e88:	d011      	beq.n	8002eae <UART_SetConfig+0x206>
 8002e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e8e:	d811      	bhi.n	8002eb4 <UART_SetConfig+0x20c>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <UART_SetConfig+0x1f4>
 8002e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e98:	d006      	beq.n	8002ea8 <UART_SetConfig+0x200>
 8002e9a:	e00b      	b.n	8002eb4 <UART_SetConfig+0x20c>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e00d      	b.n	8002ebe <UART_SetConfig+0x216>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e00a      	b.n	8002ebe <UART_SetConfig+0x216>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e007      	b.n	8002ebe <UART_SetConfig+0x216>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e004      	b.n	8002ebe <UART_SetConfig+0x216>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e001      	b.n	8002ebe <UART_SetConfig+0x216>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d15b      	bne.n	8002f80 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d827      	bhi.n	8002f1e <UART_SetConfig+0x276>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0x22c>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f09 	.word	0x08002f09
 8002ee0:	08002f1f 	.word	0x08002f1f
 8002ee4:	08002f0f 	.word	0x08002f0f
 8002ee8:	08002f1f 	.word	0x08002f1f
 8002eec:	08002f1f 	.word	0x08002f1f
 8002ef0:	08002f1f 	.word	0x08002f1f
 8002ef4:	08002f17 	.word	0x08002f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f7ff f8d8 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8002efc:	61b8      	str	r0, [r7, #24]
        break;
 8002efe:	e013      	b.n	8002f28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7ff f8f6 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8002f04:	61b8      	str	r0, [r7, #24]
        break;
 8002f06:	e00f      	b.n	8002f28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <UART_SetConfig+0x330>)
 8002f0a:	61bb      	str	r3, [r7, #24]
        break;
 8002f0c:	e00c      	b.n	8002f28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7ff f857 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002f12:	61b8      	str	r0, [r7, #24]
        break;
 8002f14:	e008      	b.n	8002f28 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1a:	61bb      	str	r3, [r7, #24]
        break;
 8002f1c:	e004      	b.n	8002f28 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77bb      	strb	r3, [r7, #30]
        break;
 8002f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8082 	beq.w	8003034 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	005a      	lsls	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	441a      	add	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	d916      	bls.n	8002f7a <UART_SetConfig+0x2d2>
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f52:	d212      	bcs.n	8002f7a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f023 030f 	bic.w	r3, r3, #15
 8002f5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	89fb      	ldrh	r3, [r7, #14]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	89fa      	ldrh	r2, [r7, #14]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	e05c      	b.n	8003034 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	77bb      	strb	r3, [r7, #30]
 8002f7e:	e059      	b.n	8003034 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f80:	7ffb      	ldrb	r3, [r7, #31]
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d835      	bhi.n	8002ff2 <UART_SetConfig+0x34a>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <UART_SetConfig+0x2e4>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fb1 	.word	0x08002fb1
 8002f90:	08002fb9 	.word	0x08002fb9
 8002f94:	08002fdd 	.word	0x08002fdd
 8002f98:	08002ff3 	.word	0x08002ff3
 8002f9c:	08002fe3 	.word	0x08002fe3
 8002fa0:	08002ff3 	.word	0x08002ff3
 8002fa4:	08002ff3 	.word	0x08002ff3
 8002fa8:	08002ff3 	.word	0x08002ff3
 8002fac:	08002feb 	.word	0x08002feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb0:	f7ff f87c 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8002fb4:	61b8      	str	r0, [r7, #24]
        break;
 8002fb6:	e021      	b.n	8002ffc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7ff f89a 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	61b8      	str	r0, [r7, #24]
        break;
 8002fbe:	e01d      	b.n	8002ffc <UART_SetConfig+0x354>
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	40004800 	.word	0x40004800
 8002fd0:	40004c00 	.word	0x40004c00
 8002fd4:	40005000 	.word	0x40005000
 8002fd8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <UART_SetConfig+0x3a4>)
 8002fde:	61bb      	str	r3, [r7, #24]
        break;
 8002fe0:	e00c      	b.n	8002ffc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe2:	f7fe ffed 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002fe6:	61b8      	str	r0, [r7, #24]
        break;
 8002fe8:	e008      	b.n	8002ffc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fee:	61bb      	str	r3, [r7, #24]
        break;
 8002ff0:	e004      	b.n	8002ffc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8002ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	085a      	lsrs	r2, r3, #1
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	441a      	add	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b0f      	cmp	r3, #15
 800301a:	d909      	bls.n	8003030 <UART_SetConfig+0x388>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003022:	d205      	bcs.n	8003030 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	b29a      	uxth	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	e001      	b.n	8003034 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003040:	7fbb      	ldrb	r3, [r7, #30]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	007a1200 	.word	0x007a1200

08003050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01a      	beq.n	8003166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314e:	d10a      	bne.n	8003166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b098      	sub	sp, #96	; 0x60
 8003198:	af02      	add	r7, sp, #8
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031a4:	f7fd fa2c 	bl	8000600 <HAL_GetTick>
 80031a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d12e      	bne.n	8003216 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c0:	2200      	movs	r2, #0
 80031c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f88c 	bl	80032e4 <UART_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d021      	beq.n	8003216 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e6:	653b      	str	r3, [r7, #80]	; 0x50
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f0:	647b      	str	r3, [r7, #68]	; 0x44
 80031f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e6      	bne.n	80031d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e062      	b.n	80032dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d149      	bne.n	80032b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322c:	2200      	movs	r2, #0
 800322e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f856 	bl	80032e4 <UART_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d03c      	beq.n	80032b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	e853 3f00 	ldrex	r3, [r3]
 800324a:	623b      	str	r3, [r7, #32]
   return(result);
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
 800325e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003264:	e841 2300 	strex	r3, r2, [r1]
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1e6      	bne.n	800323e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3308      	adds	r3, #8
 8003276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3308      	adds	r3, #8
 800328e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003290:	61fa      	str	r2, [r7, #28]
 8003292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	69b9      	ldr	r1, [r7, #24]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	617b      	str	r3, [r7, #20]
   return(result);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e5      	bne.n	8003270 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e011      	b.n	80032dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3758      	adds	r7, #88	; 0x58
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f4:	e049      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d045      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fd f97f 	bl	8000600 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <UART_WaitOnFlagUntilTimeout+0x30>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e048      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d031      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d110      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2208      	movs	r2, #8
 800333a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f838 	bl	80033b2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2208      	movs	r2, #8
 8003346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e029      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d111      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f81e 	bl	80033b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e00f      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d0a6      	beq.n	80032f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b095      	sub	sp, #84	; 0x54
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d8:	643b      	str	r3, [r7, #64]	; 0x40
 80033da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e6      	bne.n	80033ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3308      	adds	r3, #8
 800340a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800340c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e5      	bne.n	80033ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	2b01      	cmp	r3, #1
 8003426:	d118      	bne.n	800345a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	60bb      	str	r3, [r7, #8]
   return(result);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f023 0310 	bic.w	r3, r3, #16
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	613b      	str	r3, [r7, #16]
   return(result);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e6      	bne.n	8003428 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800346e:	bf00      	nop
 8003470:	3754      	adds	r7, #84	; 0x54
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff fbef 	bl	8002c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b088      	sub	sp, #32
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6979      	ldr	r1, [r7, #20]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	613b      	str	r3, [r7, #16]
   return(result);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e6      	bne.n	80034ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fbbb 	bl	8002c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034f2:	bf00      	nop
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	4d0d      	ldr	r5, [pc, #52]	; (8003548 <__libc_init_array+0x38>)
 8003514:	4c0d      	ldr	r4, [pc, #52]	; (800354c <__libc_init_array+0x3c>)
 8003516:	1b64      	subs	r4, r4, r5
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	2600      	movs	r6, #0
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	4d0b      	ldr	r5, [pc, #44]	; (8003550 <__libc_init_array+0x40>)
 8003522:	4c0c      	ldr	r4, [pc, #48]	; (8003554 <__libc_init_array+0x44>)
 8003524:	f000 f820 	bl	8003568 <_init>
 8003528:	1b64      	subs	r4, r4, r5
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	2600      	movs	r6, #0
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f855 3b04 	ldr.w	r3, [r5], #4
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	080035b8 	.word	0x080035b8
 800354c:	080035b8 	.word	0x080035b8
 8003550:	080035b8 	.word	0x080035b8
 8003554:	080035bc 	.word	0x080035bc

08003558 <memset>:
 8003558:	4402      	add	r2, r0
 800355a:	4603      	mov	r3, r0
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	f803 1b01 	strb.w	r1, [r3], #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <_init>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr

08003574 <_fini>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr
