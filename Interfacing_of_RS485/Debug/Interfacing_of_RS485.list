
Interfacing_of_RS485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d8  080045d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045d8  080045d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045d8  080045d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae4a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad2  00000000  00000000  0002aeea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  0002d148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d337  00000000  00000000  0002d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa34  00000000  00000000  0004ab5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad865  00000000  00000000  00055593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102df8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002118  00000000  00000000  00102e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800454c 	.word	0x0800454c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800454c 	.word	0x0800454c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SendData>:
uint8_t TXData[16];
uint8_t RXData[16];
unsigned int indx = 0;

void SendData(uint8_t *data)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);       //PULL DE HIGH TO ENABLE TX OPERATION
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000282:	f000 fdc7 	bl	8000e14 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
 8000286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028a:	2204      	movs	r2, #4
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <SendData+0x3c>)
 8000290:	f002 fa4a 	bl	8002728 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);      //PULL DE LOW TO ENABLE TX OPERATION
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f000 fdb9 	bl	8000e14 <HAL_GPIO_WritePin>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000008c 	.word	0x2000008c

080002b0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXData, 16);
 80002bc:	2210      	movs	r2, #16
 80002be:	4904      	ldr	r1, [pc, #16]	; (80002d0 <HAL_UARTEx_RxEventCallback+0x20>)
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <HAL_UARTEx_RxEventCallback+0x24>)
 80002c2:	f003 fc4f 	bl	8003b64 <HAL_UARTEx_ReceiveToIdle_IT>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000124 	.word	0x20000124
 80002d4:	2000008c 	.word	0x2000008c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fa0e 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f826 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f8ae 	bl	8000444 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002e8:	f000 f87c 	bl	80003e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RXData, 16);
 80002ec:	2210      	movs	r2, #16
 80002ee:	490b      	ldr	r1, [pc, #44]	; (800031c <main+0x44>)
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x48>)
 80002f2:	f003 fc37 	bl	8003b64 <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf(TXData,"F103 %d",indx++);
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <main+0x4c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	1c5a      	adds	r2, r3, #1
 80002fc:	4909      	ldr	r1, [pc, #36]	; (8000324 <main+0x4c>)
 80002fe:	600a      	str	r2, [r1, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4909      	ldr	r1, [pc, #36]	; (8000328 <main+0x50>)
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <main+0x54>)
 8000306:	f003 fcb3 	bl	8003c70 <siprintf>
	  SendData(TXData);
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <main+0x54>)
 800030c:	f7ff ffb0 	bl	8000270 <SendData>
	  HAL_Delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000314:	f000 fa58 	bl	80007c8 <HAL_Delay>
	  sprintf(TXData,"F103 %d",indx++);
 8000318:	e7ed      	b.n	80002f6 <main+0x1e>
 800031a:	bf00      	nop
 800031c:	20000124 	.word	0x20000124
 8000320:	2000008c 	.word	0x2000008c
 8000324:	20000134 	.word	0x20000134
 8000328:	08004564 	.word	0x08004564
 800032c:	20000114 	.word	0x20000114

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09e      	sub	sp, #120	; 0x78
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 fc8e 	bl	8003c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	463b      	mov	r3, r7
 8000356:	223c      	movs	r2, #60	; 0x3c
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f003 fc80 	bl	8003c60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000360:	2301      	movs	r3, #1
 8000362:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	2301      	movs	r3, #1
 8000370:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000372:	2302      	movs	r3, #2
 8000374:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000380:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fd5c 	bl	8000e44 <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000392:	f000 f897 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	230f      	movs	r3, #15
 8000398:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2302      	movs	r3, #2
 800039c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b0:	2102      	movs	r1, #2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fd84 	bl	8001ec0 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003be:	f000 f881 	bl	80004c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 ffad 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003d8:	f000 f874 	bl	80004c4 <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	3778      	adds	r7, #120	; 0x78
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003ea:	4a15      	ldr	r2, [pc, #84]	; (8000440 <MX_USART1_UART_Init+0x5c>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_USART1_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART1_UART_Init+0x58>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART1_UART_Init+0x58>)
 8000428:	f002 f930 	bl	800268c <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000432:	f000 f847 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000008c 	.word	0x2000008c
 8000440:	40013800 	.word	0x40013800

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <MX_GPIO_Init+0x7c>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <MX_GPIO_Init+0x7c>)
 8000460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_GPIO_Init+0x7c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_GPIO_Init+0x7c>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_GPIO_Init+0x7c>)
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_GPIO_Init+0x7c>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000494:	f000 fcbe 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800049c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fb34 	bl	8000b20 <HAL_GPIO_Init>

}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	e7fe      	b.n	80004cc <Error_Handler+0x8>
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x44>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_MspInit+0x44>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x44>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_MspInit+0x44>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_MspInit+0x44>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_MspInit+0x44>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000506:	2007      	movs	r0, #7
 8000508:	f000 fa52 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <HAL_UART_MspInit+0x90>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d131      	bne.n	800059e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <HAL_UART_MspInit+0x94>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <HAL_UART_MspInit+0x94>)
 8000540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <HAL_UART_MspInit+0x94>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <HAL_UART_MspInit+0x94>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a15      	ldr	r2, [pc, #84]	; (80005ac <HAL_UART_MspInit+0x94>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <HAL_UART_MspInit+0x94>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800056a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800057c:	2307      	movs	r3, #7
 800057e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f000 fac9 	bl	8000b20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	2025      	movs	r0, #37	; 0x25
 8000594:	f000 fa17 	bl	80009c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000598:	2025      	movs	r0, #37	; 0x25
 800059a:	f000 fa30 	bl	80009fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40013800 	.word	0x40013800
 80005ac:	40021000 	.word	0x40021000

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f8c4 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <USART1_IRQHandler+0x10>)
 800060a:	f002 f917 	bl	800283c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c

08000618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <_sbrk+0x5c>)
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <_sbrk+0x60>)
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <_sbrk+0x64>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <_sbrk+0x68>)
 8000638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	429a      	cmp	r2, r3
 8000646:	d207      	bcs.n	8000658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000648:	f003 fae0 	bl	8003c0c <__errno>
 800064c:	4603      	mov	r3, r0
 800064e:	220c      	movs	r2, #12
 8000650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	e009      	b.n	800066c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <_sbrk+0x64>)
 8000668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000a000 	.word	0x2000a000
 8000678:	00000400 	.word	0x00000400
 800067c:	20000138 	.word	0x20000138
 8000680:	20000150 	.word	0x20000150

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <SystemInit+0x20>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <SystemInit+0x20>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ac:	f7ff ffea 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490d      	ldr	r1, [pc, #52]	; (80006e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0a      	ldr	r4, [pc, #40]	; (80006f4 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d6:	f003 fa9f 	bl	8003c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006da:	f7ff fdfd 	bl	80002d8 <main>

080006de <LoopForever>:

LoopForever:
    b LoopForever
 80006de:	e7fe      	b.n	80006de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006ec:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 80006f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006f4:	20000150 	.word	0x20000150

080006f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_2_IRQHandler>
	...

080006fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HAL_Init+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_Init+0x28>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f000 f94f 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 f808 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000718:	f7ff feda 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022000 	.word	0x40022000

08000728 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x54>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f967 	bl	8000a1a <HAL_SYSTICK_Config>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00e      	b.n	8000774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d80a      	bhi.n	8000772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f000 f92f 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <HAL_InitTick+0x5c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000008 	.word	0x20000008
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x20>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x24>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_IncTick+0x24>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008
 80007ac:	2000013c 	.word	0x2000013c

080007b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_GetTick+0x14>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	2000013c 	.word	0x2000013c

080007c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d0:	f7ff ffee 	bl	80007b0 <HAL_GetTick>
 80007d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e0:	d005      	beq.n	80007ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_Delay+0x44>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ee:	bf00      	nop
 80007f0:	f7ff ffde 	bl	80007b0 <HAL_GetTick>
 80007f4:	4602      	mov	r2, r0
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d8f7      	bhi.n	80007f0 <HAL_Delay+0x28>
  {
  }
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000008 	.word	0x20000008

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <__NVIC_EnableIRQ+0x38>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff8e 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff29 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff3e 	bl	8000858 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff8e 	bl	8000904 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5d 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff31 	bl	8000874 <__NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffa2 	bl	800096c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d008      	beq.n	8000a56 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2204      	movs	r2, #4
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e020      	b.n	8000a98 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 020e 	bic.w	r2, r2, #14
 8000a64:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0201 	bic.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d005      	beq.n	8000ac6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2204      	movs	r2, #4
 8000abe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e027      	b.n	8000b16 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 020e 	bic.w	r2, r2, #14
 8000ad4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f022 0201 	bic.w	r2, r2, #1
 8000ae4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aee:	2101      	movs	r1, #1
 8000af0:	fa01 f202 	lsl.w	r2, r1, r2
 8000af4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
    } 
  }
  return status;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2e:	e154      	b.n	8000dda <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2101      	movs	r1, #1
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8146 	beq.w	8000dd4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d005      	beq.n	8000b60 <HAL_GPIO_Init+0x40>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d130      	bne.n	8000bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b96:	2201      	movs	r2, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	f003 0201 	and.w	r2, r3, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d017      	beq.n	8000bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d123      	bne.n	8000c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	08da      	lsrs	r2, r3, #3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3208      	adds	r2, #8
 8000c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	220f      	movs	r2, #15
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	691a      	ldr	r2, [r3, #16]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	08da      	lsrs	r2, r3, #3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3208      	adds	r2, #8
 8000c4c:	6939      	ldr	r1, [r7, #16]
 8000c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0203 	and.w	r2, r3, #3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80a0 	beq.w	8000dd4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_GPIO_Init+0x2d8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <HAL_GPIO_Init+0x2d8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b55      	ldr	r3, [pc, #340]	; (8000df8 <HAL_GPIO_Init+0x2d8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cac:	4a53      	ldr	r2, [pc, #332]	; (8000dfc <HAL_GPIO_Init+0x2dc>)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd6:	d019      	beq.n	8000d0c <HAL_GPIO_Init+0x1ec>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a49      	ldr	r2, [pc, #292]	; (8000e00 <HAL_GPIO_Init+0x2e0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d013      	beq.n	8000d08 <HAL_GPIO_Init+0x1e8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <HAL_GPIO_Init+0x2e4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1e4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <HAL_GPIO_Init+0x2e8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1e0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <HAL_GPIO_Init+0x2ec>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1dc>
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	e008      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	e006      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d00:	2303      	movs	r3, #3
 8000d02:	e004      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	f002 0203 	and.w	r2, r2, #3
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4093      	lsls	r3, r2
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d1e:	4937      	ldr	r1, [pc, #220]	; (8000dfc <HAL_GPIO_Init+0x2dc>)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2c:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d50:	4a2f      	ldr	r2, [pc, #188]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f47f aea3 	bne.w	8000b30 <HAL_GPIO_Init+0x10>
  }
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	48000400 	.word	0x48000400
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000c00 	.word	0x48000c00
 8000e0c:	48001000 	.word	0x48001000
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f001 b823 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 817d 	beq.w	800117a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e80:	4bbc      	ldr	r3, [pc, #752]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d00c      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e8c:	4bb9      	ldr	r3, [pc, #740]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 030c 	and.w	r3, r3, #12
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d15c      	bne.n	8000f52 <HAL_RCC_OscConfig+0x10e>
 8000e98:	4bb6      	ldr	r3, [pc, #728]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea4:	d155      	bne.n	8000f52 <HAL_RCC_OscConfig+0x10e>
 8000ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eaa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	095b      	lsrs	r3, r3, #5
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d102      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x94>
 8000ed2:	4ba8      	ldr	r3, [pc, #672]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	e015      	b.n	8000f04 <HAL_RCC_OscConfig+0xc0>
 8000ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000edc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ef4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f00:	4b9c      	ldr	r3, [pc, #624]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f08:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f10:	fa92 f2a2 	rbit	r2, r2
 8000f14:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f1c:	fab2 f282 	clz	r2, r2
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f042 0220 	orr.w	r2, r2, #32
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	f002 021f 	and.w	r2, r2, #31
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 811f 	beq.w	8001178 <HAL_RCC_OscConfig+0x334>
 8000f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 8116 	bne.w	8001178 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f000 bfaf 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x12e>
 8000f64:	4b83      	ldr	r3, [pc, #524]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a82      	ldr	r2, [pc, #520]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e036      	b.n	8000fe0 <HAL_RCC_OscConfig+0x19c>
 8000f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x158>
 8000f82:	4b7c      	ldr	r3, [pc, #496]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7b      	ldr	r2, [pc, #492]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b79      	ldr	r3, [pc, #484]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a78      	ldr	r2, [pc, #480]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e021      	b.n	8000fe0 <HAL_RCC_OscConfig+0x19c>
 8000f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x184>
 8000fae:	4b71      	ldr	r3, [pc, #452]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a70      	ldr	r2, [pc, #448]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a6d      	ldr	r2, [pc, #436]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0x19c>
 8000fc8:	4b6a      	ldr	r3, [pc, #424]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a69      	ldr	r2, [pc, #420]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b67      	ldr	r3, [pc, #412]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a66      	ldr	r2, [pc, #408]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fe0:	4b64      	ldr	r3, [pc, #400]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	f023 020f 	bic.w	r2, r3, #15
 8000fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	495f      	ldr	r1, [pc, #380]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d059      	beq.n	80010be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fbd1 	bl	80007b0 <HAL_GetTick>
 800100e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	e00a      	b.n	800102a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fbcc 	bl	80007b0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b64      	cmp	r3, #100	; 0x64
 8001022:	d902      	bls.n	800102a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	f000 bf43 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
 800102a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800103e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <HAL_RCC_OscConfig+0x218>
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	e015      	b.n	8001088 <HAL_RCC_OscConfig+0x244>
 800105c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001060:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001074:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001078:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001084:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800108c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001090:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001094:	fa92 f2a2 	rbit	r2, r2
 8001098:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800109c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	f042 0220 	orr.w	r2, r2, #32
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f002 021f 	and.w	r2, r2, #31
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0ab      	beq.n	8001014 <HAL_RCC_OscConfig+0x1d0>
 80010bc:	e05d      	b.n	800117a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010be:	f7ff fb77 	bl	80007b0 <HAL_GetTick>
 80010c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	e00a      	b.n	80010de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fb72 	bl	80007b0 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b64      	cmp	r3, #100	; 0x64
 80010d6:	d902      	bls.n	80010de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	f000 bee9 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
 80010de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x2cc>
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	e015      	b.n	800113c <HAL_RCC_OscConfig+0x2f8>
 8001110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001114:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001128:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800112c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_RCC_OscConfig+0x330>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001140:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001144:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001148:	fa92 f2a2 	rbit	r2, r2
 800114c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001150:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001154:	fab2 f282 	clz	r2, r2
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	f042 0220 	orr.w	r2, r2, #32
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	f002 021f 	and.w	r2, r2, #31
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1ab      	bne.n	80010c8 <HAL_RCC_OscConfig+0x284>
 8001170:	e003      	b.n	800117a <HAL_RCC_OscConfig+0x336>
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 817d 	beq.w	800148a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001190:	4ba6      	ldr	r3, [pc, #664]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800119c:	4ba3      	ldr	r3, [pc, #652]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d172      	bne.n	800128e <HAL_RCC_OscConfig+0x44a>
 80011a8:	4ba0      	ldr	r3, [pc, #640]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d16c      	bne.n	800128e <HAL_RCC_OscConfig+0x44a>
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x3a0>
 80011de:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e013      	b.n	800120c <HAL_RCC_OscConfig+0x3c8>
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001208:	4b88      	ldr	r3, [pc, #544]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	2202      	movs	r2, #2
 800120e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001212:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001216:	fa92 f2a2 	rbit	r2, r2
 800121a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800121e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	f042 0220 	orr.w	r2, r2, #32
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f002 021f 	and.w	r2, r2, #31
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <HAL_RCC_OscConfig+0x410>
 800123e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d002      	beq.n	8001254 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f000 be2e 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	21f8      	movs	r1, #248	; 0xf8
 800126a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001272:	fa91 f1a1 	rbit	r1, r1
 8001276:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800127a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800127e:	fab1 f181 	clz	r1, r1
 8001282:	b2c9      	uxtb	r1, r1
 8001284:	408b      	lsls	r3, r1
 8001286:	4969      	ldr	r1, [pc, #420]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128c:	e0fd      	b.n	800148a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8088 	beq.w	80013b0 <HAL_RCC_OscConfig+0x56c>
 80012a0:	2301      	movs	r3, #1
 80012a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b6:	fab3 f383 	clz	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	461a      	mov	r2, r3
 80012c8:	2301      	movs	r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fa70 	bl	80007b0 <HAL_GetTick>
 80012d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fa6b 	bl	80007b0 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d902      	bls.n	80012ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f000 bde2 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	095b      	lsrs	r3, r3, #5
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d102      	bne.n	800131c <HAL_RCC_OscConfig+0x4d8>
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	e013      	b.n	8001344 <HAL_RCC_OscConfig+0x500>
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001334:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	2202      	movs	r2, #2
 8001346:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800134a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800134e:	fa92 f2a2 	rbit	r2, r2
 8001352:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001356:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800135a:	fab2 f282 	clz	r2, r2
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	f042 0220 	orr.w	r2, r2, #32
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	f002 021f 	and.w	r2, r2, #31
 800136a:	2101      	movs	r1, #1
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0af      	beq.n	80012d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	21f8      	movs	r1, #248	; 0xf8
 800138c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001394:	fa91 f1a1 	rbit	r1, r1
 8001398:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800139c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013a0:	fab1 f181 	clz	r1, r1
 80013a4:	b2c9      	uxtb	r1, r1
 80013a6:	408b      	lsls	r3, r1
 80013a8:	4920      	ldr	r1, [pc, #128]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
 80013ae:	e06c      	b.n	800148a <HAL_RCC_OscConfig+0x646>
 80013b0:	2301      	movs	r3, #1
 80013b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	461a      	mov	r2, r3
 80013d8:	2300      	movs	r3, #0
 80013da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff f9e8 	bl	80007b0 <HAL_GetTick>
 80013e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff f9e3 	bl	80007b0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d902      	bls.n	80013fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	f000 bd5a 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800140e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	095b      	lsrs	r3, r3, #5
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d104      	bne.n	8001430 <HAL_RCC_OscConfig+0x5ec>
 8001426:	4b01      	ldr	r3, [pc, #4]	; (800142c <HAL_RCC_OscConfig+0x5e8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	e015      	b.n	8001458 <HAL_RCC_OscConfig+0x614>
 800142c:	40021000 	.word	0x40021000
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001448:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001454:	4bc8      	ldr	r3, [pc, #800]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	2202      	movs	r2, #2
 800145a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800145e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001462:	fa92 f2a2 	rbit	r2, r2
 8001466:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800146a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800146e:	fab2 f282 	clz	r2, r2
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f042 0220 	orr.w	r2, r2, #32
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f002 021f 	and.w	r2, r2, #31
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ad      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8110 	beq.w	80016c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d079      	beq.n	80015a4 <HAL_RCC_OscConfig+0x760>
 80014b0:	2301      	movs	r3, #1
 80014b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4bab      	ldr	r3, [pc, #684]	; (800177c <HAL_RCC_OscConfig+0x938>)
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	461a      	mov	r2, r3
 80014d6:	2301      	movs	r3, #1
 80014d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff f969 	bl	80007b0 <HAL_GetTick>
 80014de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff f964 	bl	80007b0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d902      	bls.n	80014fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f000 bcdb 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001538:	2202      	movs	r2, #2
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001552:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001554:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 8001556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001560:	2102      	movs	r1, #2
 8001562:	6019      	str	r1, [r3, #0]
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	fa93 f1a3 	rbit	r1, r3
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800157a:	6019      	str	r1, [r3, #0]
  return result;
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0a0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x6a0>
 80015a2:	e08d      	b.n	80016c0 <HAL_RCC_OscConfig+0x87c>
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015c6:	601a      	str	r2, [r3, #0]
  return result;
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4b68      	ldr	r3, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x938>)
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	461a      	mov	r2, r3
 80015e2:	2300      	movs	r3, #0
 80015e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff f8e3 	bl	80007b0 <HAL_GetTick>
 80015ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff f8de 	bl	80007b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d902      	bls.n	8001606 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	f000 bc55 	b.w	8001eb0 <HAL_RCC_OscConfig+0x106c>
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800160e:	2202      	movs	r2, #2
 8001610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001632:	2202      	movs	r2, #2
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fa93 f2a3 	rbit	r2, r3
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001656:	2202      	movs	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001670:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 8001674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800167e:	2102      	movs	r1, #2
 8001680:	6019      	str	r1, [r3, #0]
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fa93 f1a3 	rbit	r1, r3
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001698:	6019      	str	r1, [r3, #0]
  return result;
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d197      	bne.n	80015f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 81a1 	beq.w	8001a18 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d116      	bne.n	8001716 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	4a22      	ldr	r2, [pc, #136]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 80016ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f2:	61d3      	str	r3, [r2, #28]
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800170e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_RCC_OscConfig+0x93c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11a      	bne.n	8001758 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_RCC_OscConfig+0x93c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a16      	ldr	r2, [pc, #88]	; (8001780 <HAL_RCC_OscConfig+0x93c>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff f83f 	bl	80007b0 <HAL_GetTick>
 8001732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	e009      	b.n	800174c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001738:	f7ff f83a 	bl	80007b0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b64      	cmp	r3, #100	; 0x64
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e3b1      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_RCC_OscConfig+0x93c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ef      	beq.n	8001738 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10d      	bne.n	8001784 <HAL_RCC_OscConfig+0x940>
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a02      	ldr	r2, [pc, #8]	; (8001778 <HAL_RCC_OscConfig+0x934>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	e03c      	b.n	80017f0 <HAL_RCC_OscConfig+0x9ac>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	10908120 	.word	0x10908120
 8001780:	40007000 	.word	0x40007000
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x96a>
 8001794:	4bc1      	ldr	r3, [pc, #772]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4ac0      	ldr	r2, [pc, #768]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	4bbe      	ldr	r3, [pc, #760]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4abd      	ldr	r2, [pc, #756]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e020      	b.n	80017f0 <HAL_RCC_OscConfig+0x9ac>
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x994>
 80017be:	4bb7      	ldr	r3, [pc, #732]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4ab6      	ldr	r2, [pc, #728]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4bb4      	ldr	r3, [pc, #720]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4ab3      	ldr	r2, [pc, #716]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x9ac>
 80017d8:	4bb0      	ldr	r3, [pc, #704]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4aaf      	ldr	r2, [pc, #700]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4bad      	ldr	r3, [pc, #692]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4aac      	ldr	r2, [pc, #688]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8081 	beq.w	8001904 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7fe ffd5 	bl	80007b0 <HAL_GetTick>
 8001806:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7fe ffd0 	bl	80007b0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e345      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800182c:	2202      	movs	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001850:	2202      	movs	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f2a3 	rbit	r2, r3
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800186a:	601a      	str	r2, [r3, #0]
  return result;
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001874:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d102      	bne.n	8001890 <HAL_RCC_OscConfig+0xa4c>
 800188a:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	e013      	b.n	80018b8 <HAL_RCC_OscConfig+0xa74>
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018c0:	2102      	movs	r1, #2
 80018c2:	6011      	str	r1, [r2, #0]
 80018c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	fa92 f1a2 	rbit	r1, r2
 80018d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018da:	6011      	str	r1, [r2, #0]
  return result;
 80018dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	fab2 f282 	clz	r2, r2
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f002 021f 	and.w	r2, r2, #31
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d084      	beq.n	800180c <HAL_RCC_OscConfig+0x9c8>
 8001902:	e07f      	b.n	8001a04 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7fe ff54 	bl	80007b0 <HAL_GetTick>
 8001908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	e00b      	b.n	8001926 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7fe ff4f 	bl	80007b0 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e2c4      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001952:	2202      	movs	r2, #2
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800196c:	601a      	str	r2, [r3, #0]
  return result;
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001976:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d102      	bne.n	8001992 <HAL_RCC_OscConfig+0xb4e>
 800198c:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	e013      	b.n	80019ba <HAL_RCC_OscConfig+0xb76>
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019c2:	2102      	movs	r1, #2
 80019c4:	6011      	str	r1, [r2, #0]
 80019c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	fa92 f1a2 	rbit	r1, r2
 80019d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019dc:	6011      	str	r1, [r2, #0]
  return result;
 80019de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	fab2 f282 	clz	r2, r2
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f002 021f 	and.w	r2, r2, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d184      	bne.n	800190e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8242 	beq.w	8001eae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_RCC_OscConfig+0xc58>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	f000 8213 	beq.w	8001e5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	f040 8162 	bne.w	8001d0e <HAL_RCC_OscConfig+0xeca>
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a6e:	601a      	str	r2, [r3, #0]
  return result;
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7fe fe8e 	bl	80007b0 <HAL_GetTick>
 8001a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a98:	e00c      	b.n	8001ab4 <HAL_RCC_OscConfig+0xc70>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7fe fe86 	bl	80007b0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1fd      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ad8:	601a      	str	r2, [r3, #0]
  return result;
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ae2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_OscConfig+0xcba>
 8001af8:	4bb0      	ldr	r3, [pc, #704]	; (8001dbc <HAL_RCC_OscConfig+0xf78>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e027      	b.n	8001b4e <HAL_RCC_OscConfig+0xd0a>
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	4b9c      	ldr	r3, [pc, #624]	; (8001dbc <HAL_RCC_OscConfig+0xf78>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b5a:	6011      	str	r1, [r2, #0]
 8001b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	fa92 f1a2 	rbit	r1, r2
 8001b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b72:	6011      	str	r1, [r2, #0]
  return result;
 8001b74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f042 0220 	orr.w	r2, r2, #32
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f002 021f 	and.w	r2, r2, #31
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d182      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0xf78>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	497f      	ldr	r1, [pc, #508]	; (8001dbc <HAL_RCC_OscConfig+0xf78>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001be6:	601a      	str	r2, [r3, #0]
  return result;
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bf0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	2301      	movs	r3, #1
 8001c06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe fdd2 	bl	80007b0 <HAL_GetTick>
 8001c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c10:	e009      	b.n	8001c26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7fe fdcd 	bl	80007b0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e144      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c4a:	601a      	str	r2, [r3, #0]
  return result;
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_OscConfig+0xe2c>
 8001c6a:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <HAL_RCC_OscConfig+0xf78>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e027      	b.n	8001cc0 <HAL_RCC_OscConfig+0xe7c>
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <HAL_RCC_OscConfig+0xf78>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ccc:	6011      	str	r1, [r2, #0]
 8001cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	fa92 f1a2 	rbit	r1, r2
 8001cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ce4:	6011      	str	r1, [r2, #0]
  return result;
 8001ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	fab2 f282 	clz	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f042 0220 	orr.w	r2, r2, #32
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f002 021f 	and.w	r2, r2, #31
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d082      	beq.n	8001c12 <HAL_RCC_OscConfig+0xdce>
 8001d0c:	e0cf      	b.n	8001eae <HAL_RCC_OscConfig+0x106a>
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fa93 f2a3 	rbit	r2, r3
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d32:	601a      	str	r2, [r3, #0]
  return result;
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7fe fd2c 	bl	80007b0 <HAL_GetTick>
 8001d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	e009      	b.n	8001d72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe fd27 	bl	80007b0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e09e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d96:	601a      	str	r2, [r3, #0]
  return result;
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001da0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d104      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xf7c>
 8001db6:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <HAL_RCC_OscConfig+0xf78>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e029      	b.n	8001e10 <HAL_RCC_OscConfig+0xfcc>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f2a3 	rbit	r2, r3
 8001ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_OscConfig+0x1078>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e1c:	6011      	str	r1, [r2, #0]
 8001e1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	fa92 f1a2 	rbit	r1, r2
 8001e2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e34:	6011      	str	r1, [r2, #0]
  return result;
 8001e36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d180      	bne.n	8001d5e <HAL_RCC_OscConfig+0xf1a>
 8001e5c:	e027      	b.n	8001eae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e01e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_OscConfig+0x1078>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d10b      	bne.n	8001eaa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09e      	sub	sp, #120	; 0x78
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e162      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b90      	ldr	r3, [pc, #576]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	498b      	ldr	r1, [pc, #556]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b89      	ldr	r3, [pc, #548]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e14a      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b82      	ldr	r3, [pc, #520]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	497f      	ldr	r1, [pc, #508]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80dc 	beq.w	80020ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d13c      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xf6>
 8001f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xa6>
 8001f60:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e00f      	b.n	8001f86 <HAL_RCC_ClockConfig+0xc6>
 8001f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	667b      	str	r3, [r7, #100]	; 0x64
 8001f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f78:	663b      	str	r3, [r7, #96]	; 0x60
 8001f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f96:	fab2 f282 	clz	r2, r2
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f002 021f 	and.w	r2, r2, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d17b      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0f3      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d13c      	bne.n	8002038 <HAL_RCC_ClockConfig+0x178>
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x128>
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_ClockConfig+0x148>
 8001fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8001ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200c:	63ba      	str	r2, [r7, #56]	; 0x38
 800200e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002010:	fa92 f2a2 	rbit	r2, r2
 8002014:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d13a      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b2      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
 8002038:	2302      	movs	r3, #2
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e00d      	b.n	800207c <HAL_RCC_ClockConfig+0x1bc>
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	61ba      	str	r2, [r7, #24]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	617a      	str	r2, [r7, #20]
  return result;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 021f 	and.w	r2, r2, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e079      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	491a      	ldr	r1, [pc, #104]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7fe fb78 	bl	80007b0 <HAL_GetTick>
 80020c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe fb74 	bl	80007b0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e061      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d214      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4906      	ldr	r1, [pc, #24]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e040      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	491a      	ldr	r1, [pc, #104]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4912      	ldr	r1, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002162:	f000 f829 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002166:	4601      	mov	r1, r0
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002170:	22f0      	movs	r2, #240	; 0xf0
 8002172:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	fa92 f2a2 	rbit	r2, r2
 800217a:	60fa      	str	r2, [r7, #12]
  return result;
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	40d3      	lsrs	r3, r2
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x2ec>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	fa21 f303 	lsr.w	r3, r1, r3
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fac6 	bl	8000728 <HAL_InitTick>
  
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3778      	adds	r7, #120	; 0x78
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	0800456c 	.word	0x0800456c
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b08b      	sub	sp, #44	; 0x2c
 80021bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x30>
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x36>
 80021e6:	e03c      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ea:	623b      	str	r3, [r7, #32]
      break;
 80021ec:	e03c      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	fa92 f2a2 	rbit	r2, r2
 8002200:	607a      	str	r2, [r7, #4]
  return result;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	40d3      	lsrs	r3, r2
 800220c:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_RCC_GetSysClockFreq+0xc8>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	220f      	movs	r2, #15
 800221c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	60fa      	str	r2, [r7, #12]
  return result;
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	40d3      	lsrs	r3, r2
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	fbb2 f2f3 	udiv	r2, r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
 8002250:	e004      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	623b      	str	r3, [r7, #32]
      break;
 8002260:	e002      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002264:	623b      	str	r3, [r7, #32]
      break;
 8002266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002268:	6a3b      	ldr	r3, [r7, #32]
}
 800226a:	4618      	mov	r0, r3
 800226c:	372c      	adds	r7, #44	; 0x2c
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	007a1200 	.word	0x007a1200
 8002280:	08004584 	.word	0x08004584
 8002284:	08004594 	.word	0x08004594
 8002288:	003d0900 	.word	0x003d0900

0800228c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022aa:	f7ff ffef 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022ae:	4601      	mov	r1, r0
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	603a      	str	r2, [r7, #0]
  return result;
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	40d3      	lsrs	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	0800457c 	.word	0x0800457c

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022ee:	f7ff ffcd 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022f2:	4601      	mov	r1, r0
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002300:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	fa92 f2a2 	rbit	r2, r2
 8002308:	603a      	str	r2, [r7, #0]
  return result;
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	fab2 f282 	clz	r2, r2
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	40d3      	lsrs	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	0800457c 	.word	0x0800457c

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b092      	sub	sp, #72	; 0x48
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80d4 	beq.w	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002350:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10e      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b4b      	ldr	r3, [pc, #300]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4a4a      	ldr	r2, [pc, #296]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	61d3      	str	r3, [r2, #28]
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b45      	ldr	r3, [pc, #276]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d118      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002386:	4b42      	ldr	r3, [pc, #264]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a41      	ldr	r2, [pc, #260]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7fe fa0d 	bl	80007b0 <HAL_GetTick>
 8002396:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	e008      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe fa09 	bl	80007b0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e169      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8084 	beq.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d07c      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d8:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	461a      	mov	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d04b      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe f9b9 	bl	80007b0 <HAL_GetTick>
 800243e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe f9b5 	bl	80007b0 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e113      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002458:	2302      	movs	r3, #2
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	2302      	movs	r3, #2
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	61fb      	str	r3, [r7, #28]
  return result;
 8002470:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d108      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002486:	4b01      	ldr	r3, [pc, #4]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	e00d      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	10908100 	.word	0x10908100
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	4b78      	ldr	r3, [pc, #480]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2202      	movs	r2, #2
 80024aa:	613a      	str	r2, [r7, #16]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	60fa      	str	r2, [r7, #12]
  return result;
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0b7      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024d2:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	496a      	ldr	r1, [pc, #424]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002504:	4b60      	ldr	r3, [pc, #384]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f023 0203 	bic.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	495d      	ldr	r1, [pc, #372]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002522:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4956      	ldr	r1, [pc, #344]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002540:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	494e      	ldr	r1, [pc, #312]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255e:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f023 0210 	bic.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4947      	ldr	r1, [pc, #284]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	493f      	ldr	r1, [pc, #252]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f023 0220 	bic.w	r2, r3, #32
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4938      	ldr	r1, [pc, #224]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	4930      	ldr	r1, [pc, #192]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	4929      	ldr	r1, [pc, #164]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	4921      	ldr	r1, [pc, #132]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	491a      	ldr	r1, [pc, #104]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	4912      	ldr	r1, [pc, #72]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800263e:	4313      	orrs	r3, r2
 8002640:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	490b      	ldr	r1, [pc, #44]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267a:	4313      	orrs	r3, r2
 800267c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3748      	adds	r7, #72	; 0x48
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e040      	b.n	8002720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd ff32 	bl	8000518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	; 0x24
 80026b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fbba 	bl	8002e44 <UART_SetConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e022      	b.n	8002720 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fd82 	bl	80031ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fe09 	bl	8003330 <UART_CheckIdleState>
 800271e:	4603      	mov	r3, r0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273c:	2b20      	cmp	r3, #32
 800273e:	d178      	bne.n	8002832 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_UART_Transmit+0x24>
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e071      	b.n	8002834 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275e:	f7fe f827 	bl	80007b0 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d108      	bne.n	8002790 <HAL_UART_Transmit+0x68>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e003      	b.n	8002798 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002798:	e030      	b.n	80027fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fe6b 	bl	8003480 <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e03c      	b.n	8002834 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027cc:	b292      	uxth	r2, r2
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	3302      	adds	r3, #2
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	e008      	b.n	80027ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b292      	uxth	r2, r2
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3301      	adds	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1c8      	bne.n	800279a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fe34 	bl	8003480 <UART_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e005      	b.n	8002834 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
  }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0ba      	sub	sp, #232	; 0xe8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002862:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002866:	f640 030f 	movw	r3, #2063	; 0x80f
 800286a:	4013      	ands	r3, r2
 800286c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d115      	bne.n	80028a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00f      	beq.n	80028a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 82ab 	beq.w	8002df0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
      }
      return;
 80028a2:	e2a5      	b.n	8002df0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8117 	beq.w	8002adc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028be:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_UART_IRQHandler+0x298>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 810a 	beq.w	8002adc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d011      	beq.n	80028f8 <HAL_UART_IRQHandler+0xbc>
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d011      	beq.n	8002928 <HAL_UART_IRQHandler+0xec>
 8002904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2202      	movs	r2, #2
 8002916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d011      	beq.n	8002958 <HAL_UART_IRQHandler+0x11c>
 8002934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294e:	f043 0202 	orr.w	r2, r3, #2
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d017      	beq.n	8002994 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002974:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2208      	movs	r2, #8
 8002982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298a:	f043 0208 	orr.w	r2, r3, #8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	2b00      	cmp	r3, #0
 800299e:	d012      	beq.n	80029c6 <HAL_UART_IRQHandler+0x18a>
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8211 	beq.w	8002df4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d005      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d04f      	beq.n	8002abe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fe4a 	bl	80036b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d141      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3308      	adds	r3, #8
 8002a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3308      	adds	r3, #8
 8002a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a6e:	e841 2300 	strex	r3, r2, [r1]
 8002a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1d9      	bne.n	8002a32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d013      	beq.n	8002aae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <HAL_UART_IRQHandler+0x29c>)
 8002a8c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f806 	bl	8000aa4 <HAL_DMA_Abort_IT>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d017      	beq.n	8002ace <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aac:	e00f      	b.n	8002ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9be 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	e00b      	b.n	8002ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f9ba 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	e007      	b.n	8002ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9b6 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002acc:	e192      	b.n	8002df4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ace:	bf00      	nop
    return;
 8002ad0:	e190      	b.n	8002df4 <HAL_UART_IRQHandler+0x5b8>
 8002ad2:	bf00      	nop
 8002ad4:	04000120 	.word	0x04000120
 8002ad8:	08003781 	.word	0x08003781

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 814b 	bne.w	8002d7c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8144 	beq.w	8002d7c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 813d 	beq.w	8002d7c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2210      	movs	r2, #16
 8002b08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	f040 80b5 	bne.w	8002c84 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8164 	beq.w	8002df8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	f080 815c 	bcs.w	8002df8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	f000 8086 	beq.w	8002c62 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1da      	bne.n	8002b56 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002baa:	e853 3f00 	ldrex	r3, [r3]
 8002bae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e1      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3308      	adds	r3, #8
 8002be2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e3      	bne.n	8002bdc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c32:	f023 0310 	bic.w	r3, r3, #16
 8002c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e4      	bne.n	8002c22 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fee8 	bl	8000a32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fd fb17 	bl	80002b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c82:	e0b9      	b.n	8002df8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80ab 	beq.w	8002dfc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002ca6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80a6 	beq.w	8002dfc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e4      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3308      	adds	r3, #8
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3308      	adds	r3, #8
 8002d06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	e853 3f00 	ldrex	r3, [r3]
 8002d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0310 	bic.w	r3, r3, #16
 8002d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	69b9      	ldr	r1, [r7, #24]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	617b      	str	r3, [r7, #20]
   return(result);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e4      	bne.n	8002d32 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fd fa9b 	bl	80002b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d7a:	e03f      	b.n	8002dfc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_UART_IRQHandler+0x56a>
 8002d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fed6 	bl	8003b50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002da4:	e02d      	b.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01c      	beq.n	8002e00 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
    }
    return;
 8002dce:	e017      	b.n	8002e00 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d012      	beq.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00c      	beq.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fcdf 	bl	80037ac <UART_EndTransmit_IT>
    return;
 8002dee:	e008      	b.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002df0:	bf00      	nop
 8002df2:	e006      	b.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002df4:	bf00      	nop
 8002df6:	e004      	b.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002df8:	bf00      	nop
 8002dfa:	e002      	b.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e00:	bf00      	nop
  }

}
 8002e02:	37e8      	adds	r7, #232	; 0xe8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e72:	f023 030c 	bic.w	r3, r3, #12
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4aa7      	ldr	r2, [pc, #668]	; (800315c <UART_SetConfig+0x318>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d120      	bne.n	8002f06 <UART_SetConfig+0xc2>
 8002ec4:	4ba6      	ldr	r3, [pc, #664]	; (8003160 <UART_SetConfig+0x31c>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d817      	bhi.n	8002f00 <UART_SetConfig+0xbc>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <UART_SetConfig+0x94>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002ef5 	.word	0x08002ef5
 8002ee0:	08002efb 	.word	0x08002efb
 8002ee4:	08002eef 	.word	0x08002eef
 8002ee8:	2301      	movs	r3, #1
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e0b5      	b.n	800305a <UART_SetConfig+0x216>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e0b2      	b.n	800305a <UART_SetConfig+0x216>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e0af      	b.n	800305a <UART_SetConfig+0x216>
 8002efa:	2308      	movs	r3, #8
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e0ac      	b.n	800305a <UART_SetConfig+0x216>
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e0a9      	b.n	800305a <UART_SetConfig+0x216>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a96      	ldr	r2, [pc, #600]	; (8003164 <UART_SetConfig+0x320>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d124      	bne.n	8002f5a <UART_SetConfig+0x116>
 8002f10:	4b93      	ldr	r3, [pc, #588]	; (8003160 <UART_SetConfig+0x31c>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f1c:	d011      	beq.n	8002f42 <UART_SetConfig+0xfe>
 8002f1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f22:	d817      	bhi.n	8002f54 <UART_SetConfig+0x110>
 8002f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f28:	d011      	beq.n	8002f4e <UART_SetConfig+0x10a>
 8002f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f2e:	d811      	bhi.n	8002f54 <UART_SetConfig+0x110>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <UART_SetConfig+0xf8>
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d006      	beq.n	8002f48 <UART_SetConfig+0x104>
 8002f3a:	e00b      	b.n	8002f54 <UART_SetConfig+0x110>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e08b      	b.n	800305a <UART_SetConfig+0x216>
 8002f42:	2302      	movs	r3, #2
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e088      	b.n	800305a <UART_SetConfig+0x216>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e085      	b.n	800305a <UART_SetConfig+0x216>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e082      	b.n	800305a <UART_SetConfig+0x216>
 8002f54:	2310      	movs	r3, #16
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e07f      	b.n	800305a <UART_SetConfig+0x216>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a82      	ldr	r2, [pc, #520]	; (8003168 <UART_SetConfig+0x324>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d124      	bne.n	8002fae <UART_SetConfig+0x16a>
 8002f64:	4b7e      	ldr	r3, [pc, #504]	; (8003160 <UART_SetConfig+0x31c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f70:	d011      	beq.n	8002f96 <UART_SetConfig+0x152>
 8002f72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f76:	d817      	bhi.n	8002fa8 <UART_SetConfig+0x164>
 8002f78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f7c:	d011      	beq.n	8002fa2 <UART_SetConfig+0x15e>
 8002f7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f82:	d811      	bhi.n	8002fa8 <UART_SetConfig+0x164>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <UART_SetConfig+0x14c>
 8002f88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f8c:	d006      	beq.n	8002f9c <UART_SetConfig+0x158>
 8002f8e:	e00b      	b.n	8002fa8 <UART_SetConfig+0x164>
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e061      	b.n	800305a <UART_SetConfig+0x216>
 8002f96:	2302      	movs	r3, #2
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e05e      	b.n	800305a <UART_SetConfig+0x216>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e05b      	b.n	800305a <UART_SetConfig+0x216>
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e058      	b.n	800305a <UART_SetConfig+0x216>
 8002fa8:	2310      	movs	r3, #16
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e055      	b.n	800305a <UART_SetConfig+0x216>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	; (800316c <UART_SetConfig+0x328>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d124      	bne.n	8003002 <UART_SetConfig+0x1be>
 8002fb8:	4b69      	ldr	r3, [pc, #420]	; (8003160 <UART_SetConfig+0x31c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fc4:	d011      	beq.n	8002fea <UART_SetConfig+0x1a6>
 8002fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fca:	d817      	bhi.n	8002ffc <UART_SetConfig+0x1b8>
 8002fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fd0:	d011      	beq.n	8002ff6 <UART_SetConfig+0x1b2>
 8002fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fd6:	d811      	bhi.n	8002ffc <UART_SetConfig+0x1b8>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <UART_SetConfig+0x1a0>
 8002fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe0:	d006      	beq.n	8002ff0 <UART_SetConfig+0x1ac>
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x1b8>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e037      	b.n	800305a <UART_SetConfig+0x216>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e034      	b.n	800305a <UART_SetConfig+0x216>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e031      	b.n	800305a <UART_SetConfig+0x216>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e02e      	b.n	800305a <UART_SetConfig+0x216>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e02b      	b.n	800305a <UART_SetConfig+0x216>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5a      	ldr	r2, [pc, #360]	; (8003170 <UART_SetConfig+0x32c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d124      	bne.n	8003056 <UART_SetConfig+0x212>
 800300c:	4b54      	ldr	r3, [pc, #336]	; (8003160 <UART_SetConfig+0x31c>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003014:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003018:	d011      	beq.n	800303e <UART_SetConfig+0x1fa>
 800301a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800301e:	d817      	bhi.n	8003050 <UART_SetConfig+0x20c>
 8003020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003024:	d011      	beq.n	800304a <UART_SetConfig+0x206>
 8003026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800302a:	d811      	bhi.n	8003050 <UART_SetConfig+0x20c>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <UART_SetConfig+0x1f4>
 8003030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003034:	d006      	beq.n	8003044 <UART_SetConfig+0x200>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x20c>
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e00d      	b.n	800305a <UART_SetConfig+0x216>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e00a      	b.n	800305a <UART_SetConfig+0x216>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e007      	b.n	800305a <UART_SetConfig+0x216>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e004      	b.n	800305a <UART_SetConfig+0x216>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e001      	b.n	800305a <UART_SetConfig+0x216>
 8003056:	2310      	movs	r3, #16
 8003058:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003062:	d15b      	bne.n	800311c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	2b08      	cmp	r3, #8
 8003068:	d827      	bhi.n	80030ba <UART_SetConfig+0x276>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <UART_SetConfig+0x22c>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003095 	.word	0x08003095
 8003074:	0800309d 	.word	0x0800309d
 8003078:	080030a5 	.word	0x080030a5
 800307c:	080030bb 	.word	0x080030bb
 8003080:	080030ab 	.word	0x080030ab
 8003084:	080030bb 	.word	0x080030bb
 8003088:	080030bb 	.word	0x080030bb
 800308c:	080030bb 	.word	0x080030bb
 8003090:	080030b3 	.word	0x080030b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003094:	f7ff f906 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8003098:	61b8      	str	r0, [r7, #24]
        break;
 800309a:	e013      	b.n	80030c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800309c:	f7ff f924 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 80030a0:	61b8      	str	r0, [r7, #24]
        break;
 80030a2:	e00f      	b.n	80030c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <UART_SetConfig+0x330>)
 80030a6:	61bb      	str	r3, [r7, #24]
        break;
 80030a8:	e00c      	b.n	80030c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030aa:	f7ff f885 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 80030ae:	61b8      	str	r0, [r7, #24]
        break;
 80030b0:	e008      	b.n	80030c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b6:	61bb      	str	r3, [r7, #24]
        break;
 80030b8:	e004      	b.n	80030c4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	77bb      	strb	r3, [r7, #30]
        break;
 80030c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8082 	beq.w	80031d0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	005a      	lsls	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	441a      	add	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b0f      	cmp	r3, #15
 80030e6:	d916      	bls.n	8003116 <UART_SetConfig+0x2d2>
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ee:	d212      	bcs.n	8003116 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f023 030f 	bic.w	r3, r3, #15
 80030f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	b29a      	uxth	r2, r3
 8003106:	89fb      	ldrh	r3, [r7, #14]
 8003108:	4313      	orrs	r3, r2
 800310a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	89fa      	ldrh	r2, [r7, #14]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	e05c      	b.n	80031d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	77bb      	strb	r3, [r7, #30]
 800311a:	e059      	b.n	80031d0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800311c:	7ffb      	ldrb	r3, [r7, #31]
 800311e:	2b08      	cmp	r3, #8
 8003120:	d835      	bhi.n	800318e <UART_SetConfig+0x34a>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <UART_SetConfig+0x2e4>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800314d 	.word	0x0800314d
 800312c:	08003155 	.word	0x08003155
 8003130:	08003179 	.word	0x08003179
 8003134:	0800318f 	.word	0x0800318f
 8003138:	0800317f 	.word	0x0800317f
 800313c:	0800318f 	.word	0x0800318f
 8003140:	0800318f 	.word	0x0800318f
 8003144:	0800318f 	.word	0x0800318f
 8003148:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7ff f8aa 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8003150:	61b8      	str	r0, [r7, #24]
        break;
 8003152:	e021      	b.n	8003198 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003154:	f7ff f8c8 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8003158:	61b8      	str	r0, [r7, #24]
        break;
 800315a:	e01d      	b.n	8003198 <UART_SetConfig+0x354>
 800315c:	40013800 	.word	0x40013800
 8003160:	40021000 	.word	0x40021000
 8003164:	40004400 	.word	0x40004400
 8003168:	40004800 	.word	0x40004800
 800316c:	40004c00 	.word	0x40004c00
 8003170:	40005000 	.word	0x40005000
 8003174:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <UART_SetConfig+0x3a4>)
 800317a:	61bb      	str	r3, [r7, #24]
        break;
 800317c:	e00c      	b.n	8003198 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7ff f81b 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003182:	61b8      	str	r0, [r7, #24]
        break;
 8003184:	e008      	b.n	8003198 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e004      	b.n	8003198 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	77bb      	strb	r3, [r7, #30]
        break;
 8003196:	bf00      	nop
    }

    if (pclk != 0U)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	085a      	lsrs	r2, r3, #1
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	441a      	add	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d909      	bls.n	80031cc <UART_SetConfig+0x388>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031be:	d205      	bcs.n	80031cc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	e001      	b.n	80031d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	007a1200 	.word	0x007a1200

080031ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01a      	beq.n	8003302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ea:	d10a      	bne.n	8003302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  }
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b098      	sub	sp, #96	; 0x60
 8003334:	af02      	add	r7, sp, #8
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003340:	f7fd fa36 	bl	80007b0 <HAL_GetTick>
 8003344:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b08      	cmp	r3, #8
 8003352:	d12e      	bne.n	80033b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335c:	2200      	movs	r2, #0
 800335e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f88c 	bl	8003480 <UART_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d021      	beq.n	80033b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003382:	653b      	str	r3, [r7, #80]	; 0x50
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e6      	bne.n	800336e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e062      	b.n	8003478 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d149      	bne.n	8003454 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f856 	bl	8003480 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03c      	beq.n	8003454 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	623b      	str	r3, [r7, #32]
   return(result);
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
 80033fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e6      	bne.n	80033da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3308      	adds	r3, #8
 8003412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	e853 3f00 	ldrex	r3, [r3]
 800341a:	60fb      	str	r3, [r7, #12]
   return(result);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3308      	adds	r3, #8
 800342a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800342c:	61fa      	str	r2, [r7, #28]
 800342e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003430:	69b9      	ldr	r1, [r7, #24]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	e841 2300 	strex	r3, r2, [r1]
 8003438:	617b      	str	r3, [r7, #20]
   return(result);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e5      	bne.n	800340c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e011      	b.n	8003478 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3758      	adds	r7, #88	; 0x58
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003490:	e049      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d045      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fd f989 	bl	80007b0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e048      	b.n	8003546 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d031      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d110      	bne.n	80034f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2208      	movs	r2, #8
 80034d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f8ed 	bl	80036b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2208      	movs	r2, #8
 80034e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e029      	b.n	8003546 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003500:	d111      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f8d3 	bl	80036b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e00f      	b.n	8003546 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	429a      	cmp	r2, r3
 8003542:	d0a6      	beq.n	8003492 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003550:	b480      	push	{r7}
 8003552:	b097      	sub	sp, #92	; 0x5c
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d10e      	bne.n	80035a2 <UART_Start_Receive_IT+0x52>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <UART_Start_Receive_IT+0x48>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003596:	e01a      	b.n	80035ce <UART_Start_Receive_IT+0x7e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a0:	e015      	b.n	80035ce <UART_Start_Receive_IT+0x7e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <UART_Start_Receive_IT+0x76>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <UART_Start_Receive_IT+0x6c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ba:	e008      	b.n	80035ce <UART_Start_Receive_IT+0x7e>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	227f      	movs	r2, #127	; 0x7f
 80035c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c4:	e003      	b.n	80035ce <UART_Start_Receive_IT+0x7e>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2222      	movs	r2, #34	; 0x22
 80035da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3308      	adds	r3, #8
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	657b      	str	r3, [r7, #84]	; 0x54
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3308      	adds	r3, #8
 80035fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800360c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	d107      	bne.n	800362c <UART_Start_Receive_IT+0xdc>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <UART_Start_Receive_IT+0x160>)
 8003628:	669a      	str	r2, [r3, #104]	; 0x68
 800362a:	e002      	b.n	8003632 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <UART_Start_Receive_IT+0x164>)
 8003630:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d019      	beq.n	800366e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
 800365a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800365e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e6      	bne.n	800363a <UART_Start_Receive_IT+0xea>
 800366c:	e018      	b.n	80036a0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	613b      	str	r3, [r7, #16]
   return(result);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f043 0320 	orr.w	r3, r3, #32
 8003682:	653b      	str	r3, [r7, #80]	; 0x50
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	61bb      	str	r3, [r7, #24]
   return(result);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e6      	bne.n	800366e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	375c      	adds	r7, #92	; 0x5c
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	080039a9 	.word	0x080039a9
 80036b4:	08003801 	.word	0x08003801

080036b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b095      	sub	sp, #84	; 0x54
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036de:	643b      	str	r3, [r7, #64]	; 0x40
 80036e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e6      	bne.n	80036c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3308      	adds	r3, #8
 80036f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	61fb      	str	r3, [r7, #28]
   return(result);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	64bb      	str	r3, [r7, #72]	; 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3308      	adds	r3, #8
 8003710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	2b01      	cmp	r3, #1
 800372c:	d118      	bne.n	8003760 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	60bb      	str	r3, [r7, #8]
   return(result);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f023 0310 	bic.w	r3, r3, #16
 8003742:	647b      	str	r3, [r7, #68]	; 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	6979      	ldr	r1, [r7, #20]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	613b      	str	r3, [r7, #16]
   return(result);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e6      	bne.n	800372e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003774:	bf00      	nop
 8003776:	3754      	adds	r7, #84	; 0x54
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fb46 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6979      	ldr	r1, [r7, #20]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	613b      	str	r3, [r7, #16]
   return(result);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e6      	bne.n	80037b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fb08 	bl	8002e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f8:	bf00      	nop
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b09c      	sub	sp, #112	; 0x70
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800380e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003818:	2b22      	cmp	r3, #34	; 0x22
 800381a:	f040 80b9 	bne.w	8003990 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003824:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003828:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800382c:	b2d9      	uxtb	r1, r3
 800382e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003832:	b2da      	uxtb	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	400a      	ands	r2, r1
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 809c 	bne.w	80039a0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800387c:	66bb      	str	r3, [r7, #104]	; 0x68
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003886:	65bb      	str	r3, [r7, #88]	; 0x58
 8003888:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800388c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e6      	bne.n	8003868 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3308      	adds	r3, #8
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	667b      	str	r3, [r7, #100]	; 0x64
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3308      	adds	r3, #8
 80038b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038ba:	647a      	str	r2, [r7, #68]	; 0x44
 80038bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e5      	bne.n	800389a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d018      	beq.n	8003922 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	623b      	str	r3, [r7, #32]
   return(result);
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003904:	663b      	str	r3, [r7, #96]	; 0x60
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
 8003910:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e6      	bne.n	80038f0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	2b01      	cmp	r3, #1
 8003928:	d12e      	bne.n	8003988 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	60fb      	str	r3, [r7, #12]
   return(result);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f023 0310 	bic.w	r3, r3, #16
 8003944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	617b      	str	r3, [r7, #20]
   return(result);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e6      	bne.n	8003930 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b10      	cmp	r3, #16
 800396e:	d103      	bne.n	8003978 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fc fc95 	bl	80002b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003986:	e00b      	b.n	80039a0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fa47 	bl	8002e1c <HAL_UART_RxCpltCallback>
}
 800398e:	e007      	b.n	80039a0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0208 	orr.w	r2, r2, #8
 800399e:	619a      	str	r2, [r3, #24]
}
 80039a0:	bf00      	nop
 80039a2:	3770      	adds	r7, #112	; 0x70
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b09c      	sub	sp, #112	; 0x70
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c0:	2b22      	cmp	r3, #34	; 0x22
 80039c2:	f040 80b9 	bne.w	8003b38 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80039d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80039da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80039de:	4013      	ands	r3, r2
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 809c 	bne.w	8003b48 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a24:	667b      	str	r3, [r7, #100]	; 0x64
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a30:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e6      	bne.n	8003a10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	663b      	str	r3, [r7, #96]	; 0x60
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a62:	643a      	str	r2, [r7, #64]	; 0x40
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e5      	bne.n	8003a42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e6      	bne.n	8003a98 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d12e      	bne.n	8003b30 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f023 0310 	bic.w	r3, r3, #16
 8003aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6979      	ldr	r1, [r7, #20]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	613b      	str	r3, [r7, #16]
   return(result);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e6      	bne.n	8003ad8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d103      	bne.n	8003b20 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fc fbc1 	bl	80002b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b2e:	e00b      	b.n	8003b48 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff f973 	bl	8002e1c <HAL_UART_RxCpltCallback>
}
 8003b36:	e007      	b.n	8003b48 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0208 	orr.w	r2, r2, #8
 8003b46:	619a      	str	r2, [r3, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	3770      	adds	r7, #112	; 0x70
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d142      	bne.n	8003c02 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e03b      	b.n	8003c04 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff fcd6 	bl	8003550 <UART_Start_Receive_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d124      	bne.n	8003bfc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d11d      	bne.n	8003bf6 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f043 0310 	orr.w	r3, r3, #16
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6a39      	ldr	r1, [r7, #32]
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e6      	bne.n	8003bc2 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8003bf4:	e002      	b.n	8003bfc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c00:	e000      	b.n	8003c04 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3730      	adds	r7, #48	; 0x30
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <__errno>:
 8003c0c:	4b01      	ldr	r3, [pc, #4]	; (8003c14 <__errno+0x8>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <__libc_init_array>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4d0d      	ldr	r5, [pc, #52]	; (8003c50 <__libc_init_array+0x38>)
 8003c1c:	4c0d      	ldr	r4, [pc, #52]	; (8003c54 <__libc_init_array+0x3c>)
 8003c1e:	1b64      	subs	r4, r4, r5
 8003c20:	10a4      	asrs	r4, r4, #2
 8003c22:	2600      	movs	r6, #0
 8003c24:	42a6      	cmp	r6, r4
 8003c26:	d109      	bne.n	8003c3c <__libc_init_array+0x24>
 8003c28:	4d0b      	ldr	r5, [pc, #44]	; (8003c58 <__libc_init_array+0x40>)
 8003c2a:	4c0c      	ldr	r4, [pc, #48]	; (8003c5c <__libc_init_array+0x44>)
 8003c2c:	f000 fc8e 	bl	800454c <_init>
 8003c30:	1b64      	subs	r4, r4, r5
 8003c32:	10a4      	asrs	r4, r4, #2
 8003c34:	2600      	movs	r6, #0
 8003c36:	42a6      	cmp	r6, r4
 8003c38:	d105      	bne.n	8003c46 <__libc_init_array+0x2e>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c40:	4798      	blx	r3
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7ee      	b.n	8003c24 <__libc_init_array+0xc>
 8003c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4a:	4798      	blx	r3
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	e7f2      	b.n	8003c36 <__libc_init_array+0x1e>
 8003c50:	080045d8 	.word	0x080045d8
 8003c54:	080045d8 	.word	0x080045d8
 8003c58:	080045d8 	.word	0x080045d8
 8003c5c:	080045dc 	.word	0x080045dc

08003c60 <memset>:
 8003c60:	4402      	add	r2, r0
 8003c62:	4603      	mov	r3, r0
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d100      	bne.n	8003c6a <memset+0xa>
 8003c68:	4770      	bx	lr
 8003c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6e:	e7f9      	b.n	8003c64 <memset+0x4>

08003c70 <siprintf>:
 8003c70:	b40e      	push	{r1, r2, r3}
 8003c72:	b500      	push	{lr}
 8003c74:	b09c      	sub	sp, #112	; 0x70
 8003c76:	ab1d      	add	r3, sp, #116	; 0x74
 8003c78:	9002      	str	r0, [sp, #8]
 8003c7a:	9006      	str	r0, [sp, #24]
 8003c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c80:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <siprintf+0x38>)
 8003c82:	9107      	str	r1, [sp, #28]
 8003c84:	9104      	str	r1, [sp, #16]
 8003c86:	4909      	ldr	r1, [pc, #36]	; (8003cac <siprintf+0x3c>)
 8003c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c8c:	9105      	str	r1, [sp, #20]
 8003c8e:	6800      	ldr	r0, [r0, #0]
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	a902      	add	r1, sp, #8
 8003c94:	f000 f868 	bl	8003d68 <_svfiprintf_r>
 8003c98:	9b02      	ldr	r3, [sp, #8]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	b01c      	add	sp, #112	; 0x70
 8003ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca4:	b003      	add	sp, #12
 8003ca6:	4770      	bx	lr
 8003ca8:	2000000c 	.word	0x2000000c
 8003cac:	ffff0208 	.word	0xffff0208

08003cb0 <__ssputs_r>:
 8003cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	688e      	ldr	r6, [r1, #8]
 8003cb6:	429e      	cmp	r6, r3
 8003cb8:	4682      	mov	sl, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	4690      	mov	r8, r2
 8003cbe:	461f      	mov	r7, r3
 8003cc0:	d838      	bhi.n	8003d34 <__ssputs_r+0x84>
 8003cc2:	898a      	ldrh	r2, [r1, #12]
 8003cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cc8:	d032      	beq.n	8003d30 <__ssputs_r+0x80>
 8003cca:	6825      	ldr	r5, [r4, #0]
 8003ccc:	6909      	ldr	r1, [r1, #16]
 8003cce:	eba5 0901 	sub.w	r9, r5, r1
 8003cd2:	6965      	ldr	r5, [r4, #20]
 8003cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cdc:	3301      	adds	r3, #1
 8003cde:	444b      	add	r3, r9
 8003ce0:	106d      	asrs	r5, r5, #1
 8003ce2:	429d      	cmp	r5, r3
 8003ce4:	bf38      	it	cc
 8003ce6:	461d      	movcc	r5, r3
 8003ce8:	0553      	lsls	r3, r2, #21
 8003cea:	d531      	bpl.n	8003d50 <__ssputs_r+0xa0>
 8003cec:	4629      	mov	r1, r5
 8003cee:	f000 fb63 	bl	80043b8 <_malloc_r>
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	b950      	cbnz	r0, 8003d0c <__ssputs_r+0x5c>
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	f8ca 3000 	str.w	r3, [sl]
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0c:	6921      	ldr	r1, [r4, #16]
 8003d0e:	464a      	mov	r2, r9
 8003d10:	f000 fabe 	bl	8004290 <memcpy>
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	6126      	str	r6, [r4, #16]
 8003d22:	6165      	str	r5, [r4, #20]
 8003d24:	444e      	add	r6, r9
 8003d26:	eba5 0509 	sub.w	r5, r5, r9
 8003d2a:	6026      	str	r6, [r4, #0]
 8003d2c:	60a5      	str	r5, [r4, #8]
 8003d2e:	463e      	mov	r6, r7
 8003d30:	42be      	cmp	r6, r7
 8003d32:	d900      	bls.n	8003d36 <__ssputs_r+0x86>
 8003d34:	463e      	mov	r6, r7
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	4632      	mov	r2, r6
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	f000 fab6 	bl	80042ac <memmove>
 8003d40:	68a3      	ldr	r3, [r4, #8]
 8003d42:	1b9b      	subs	r3, r3, r6
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	4433      	add	r3, r6
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e7db      	b.n	8003d08 <__ssputs_r+0x58>
 8003d50:	462a      	mov	r2, r5
 8003d52:	f000 fba5 	bl	80044a0 <_realloc_r>
 8003d56:	4606      	mov	r6, r0
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d1e1      	bne.n	8003d20 <__ssputs_r+0x70>
 8003d5c:	6921      	ldr	r1, [r4, #16]
 8003d5e:	4650      	mov	r0, sl
 8003d60:	f000 fabe 	bl	80042e0 <_free_r>
 8003d64:	e7c7      	b.n	8003cf6 <__ssputs_r+0x46>
	...

08003d68 <_svfiprintf_r>:
 8003d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6c:	4698      	mov	r8, r3
 8003d6e:	898b      	ldrh	r3, [r1, #12]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	b09d      	sub	sp, #116	; 0x74
 8003d74:	4607      	mov	r7, r0
 8003d76:	460d      	mov	r5, r1
 8003d78:	4614      	mov	r4, r2
 8003d7a:	d50e      	bpl.n	8003d9a <_svfiprintf_r+0x32>
 8003d7c:	690b      	ldr	r3, [r1, #16]
 8003d7e:	b963      	cbnz	r3, 8003d9a <_svfiprintf_r+0x32>
 8003d80:	2140      	movs	r1, #64	; 0x40
 8003d82:	f000 fb19 	bl	80043b8 <_malloc_r>
 8003d86:	6028      	str	r0, [r5, #0]
 8003d88:	6128      	str	r0, [r5, #16]
 8003d8a:	b920      	cbnz	r0, 8003d96 <_svfiprintf_r+0x2e>
 8003d8c:	230c      	movs	r3, #12
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	e0d1      	b.n	8003f3a <_svfiprintf_r+0x1d2>
 8003d96:	2340      	movs	r3, #64	; 0x40
 8003d98:	616b      	str	r3, [r5, #20]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9e:	2320      	movs	r3, #32
 8003da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da8:	2330      	movs	r3, #48	; 0x30
 8003daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f54 <_svfiprintf_r+0x1ec>
 8003dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db2:	f04f 0901 	mov.w	r9, #1
 8003db6:	4623      	mov	r3, r4
 8003db8:	469a      	mov	sl, r3
 8003dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dbe:	b10a      	cbz	r2, 8003dc4 <_svfiprintf_r+0x5c>
 8003dc0:	2a25      	cmp	r2, #37	; 0x25
 8003dc2:	d1f9      	bne.n	8003db8 <_svfiprintf_r+0x50>
 8003dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc8:	d00b      	beq.n	8003de2 <_svfiprintf_r+0x7a>
 8003dca:	465b      	mov	r3, fp
 8003dcc:	4622      	mov	r2, r4
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f7ff ff6d 	bl	8003cb0 <__ssputs_r>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	f000 80aa 	beq.w	8003f30 <_svfiprintf_r+0x1c8>
 8003ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dde:	445a      	add	r2, fp
 8003de0:	9209      	str	r2, [sp, #36]	; 0x24
 8003de2:	f89a 3000 	ldrb.w	r3, [sl]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a2 	beq.w	8003f30 <_svfiprintf_r+0x1c8>
 8003dec:	2300      	movs	r3, #0
 8003dee:	f04f 32ff 	mov.w	r2, #4294967295
 8003df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003df6:	f10a 0a01 	add.w	sl, sl, #1
 8003dfa:	9304      	str	r3, [sp, #16]
 8003dfc:	9307      	str	r3, [sp, #28]
 8003dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e02:	931a      	str	r3, [sp, #104]	; 0x68
 8003e04:	4654      	mov	r4, sl
 8003e06:	2205      	movs	r2, #5
 8003e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e0c:	4851      	ldr	r0, [pc, #324]	; (8003f54 <_svfiprintf_r+0x1ec>)
 8003e0e:	f7fc f9df 	bl	80001d0 <memchr>
 8003e12:	9a04      	ldr	r2, [sp, #16]
 8003e14:	b9d8      	cbnz	r0, 8003e4e <_svfiprintf_r+0xe6>
 8003e16:	06d0      	lsls	r0, r2, #27
 8003e18:	bf44      	itt	mi
 8003e1a:	2320      	movmi	r3, #32
 8003e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e20:	0711      	lsls	r1, r2, #28
 8003e22:	bf44      	itt	mi
 8003e24:	232b      	movmi	r3, #43	; 0x2b
 8003e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	d015      	beq.n	8003e5e <_svfiprintf_r+0xf6>
 8003e32:	9a07      	ldr	r2, [sp, #28]
 8003e34:	4654      	mov	r4, sl
 8003e36:	2000      	movs	r0, #0
 8003e38:	f04f 0c0a 	mov.w	ip, #10
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e42:	3b30      	subs	r3, #48	; 0x30
 8003e44:	2b09      	cmp	r3, #9
 8003e46:	d94e      	bls.n	8003ee6 <_svfiprintf_r+0x17e>
 8003e48:	b1b0      	cbz	r0, 8003e78 <_svfiprintf_r+0x110>
 8003e4a:	9207      	str	r2, [sp, #28]
 8003e4c:	e014      	b.n	8003e78 <_svfiprintf_r+0x110>
 8003e4e:	eba0 0308 	sub.w	r3, r0, r8
 8003e52:	fa09 f303 	lsl.w	r3, r9, r3
 8003e56:	4313      	orrs	r3, r2
 8003e58:	9304      	str	r3, [sp, #16]
 8003e5a:	46a2      	mov	sl, r4
 8003e5c:	e7d2      	b.n	8003e04 <_svfiprintf_r+0x9c>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	1d19      	adds	r1, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	9103      	str	r1, [sp, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfbb      	ittet	lt
 8003e6a:	425b      	neglt	r3, r3
 8003e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e70:	9307      	strge	r3, [sp, #28]
 8003e72:	9307      	strlt	r3, [sp, #28]
 8003e74:	bfb8      	it	lt
 8003e76:	9204      	strlt	r2, [sp, #16]
 8003e78:	7823      	ldrb	r3, [r4, #0]
 8003e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e7c:	d10c      	bne.n	8003e98 <_svfiprintf_r+0x130>
 8003e7e:	7863      	ldrb	r3, [r4, #1]
 8003e80:	2b2a      	cmp	r3, #42	; 0x2a
 8003e82:	d135      	bne.n	8003ef0 <_svfiprintf_r+0x188>
 8003e84:	9b03      	ldr	r3, [sp, #12]
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	9203      	str	r2, [sp, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bfb8      	it	lt
 8003e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e94:	3402      	adds	r4, #2
 8003e96:	9305      	str	r3, [sp, #20]
 8003e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f64 <_svfiprintf_r+0x1fc>
 8003e9c:	7821      	ldrb	r1, [r4, #0]
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	4650      	mov	r0, sl
 8003ea2:	f7fc f995 	bl	80001d0 <memchr>
 8003ea6:	b140      	cbz	r0, 8003eba <_svfiprintf_r+0x152>
 8003ea8:	2340      	movs	r3, #64	; 0x40
 8003eaa:	eba0 000a 	sub.w	r0, r0, sl
 8003eae:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb2:	9b04      	ldr	r3, [sp, #16]
 8003eb4:	4303      	orrs	r3, r0
 8003eb6:	3401      	adds	r4, #1
 8003eb8:	9304      	str	r3, [sp, #16]
 8003eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ebe:	4826      	ldr	r0, [pc, #152]	; (8003f58 <_svfiprintf_r+0x1f0>)
 8003ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ec4:	2206      	movs	r2, #6
 8003ec6:	f7fc f983 	bl	80001d0 <memchr>
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d038      	beq.n	8003f40 <_svfiprintf_r+0x1d8>
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <_svfiprintf_r+0x1f4>)
 8003ed0:	bb1b      	cbnz	r3, 8003f1a <_svfiprintf_r+0x1b2>
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	3307      	adds	r3, #7
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	3308      	adds	r3, #8
 8003edc:	9303      	str	r3, [sp, #12]
 8003ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee0:	4433      	add	r3, r6
 8003ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee4:	e767      	b.n	8003db6 <_svfiprintf_r+0x4e>
 8003ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eea:	460c      	mov	r4, r1
 8003eec:	2001      	movs	r0, #1
 8003eee:	e7a5      	b.n	8003e3c <_svfiprintf_r+0xd4>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	3401      	adds	r4, #1
 8003ef4:	9305      	str	r3, [sp, #20]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f04f 0c0a 	mov.w	ip, #10
 8003efc:	4620      	mov	r0, r4
 8003efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f02:	3a30      	subs	r2, #48	; 0x30
 8003f04:	2a09      	cmp	r2, #9
 8003f06:	d903      	bls.n	8003f10 <_svfiprintf_r+0x1a8>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0c5      	beq.n	8003e98 <_svfiprintf_r+0x130>
 8003f0c:	9105      	str	r1, [sp, #20]
 8003f0e:	e7c3      	b.n	8003e98 <_svfiprintf_r+0x130>
 8003f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f14:	4604      	mov	r4, r0
 8003f16:	2301      	movs	r3, #1
 8003f18:	e7f0      	b.n	8003efc <_svfiprintf_r+0x194>
 8003f1a:	ab03      	add	r3, sp, #12
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	462a      	mov	r2, r5
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <_svfiprintf_r+0x1f8>)
 8003f22:	a904      	add	r1, sp, #16
 8003f24:	4638      	mov	r0, r7
 8003f26:	f3af 8000 	nop.w
 8003f2a:	1c42      	adds	r2, r0, #1
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	d1d6      	bne.n	8003ede <_svfiprintf_r+0x176>
 8003f30:	89ab      	ldrh	r3, [r5, #12]
 8003f32:	065b      	lsls	r3, r3, #25
 8003f34:	f53f af2c 	bmi.w	8003d90 <_svfiprintf_r+0x28>
 8003f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f3a:	b01d      	add	sp, #116	; 0x74
 8003f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f40:	ab03      	add	r3, sp, #12
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	462a      	mov	r2, r5
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <_svfiprintf_r+0x1f8>)
 8003f48:	a904      	add	r1, sp, #16
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f000 f87a 	bl	8004044 <_printf_i>
 8003f50:	e7eb      	b.n	8003f2a <_svfiprintf_r+0x1c2>
 8003f52:	bf00      	nop
 8003f54:	080045a4 	.word	0x080045a4
 8003f58:	080045ae 	.word	0x080045ae
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	08003cb1 	.word	0x08003cb1
 8003f64:	080045aa 	.word	0x080045aa

08003f68 <_printf_common>:
 8003f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	4699      	mov	r9, r3
 8003f70:	688a      	ldr	r2, [r1, #8]
 8003f72:	690b      	ldr	r3, [r1, #16]
 8003f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	bfb8      	it	lt
 8003f7c:	4613      	movlt	r3, r2
 8003f7e:	6033      	str	r3, [r6, #0]
 8003f80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f84:	4607      	mov	r7, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	b10a      	cbz	r2, 8003f8e <_printf_common+0x26>
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	0699      	lsls	r1, r3, #26
 8003f92:	bf42      	ittt	mi
 8003f94:	6833      	ldrmi	r3, [r6, #0]
 8003f96:	3302      	addmi	r3, #2
 8003f98:	6033      	strmi	r3, [r6, #0]
 8003f9a:	6825      	ldr	r5, [r4, #0]
 8003f9c:	f015 0506 	ands.w	r5, r5, #6
 8003fa0:	d106      	bne.n	8003fb0 <_printf_common+0x48>
 8003fa2:	f104 0a19 	add.w	sl, r4, #25
 8003fa6:	68e3      	ldr	r3, [r4, #12]
 8003fa8:	6832      	ldr	r2, [r6, #0]
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	42ab      	cmp	r3, r5
 8003fae:	dc26      	bgt.n	8003ffe <_printf_common+0x96>
 8003fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb4:	1e13      	subs	r3, r2, #0
 8003fb6:	6822      	ldr	r2, [r4, #0]
 8003fb8:	bf18      	it	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	0692      	lsls	r2, r2, #26
 8003fbe:	d42b      	bmi.n	8004018 <_printf_common+0xb0>
 8003fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d01e      	beq.n	800400c <_printf_common+0xa4>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	68e5      	ldr	r5, [r4, #12]
 8003fd2:	6832      	ldr	r2, [r6, #0]
 8003fd4:	f003 0306 	and.w	r3, r3, #6
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	bf08      	it	eq
 8003fdc:	1aad      	subeq	r5, r5, r2
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	6922      	ldr	r2, [r4, #16]
 8003fe2:	bf0c      	ite	eq
 8003fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fe8:	2500      	movne	r5, #0
 8003fea:	4293      	cmp	r3, r2
 8003fec:	bfc4      	itt	gt
 8003fee:	1a9b      	subgt	r3, r3, r2
 8003ff0:	18ed      	addgt	r5, r5, r3
 8003ff2:	2600      	movs	r6, #0
 8003ff4:	341a      	adds	r4, #26
 8003ff6:	42b5      	cmp	r5, r6
 8003ff8:	d11a      	bne.n	8004030 <_printf_common+0xc8>
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e008      	b.n	8004010 <_printf_common+0xa8>
 8003ffe:	2301      	movs	r3, #1
 8004000:	4652      	mov	r2, sl
 8004002:	4649      	mov	r1, r9
 8004004:	4638      	mov	r0, r7
 8004006:	47c0      	blx	r8
 8004008:	3001      	adds	r0, #1
 800400a:	d103      	bne.n	8004014 <_printf_common+0xac>
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004014:	3501      	adds	r5, #1
 8004016:	e7c6      	b.n	8003fa6 <_printf_common+0x3e>
 8004018:	18e1      	adds	r1, r4, r3
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	2030      	movs	r0, #48	; 0x30
 800401e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004022:	4422      	add	r2, r4
 8004024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800402c:	3302      	adds	r3, #2
 800402e:	e7c7      	b.n	8003fc0 <_printf_common+0x58>
 8004030:	2301      	movs	r3, #1
 8004032:	4622      	mov	r2, r4
 8004034:	4649      	mov	r1, r9
 8004036:	4638      	mov	r0, r7
 8004038:	47c0      	blx	r8
 800403a:	3001      	adds	r0, #1
 800403c:	d0e6      	beq.n	800400c <_printf_common+0xa4>
 800403e:	3601      	adds	r6, #1
 8004040:	e7d9      	b.n	8003ff6 <_printf_common+0x8e>
	...

08004044 <_printf_i>:
 8004044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	7e0f      	ldrb	r7, [r1, #24]
 800404a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800404c:	2f78      	cmp	r7, #120	; 0x78
 800404e:	4691      	mov	r9, r2
 8004050:	4680      	mov	r8, r0
 8004052:	460c      	mov	r4, r1
 8004054:	469a      	mov	sl, r3
 8004056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800405a:	d807      	bhi.n	800406c <_printf_i+0x28>
 800405c:	2f62      	cmp	r7, #98	; 0x62
 800405e:	d80a      	bhi.n	8004076 <_printf_i+0x32>
 8004060:	2f00      	cmp	r7, #0
 8004062:	f000 80d8 	beq.w	8004216 <_printf_i+0x1d2>
 8004066:	2f58      	cmp	r7, #88	; 0x58
 8004068:	f000 80a3 	beq.w	80041b2 <_printf_i+0x16e>
 800406c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004074:	e03a      	b.n	80040ec <_printf_i+0xa8>
 8004076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800407a:	2b15      	cmp	r3, #21
 800407c:	d8f6      	bhi.n	800406c <_printf_i+0x28>
 800407e:	a101      	add	r1, pc, #4	; (adr r1, 8004084 <_printf_i+0x40>)
 8004080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004084:	080040dd 	.word	0x080040dd
 8004088:	080040f1 	.word	0x080040f1
 800408c:	0800406d 	.word	0x0800406d
 8004090:	0800406d 	.word	0x0800406d
 8004094:	0800406d 	.word	0x0800406d
 8004098:	0800406d 	.word	0x0800406d
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	0800406d 	.word	0x0800406d
 80040a4:	0800406d 	.word	0x0800406d
 80040a8:	0800406d 	.word	0x0800406d
 80040ac:	0800406d 	.word	0x0800406d
 80040b0:	080041fd 	.word	0x080041fd
 80040b4:	08004121 	.word	0x08004121
 80040b8:	080041df 	.word	0x080041df
 80040bc:	0800406d 	.word	0x0800406d
 80040c0:	0800406d 	.word	0x0800406d
 80040c4:	0800421f 	.word	0x0800421f
 80040c8:	0800406d 	.word	0x0800406d
 80040cc:	08004121 	.word	0x08004121
 80040d0:	0800406d 	.word	0x0800406d
 80040d4:	0800406d 	.word	0x0800406d
 80040d8:	080041e7 	.word	0x080041e7
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	602a      	str	r2, [r5, #0]
 80040e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0a3      	b.n	8004238 <_printf_i+0x1f4>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	6829      	ldr	r1, [r5, #0]
 80040f4:	0606      	lsls	r6, r0, #24
 80040f6:	f101 0304 	add.w	r3, r1, #4
 80040fa:	d50a      	bpl.n	8004112 <_printf_i+0xce>
 80040fc:	680e      	ldr	r6, [r1, #0]
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	2e00      	cmp	r6, #0
 8004102:	da03      	bge.n	800410c <_printf_i+0xc8>
 8004104:	232d      	movs	r3, #45	; 0x2d
 8004106:	4276      	negs	r6, r6
 8004108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410c:	485e      	ldr	r0, [pc, #376]	; (8004288 <_printf_i+0x244>)
 800410e:	230a      	movs	r3, #10
 8004110:	e019      	b.n	8004146 <_printf_i+0x102>
 8004112:	680e      	ldr	r6, [r1, #0]
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	f010 0f40 	tst.w	r0, #64	; 0x40
 800411a:	bf18      	it	ne
 800411c:	b236      	sxthne	r6, r6
 800411e:	e7ef      	b.n	8004100 <_printf_i+0xbc>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	6820      	ldr	r0, [r4, #0]
 8004124:	1d19      	adds	r1, r3, #4
 8004126:	6029      	str	r1, [r5, #0]
 8004128:	0601      	lsls	r1, r0, #24
 800412a:	d501      	bpl.n	8004130 <_printf_i+0xec>
 800412c:	681e      	ldr	r6, [r3, #0]
 800412e:	e002      	b.n	8004136 <_printf_i+0xf2>
 8004130:	0646      	lsls	r6, r0, #25
 8004132:	d5fb      	bpl.n	800412c <_printf_i+0xe8>
 8004134:	881e      	ldrh	r6, [r3, #0]
 8004136:	4854      	ldr	r0, [pc, #336]	; (8004288 <_printf_i+0x244>)
 8004138:	2f6f      	cmp	r7, #111	; 0x6f
 800413a:	bf0c      	ite	eq
 800413c:	2308      	moveq	r3, #8
 800413e:	230a      	movne	r3, #10
 8004140:	2100      	movs	r1, #0
 8004142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004146:	6865      	ldr	r5, [r4, #4]
 8004148:	60a5      	str	r5, [r4, #8]
 800414a:	2d00      	cmp	r5, #0
 800414c:	bfa2      	ittt	ge
 800414e:	6821      	ldrge	r1, [r4, #0]
 8004150:	f021 0104 	bicge.w	r1, r1, #4
 8004154:	6021      	strge	r1, [r4, #0]
 8004156:	b90e      	cbnz	r6, 800415c <_printf_i+0x118>
 8004158:	2d00      	cmp	r5, #0
 800415a:	d04d      	beq.n	80041f8 <_printf_i+0x1b4>
 800415c:	4615      	mov	r5, r2
 800415e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004162:	fb03 6711 	mls	r7, r3, r1, r6
 8004166:	5dc7      	ldrb	r7, [r0, r7]
 8004168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800416c:	4637      	mov	r7, r6
 800416e:	42bb      	cmp	r3, r7
 8004170:	460e      	mov	r6, r1
 8004172:	d9f4      	bls.n	800415e <_printf_i+0x11a>
 8004174:	2b08      	cmp	r3, #8
 8004176:	d10b      	bne.n	8004190 <_printf_i+0x14c>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	07de      	lsls	r6, r3, #31
 800417c:	d508      	bpl.n	8004190 <_printf_i+0x14c>
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	6861      	ldr	r1, [r4, #4]
 8004182:	4299      	cmp	r1, r3
 8004184:	bfde      	ittt	le
 8004186:	2330      	movle	r3, #48	; 0x30
 8004188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800418c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004190:	1b52      	subs	r2, r2, r5
 8004192:	6122      	str	r2, [r4, #16]
 8004194:	f8cd a000 	str.w	sl, [sp]
 8004198:	464b      	mov	r3, r9
 800419a:	aa03      	add	r2, sp, #12
 800419c:	4621      	mov	r1, r4
 800419e:	4640      	mov	r0, r8
 80041a0:	f7ff fee2 	bl	8003f68 <_printf_common>
 80041a4:	3001      	adds	r0, #1
 80041a6:	d14c      	bne.n	8004242 <_printf_i+0x1fe>
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	b004      	add	sp, #16
 80041ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b2:	4835      	ldr	r0, [pc, #212]	; (8004288 <_printf_i+0x244>)
 80041b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041b8:	6829      	ldr	r1, [r5, #0]
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80041c0:	6029      	str	r1, [r5, #0]
 80041c2:	061d      	lsls	r5, r3, #24
 80041c4:	d514      	bpl.n	80041f0 <_printf_i+0x1ac>
 80041c6:	07df      	lsls	r7, r3, #31
 80041c8:	bf44      	itt	mi
 80041ca:	f043 0320 	orrmi.w	r3, r3, #32
 80041ce:	6023      	strmi	r3, [r4, #0]
 80041d0:	b91e      	cbnz	r6, 80041da <_printf_i+0x196>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	f023 0320 	bic.w	r3, r3, #32
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	2310      	movs	r3, #16
 80041dc:	e7b0      	b.n	8004140 <_printf_i+0xfc>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	f043 0320 	orr.w	r3, r3, #32
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	2378      	movs	r3, #120	; 0x78
 80041e8:	4828      	ldr	r0, [pc, #160]	; (800428c <_printf_i+0x248>)
 80041ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ee:	e7e3      	b.n	80041b8 <_printf_i+0x174>
 80041f0:	0659      	lsls	r1, r3, #25
 80041f2:	bf48      	it	mi
 80041f4:	b2b6      	uxthmi	r6, r6
 80041f6:	e7e6      	b.n	80041c6 <_printf_i+0x182>
 80041f8:	4615      	mov	r5, r2
 80041fa:	e7bb      	b.n	8004174 <_printf_i+0x130>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	6826      	ldr	r6, [r4, #0]
 8004200:	6961      	ldr	r1, [r4, #20]
 8004202:	1d18      	adds	r0, r3, #4
 8004204:	6028      	str	r0, [r5, #0]
 8004206:	0635      	lsls	r5, r6, #24
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	d501      	bpl.n	8004210 <_printf_i+0x1cc>
 800420c:	6019      	str	r1, [r3, #0]
 800420e:	e002      	b.n	8004216 <_printf_i+0x1d2>
 8004210:	0670      	lsls	r0, r6, #25
 8004212:	d5fb      	bpl.n	800420c <_printf_i+0x1c8>
 8004214:	8019      	strh	r1, [r3, #0]
 8004216:	2300      	movs	r3, #0
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	4615      	mov	r5, r2
 800421c:	e7ba      	b.n	8004194 <_printf_i+0x150>
 800421e:	682b      	ldr	r3, [r5, #0]
 8004220:	1d1a      	adds	r2, r3, #4
 8004222:	602a      	str	r2, [r5, #0]
 8004224:	681d      	ldr	r5, [r3, #0]
 8004226:	6862      	ldr	r2, [r4, #4]
 8004228:	2100      	movs	r1, #0
 800422a:	4628      	mov	r0, r5
 800422c:	f7fb ffd0 	bl	80001d0 <memchr>
 8004230:	b108      	cbz	r0, 8004236 <_printf_i+0x1f2>
 8004232:	1b40      	subs	r0, r0, r5
 8004234:	6060      	str	r0, [r4, #4]
 8004236:	6863      	ldr	r3, [r4, #4]
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	2300      	movs	r3, #0
 800423c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004240:	e7a8      	b.n	8004194 <_printf_i+0x150>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	462a      	mov	r2, r5
 8004246:	4649      	mov	r1, r9
 8004248:	4640      	mov	r0, r8
 800424a:	47d0      	blx	sl
 800424c:	3001      	adds	r0, #1
 800424e:	d0ab      	beq.n	80041a8 <_printf_i+0x164>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	079b      	lsls	r3, r3, #30
 8004254:	d413      	bmi.n	800427e <_printf_i+0x23a>
 8004256:	68e0      	ldr	r0, [r4, #12]
 8004258:	9b03      	ldr	r3, [sp, #12]
 800425a:	4298      	cmp	r0, r3
 800425c:	bfb8      	it	lt
 800425e:	4618      	movlt	r0, r3
 8004260:	e7a4      	b.n	80041ac <_printf_i+0x168>
 8004262:	2301      	movs	r3, #1
 8004264:	4632      	mov	r2, r6
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	47d0      	blx	sl
 800426c:	3001      	adds	r0, #1
 800426e:	d09b      	beq.n	80041a8 <_printf_i+0x164>
 8004270:	3501      	adds	r5, #1
 8004272:	68e3      	ldr	r3, [r4, #12]
 8004274:	9903      	ldr	r1, [sp, #12]
 8004276:	1a5b      	subs	r3, r3, r1
 8004278:	42ab      	cmp	r3, r5
 800427a:	dcf2      	bgt.n	8004262 <_printf_i+0x21e>
 800427c:	e7eb      	b.n	8004256 <_printf_i+0x212>
 800427e:	2500      	movs	r5, #0
 8004280:	f104 0619 	add.w	r6, r4, #25
 8004284:	e7f5      	b.n	8004272 <_printf_i+0x22e>
 8004286:	bf00      	nop
 8004288:	080045b5 	.word	0x080045b5
 800428c:	080045c6 	.word	0x080045c6

08004290 <memcpy>:
 8004290:	440a      	add	r2, r1
 8004292:	4291      	cmp	r1, r2
 8004294:	f100 33ff 	add.w	r3, r0, #4294967295
 8004298:	d100      	bne.n	800429c <memcpy+0xc>
 800429a:	4770      	bx	lr
 800429c:	b510      	push	{r4, lr}
 800429e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a6:	4291      	cmp	r1, r2
 80042a8:	d1f9      	bne.n	800429e <memcpy+0xe>
 80042aa:	bd10      	pop	{r4, pc}

080042ac <memmove>:
 80042ac:	4288      	cmp	r0, r1
 80042ae:	b510      	push	{r4, lr}
 80042b0:	eb01 0402 	add.w	r4, r1, r2
 80042b4:	d902      	bls.n	80042bc <memmove+0x10>
 80042b6:	4284      	cmp	r4, r0
 80042b8:	4623      	mov	r3, r4
 80042ba:	d807      	bhi.n	80042cc <memmove+0x20>
 80042bc:	1e43      	subs	r3, r0, #1
 80042be:	42a1      	cmp	r1, r4
 80042c0:	d008      	beq.n	80042d4 <memmove+0x28>
 80042c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ca:	e7f8      	b.n	80042be <memmove+0x12>
 80042cc:	4402      	add	r2, r0
 80042ce:	4601      	mov	r1, r0
 80042d0:	428a      	cmp	r2, r1
 80042d2:	d100      	bne.n	80042d6 <memmove+0x2a>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042de:	e7f7      	b.n	80042d0 <memmove+0x24>

080042e0 <_free_r>:
 80042e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d044      	beq.n	8004370 <_free_r+0x90>
 80042e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ea:	9001      	str	r0, [sp, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f1a1 0404 	sub.w	r4, r1, #4
 80042f2:	bfb8      	it	lt
 80042f4:	18e4      	addlt	r4, r4, r3
 80042f6:	f000 f913 	bl	8004520 <__malloc_lock>
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <_free_r+0x94>)
 80042fc:	9801      	ldr	r0, [sp, #4]
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	b933      	cbnz	r3, 8004310 <_free_r+0x30>
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	6014      	str	r4, [r2, #0]
 8004306:	b003      	add	sp, #12
 8004308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800430c:	f000 b90e 	b.w	800452c <__malloc_unlock>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d908      	bls.n	8004326 <_free_r+0x46>
 8004314:	6825      	ldr	r5, [r4, #0]
 8004316:	1961      	adds	r1, r4, r5
 8004318:	428b      	cmp	r3, r1
 800431a:	bf01      	itttt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	1949      	addeq	r1, r1, r5
 8004322:	6021      	streq	r1, [r4, #0]
 8004324:	e7ed      	b.n	8004302 <_free_r+0x22>
 8004326:	461a      	mov	r2, r3
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b10b      	cbz	r3, 8004330 <_free_r+0x50>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d9fa      	bls.n	8004326 <_free_r+0x46>
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	1855      	adds	r5, r2, r1
 8004334:	42a5      	cmp	r5, r4
 8004336:	d10b      	bne.n	8004350 <_free_r+0x70>
 8004338:	6824      	ldr	r4, [r4, #0]
 800433a:	4421      	add	r1, r4
 800433c:	1854      	adds	r4, r2, r1
 800433e:	42a3      	cmp	r3, r4
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	d1e0      	bne.n	8004306 <_free_r+0x26>
 8004344:	681c      	ldr	r4, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	6053      	str	r3, [r2, #4]
 800434a:	4421      	add	r1, r4
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	e7da      	b.n	8004306 <_free_r+0x26>
 8004350:	d902      	bls.n	8004358 <_free_r+0x78>
 8004352:	230c      	movs	r3, #12
 8004354:	6003      	str	r3, [r0, #0]
 8004356:	e7d6      	b.n	8004306 <_free_r+0x26>
 8004358:	6825      	ldr	r5, [r4, #0]
 800435a:	1961      	adds	r1, r4, r5
 800435c:	428b      	cmp	r3, r1
 800435e:	bf04      	itt	eq
 8004360:	6819      	ldreq	r1, [r3, #0]
 8004362:	685b      	ldreq	r3, [r3, #4]
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	bf04      	itt	eq
 8004368:	1949      	addeq	r1, r1, r5
 800436a:	6021      	streq	r1, [r4, #0]
 800436c:	6054      	str	r4, [r2, #4]
 800436e:	e7ca      	b.n	8004306 <_free_r+0x26>
 8004370:	b003      	add	sp, #12
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	20000140 	.word	0x20000140

08004378 <sbrk_aligned>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4e0e      	ldr	r6, [pc, #56]	; (80043b4 <sbrk_aligned+0x3c>)
 800437c:	460c      	mov	r4, r1
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	4605      	mov	r5, r0
 8004382:	b911      	cbnz	r1, 800438a <sbrk_aligned+0x12>
 8004384:	f000 f8bc 	bl	8004500 <_sbrk_r>
 8004388:	6030      	str	r0, [r6, #0]
 800438a:	4621      	mov	r1, r4
 800438c:	4628      	mov	r0, r5
 800438e:	f000 f8b7 	bl	8004500 <_sbrk_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d00a      	beq.n	80043ac <sbrk_aligned+0x34>
 8004396:	1cc4      	adds	r4, r0, #3
 8004398:	f024 0403 	bic.w	r4, r4, #3
 800439c:	42a0      	cmp	r0, r4
 800439e:	d007      	beq.n	80043b0 <sbrk_aligned+0x38>
 80043a0:	1a21      	subs	r1, r4, r0
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 f8ac 	bl	8004500 <_sbrk_r>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d101      	bne.n	80043b0 <sbrk_aligned+0x38>
 80043ac:	f04f 34ff 	mov.w	r4, #4294967295
 80043b0:	4620      	mov	r0, r4
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	20000144 	.word	0x20000144

080043b8 <_malloc_r>:
 80043b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043bc:	1ccd      	adds	r5, r1, #3
 80043be:	f025 0503 	bic.w	r5, r5, #3
 80043c2:	3508      	adds	r5, #8
 80043c4:	2d0c      	cmp	r5, #12
 80043c6:	bf38      	it	cc
 80043c8:	250c      	movcc	r5, #12
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	4607      	mov	r7, r0
 80043ce:	db01      	blt.n	80043d4 <_malloc_r+0x1c>
 80043d0:	42a9      	cmp	r1, r5
 80043d2:	d905      	bls.n	80043e0 <_malloc_r+0x28>
 80043d4:	230c      	movs	r3, #12
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	2600      	movs	r6, #0
 80043da:	4630      	mov	r0, r6
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	4e2e      	ldr	r6, [pc, #184]	; (800449c <_malloc_r+0xe4>)
 80043e2:	f000 f89d 	bl	8004520 <__malloc_lock>
 80043e6:	6833      	ldr	r3, [r6, #0]
 80043e8:	461c      	mov	r4, r3
 80043ea:	bb34      	cbnz	r4, 800443a <_malloc_r+0x82>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4638      	mov	r0, r7
 80043f0:	f7ff ffc2 	bl	8004378 <sbrk_aligned>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	4604      	mov	r4, r0
 80043f8:	d14d      	bne.n	8004496 <_malloc_r+0xde>
 80043fa:	6834      	ldr	r4, [r6, #0]
 80043fc:	4626      	mov	r6, r4
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d140      	bne.n	8004484 <_malloc_r+0xcc>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	4631      	mov	r1, r6
 8004406:	4638      	mov	r0, r7
 8004408:	eb04 0803 	add.w	r8, r4, r3
 800440c:	f000 f878 	bl	8004500 <_sbrk_r>
 8004410:	4580      	cmp	r8, r0
 8004412:	d13a      	bne.n	800448a <_malloc_r+0xd2>
 8004414:	6821      	ldr	r1, [r4, #0]
 8004416:	3503      	adds	r5, #3
 8004418:	1a6d      	subs	r5, r5, r1
 800441a:	f025 0503 	bic.w	r5, r5, #3
 800441e:	3508      	adds	r5, #8
 8004420:	2d0c      	cmp	r5, #12
 8004422:	bf38      	it	cc
 8004424:	250c      	movcc	r5, #12
 8004426:	4629      	mov	r1, r5
 8004428:	4638      	mov	r0, r7
 800442a:	f7ff ffa5 	bl	8004378 <sbrk_aligned>
 800442e:	3001      	adds	r0, #1
 8004430:	d02b      	beq.n	800448a <_malloc_r+0xd2>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	442b      	add	r3, r5
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	e00e      	b.n	8004458 <_malloc_r+0xa0>
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	1b52      	subs	r2, r2, r5
 800443e:	d41e      	bmi.n	800447e <_malloc_r+0xc6>
 8004440:	2a0b      	cmp	r2, #11
 8004442:	d916      	bls.n	8004472 <_malloc_r+0xba>
 8004444:	1961      	adds	r1, r4, r5
 8004446:	42a3      	cmp	r3, r4
 8004448:	6025      	str	r5, [r4, #0]
 800444a:	bf18      	it	ne
 800444c:	6059      	strne	r1, [r3, #4]
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	bf08      	it	eq
 8004452:	6031      	streq	r1, [r6, #0]
 8004454:	5162      	str	r2, [r4, r5]
 8004456:	604b      	str	r3, [r1, #4]
 8004458:	4638      	mov	r0, r7
 800445a:	f104 060b 	add.w	r6, r4, #11
 800445e:	f000 f865 	bl	800452c <__malloc_unlock>
 8004462:	f026 0607 	bic.w	r6, r6, #7
 8004466:	1d23      	adds	r3, r4, #4
 8004468:	1af2      	subs	r2, r6, r3
 800446a:	d0b6      	beq.n	80043da <_malloc_r+0x22>
 800446c:	1b9b      	subs	r3, r3, r6
 800446e:	50a3      	str	r3, [r4, r2]
 8004470:	e7b3      	b.n	80043da <_malloc_r+0x22>
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	42a3      	cmp	r3, r4
 8004476:	bf0c      	ite	eq
 8004478:	6032      	streq	r2, [r6, #0]
 800447a:	605a      	strne	r2, [r3, #4]
 800447c:	e7ec      	b.n	8004458 <_malloc_r+0xa0>
 800447e:	4623      	mov	r3, r4
 8004480:	6864      	ldr	r4, [r4, #4]
 8004482:	e7b2      	b.n	80043ea <_malloc_r+0x32>
 8004484:	4634      	mov	r4, r6
 8004486:	6876      	ldr	r6, [r6, #4]
 8004488:	e7b9      	b.n	80043fe <_malloc_r+0x46>
 800448a:	230c      	movs	r3, #12
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4638      	mov	r0, r7
 8004490:	f000 f84c 	bl	800452c <__malloc_unlock>
 8004494:	e7a1      	b.n	80043da <_malloc_r+0x22>
 8004496:	6025      	str	r5, [r4, #0]
 8004498:	e7de      	b.n	8004458 <_malloc_r+0xa0>
 800449a:	bf00      	nop
 800449c:	20000140 	.word	0x20000140

080044a0 <_realloc_r>:
 80044a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a4:	4680      	mov	r8, r0
 80044a6:	4614      	mov	r4, r2
 80044a8:	460e      	mov	r6, r1
 80044aa:	b921      	cbnz	r1, 80044b6 <_realloc_r+0x16>
 80044ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044b0:	4611      	mov	r1, r2
 80044b2:	f7ff bf81 	b.w	80043b8 <_malloc_r>
 80044b6:	b92a      	cbnz	r2, 80044c4 <_realloc_r+0x24>
 80044b8:	f7ff ff12 	bl	80042e0 <_free_r>
 80044bc:	4625      	mov	r5, r4
 80044be:	4628      	mov	r0, r5
 80044c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c4:	f000 f838 	bl	8004538 <_malloc_usable_size_r>
 80044c8:	4284      	cmp	r4, r0
 80044ca:	4607      	mov	r7, r0
 80044cc:	d802      	bhi.n	80044d4 <_realloc_r+0x34>
 80044ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044d2:	d812      	bhi.n	80044fa <_realloc_r+0x5a>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4640      	mov	r0, r8
 80044d8:	f7ff ff6e 	bl	80043b8 <_malloc_r>
 80044dc:	4605      	mov	r5, r0
 80044de:	2800      	cmp	r0, #0
 80044e0:	d0ed      	beq.n	80044be <_realloc_r+0x1e>
 80044e2:	42bc      	cmp	r4, r7
 80044e4:	4622      	mov	r2, r4
 80044e6:	4631      	mov	r1, r6
 80044e8:	bf28      	it	cs
 80044ea:	463a      	movcs	r2, r7
 80044ec:	f7ff fed0 	bl	8004290 <memcpy>
 80044f0:	4631      	mov	r1, r6
 80044f2:	4640      	mov	r0, r8
 80044f4:	f7ff fef4 	bl	80042e0 <_free_r>
 80044f8:	e7e1      	b.n	80044be <_realloc_r+0x1e>
 80044fa:	4635      	mov	r5, r6
 80044fc:	e7df      	b.n	80044be <_realloc_r+0x1e>
	...

08004500 <_sbrk_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d06      	ldr	r5, [pc, #24]	; (800451c <_sbrk_r+0x1c>)
 8004504:	2300      	movs	r3, #0
 8004506:	4604      	mov	r4, r0
 8004508:	4608      	mov	r0, r1
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	f7fc f884 	bl	8000618 <_sbrk>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d102      	bne.n	800451a <_sbrk_r+0x1a>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	b103      	cbz	r3, 800451a <_sbrk_r+0x1a>
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	bd38      	pop	{r3, r4, r5, pc}
 800451c:	20000148 	.word	0x20000148

08004520 <__malloc_lock>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__malloc_lock+0x8>)
 8004522:	f000 b811 	b.w	8004548 <__retarget_lock_acquire_recursive>
 8004526:	bf00      	nop
 8004528:	2000014c 	.word	0x2000014c

0800452c <__malloc_unlock>:
 800452c:	4801      	ldr	r0, [pc, #4]	; (8004534 <__malloc_unlock+0x8>)
 800452e:	f000 b80c 	b.w	800454a <__retarget_lock_release_recursive>
 8004532:	bf00      	nop
 8004534:	2000014c 	.word	0x2000014c

08004538 <_malloc_usable_size_r>:
 8004538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453c:	1f18      	subs	r0, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfbc      	itt	lt
 8004542:	580b      	ldrlt	r3, [r1, r0]
 8004544:	18c0      	addlt	r0, r0, r3
 8004546:	4770      	bx	lr

08004548 <__retarget_lock_acquire_recursive>:
 8004548:	4770      	bx	lr

0800454a <__retarget_lock_release_recursive>:
 800454a:	4770      	bx	lr

0800454c <_init>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr

08004558 <_fini>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr
